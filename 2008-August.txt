From zooey at mail.berlios.de  Tue Aug 19 13:05:23 2008
From: zooey at mail.berlios.de (zooey at BerliOS)
Date: Tue, 19 Aug 2008 13:05:23 +0200
Subject: [pe-commits] r537 - in branches/model-based-editing: Extensions
	Sources
Message-ID: <200808191105.m7JB5NTv030173@sheep.berlios.de>

Author: zooey
Date: 2008-08-19 13:05:20 +0200 (Tue, 19 Aug 2008)
New Revision: 537
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=537&view=rev

Added:
   branches/model-based-editing/Extensions/HeaderHeader.cpp
Modified:
   branches/model-based-editing/Extensions/Jamfile
   branches/model-based-editing/Extensions/WebPaste.cpp
   branches/model-based-editing/Sources/CFilterChoiceDialog.cpp
   branches/model-based-editing/Sources/PText.cpp
   branches/model-based-editing/Sources/Prefs.h
Log:
* merged changes from trunk up to r528



Copied: branches/model-based-editing/Extensions/HeaderHeader.cpp (from rev 528, trunk/Extensions/HeaderHeader.cpp)

Modified: branches/model-based-editing/Extensions/Jamfile
===================================================================
--- branches/model-based-editing/Extensions/Jamfile	2008-08-12 12:53:38 UTC (rev 536)
+++ branches/model-based-editing/Extensions/Jamfile	2008-08-19 11:05:20 UTC (rev 537)
@@ -64,6 +64,13 @@
 # </pe-src>
 
 # <pe-src>
+PeExtension HeaderHeader
+	: HeaderHeader.cpp 
+	: libhekkel.so <nogrist>pe be tracker $(STDC++LIB)
+	;
+# </pe-src>
+
+# <pe-src>
 PeExtension ImageToC
 	: ImageToC.cpp 
 	: libhekkel.so <nogrist>pe be translation

Modified: branches/model-based-editing/Extensions/WebPaste.cpp
===================================================================
--- branches/model-based-editing/Extensions/WebPaste.cpp	2008-08-12 12:53:38 UTC (rev 536)
+++ branches/model-based-editing/Extensions/WebPaste.cpp	2008-08-19 11:05:20 UTC (rev 537)
@@ -80,6 +80,7 @@
 	do {
 		len = Length();
 		char *buf = LockBuffer(len + 4096);
+		memset(buf + len, 0, 4096);
 		buf += len;
 		int got = fread(buf, 1, 4096, fFile);
 		//fprintf(stderr, "got %d\n", got);

Modified: branches/model-based-editing/Sources/CFilterChoiceDialog.cpp
===================================================================
--- branches/model-based-editing/Sources/CFilterChoiceDialog.cpp	2008-08-12 12:53:38 UTC (rev 536)
+++ branches/model-based-editing/Sources/CFilterChoiceDialog.cpp	2008-08-19 11:05:20 UTC (rev 537)
@@ -17,6 +17,8 @@
 #include "HColorUtils.h"
 #include "HDialogViews.h"
 #include "HError.h"
+#include "KeyBindings.h"
+#include "Prefs.h"
 
 // internal messages
 enum {
@@ -525,6 +527,35 @@
 		case MSG_FILTER_MODIFIED:
 			_SetFilter(fFilterStringControl->Text());
 			break;
+		case B_MOUSE_WHEEL_CHANGED:
+		{
+			// the wheel that have changed may *not* be the vertical one,
+			// so we check:
+			float y;
+			if (message->FindFloat("be:wheel_delta_y", &y) == B_OK && y != 0)
+			{
+				float delta 
+					= 20.0 * gPrefs->GetPrefInt(prf_I_ScrollwheelLines, 3);
+				BScrollBar* vScroller = fChoicesList->ScrollBar(B_VERTICAL);
+				float minVal, maxVal;
+				vScroller->GetRange(&minVal, &maxVal);
+				float value = vScroller->Value();
+				if (y < 0) 
+				{
+					value -= delta;
+					value = max(minVal, value);
+				}
+				else 
+				{
+					value += delta;
+					value = min(maxVal, value);
+				}
+				vScroller->SetValue(value);
+			}
+			else
+				HDialog::MessageReceived(message);
+			break;
+		}
 		default:
 			BWindow::MessageReceived(message);
 			break;

Modified: branches/model-based-editing/Sources/PText.cpp
===================================================================
--- branches/model-based-editing/Sources/PText.cpp	2008-08-12 12:53:38 UTC (rev 536)
+++ branches/model-based-editing/Sources/PText.cpp	2008-08-19 11:05:20 UTC (rev 537)
@@ -169,7 +169,7 @@
 };
 
 
-//	#pragma mark - class PText
+// #pragma mark - class PText
 
 
 PText::PText(BRect frame, BScrollBar *bars[], const char *ext)
@@ -751,7 +751,7 @@
 	return dynamic_cast<PDoc*>(Window());
 } // PText::Doc
 
-#pragma mark - Wrap
+// // #pragma mark - Wrap
 
 int PText::FindLineBreak(int offset, bool hard)
 {
@@ -995,7 +995,7 @@
 	RestyleDirtyLines(0);
 } /* PText::RecalculateLineBreaks */
 
-#pragma mark - Undo
+// #pragma mark - Undo
 
 void PText::Undo()
 {
@@ -1104,7 +1104,7 @@
 	fLastSavedStateCmd = NULL;
 } // PText::FlushUndo
 
-#pragma mark - Text
+// #pragma mark - Text
 
 void PText::CopyBlock(char*& s, int from, int to)
 {
@@ -1341,7 +1341,7 @@
 	fStatus->SetOffset(fCaret);
 } /* PText::TypeString */
 
-#pragma mark - Split
+// #pragma mark - Split
 
 const g_unit_t
 	kSplitMinimum = 50;
@@ -1577,7 +1577,7 @@
 	Window()->UpdateIfNeeded();
 } /* PText::FrameMoved */
 
-#pragma mark - Scroll
+// #pragma mark - Scroll
 
 void PText::AdjustScrollBars()
 {
@@ -1860,7 +1860,7 @@
 	Doc()->ToolBar()->SetHOffset(-p.x + 3);
 } /* PText::ScrollTo */
 
-#pragma mark - Mouse
+// #pragma mark - Mouse
 
 void PText::MouseDown(BPoint where)
 {
@@ -2171,94 +2171,66 @@
 {
 	fWindowActive = Window()->IsActive();
 
-	char *s = NULL;
-	ssize_t sl;
-
 	if (msg->HasData("text/plain", B_MIME_TYPE))
 	{
-		char *t;
+		char *s;
+		ssize_t sl;
 
-		FailOSErr(msg->FindData("text/plain", B_MIME_TYPE, (const void**)&t, &sl));
-		s = new char[sl];
-		FailNil(s);
-		memcpy(s, t, sl);
-	}
-	else if (msg->HasRef("refs"))
-	{
-		entry_ref ref;
-
-		FailOSErr(msg->FindRef("refs", &ref));
-
-		BFile file;
-		FailOSErr(file.SetTo(&ref, B_READ_ONLY));
-
-		key_info ki;
-		if (get_key_info(&ki) == B_OK && ki.modifiers & (B_COMMAND_KEY | B_OPTION_KEY))
-			be_app->RefsReceived(msg);
-		else
+		FailOSErr(msg->FindData("text/plain", B_MIME_TYPE, (const void**)&s, &sl));
+		if (s)
 		{
-			char m[B_MIME_TYPE_LENGTH];
-			BNodeInfo(&file).GetType(m);
-
-			if (strncmp(m, "text/", 5) == 0)
+			int offset;
+			if (msg->IsSourceRemote() || msg->IsSystem() || sfDragSource != this)
+				offset = -1;
+			else if (fDragButtons & B_TERTIARY_MOUSE_BUTTON)
+				offset = -1;
+			else if (fDragButtons & B_SECONDARY_MOUSE_BUTTON)
 			{
-				sl = file.Seek(0, SEEK_END);
-				file.Seek(0, SEEK_SET);
-
-				s = new char[sl];
-				if (file.Read(s, sl) != sl)
-					THROW(("Read Error"));
+				BPopUpMenu popup("copy or move");
+				popup.SetFont(be_plain_font);
+				popup.AddItem(new BMenuItem("Move", NULL));
+				popup.AddItem(new BMenuItem("Copy", NULL));
+				BMenuItem *item = popup.Go(msg->DropPoint(), false, true);
+	
+				if (!item)
+				{
+					HideCaret();
+					fAnchor = fSavedAnchor;
+					fCaret = fSavedCaret;
+					return;
+				}
+	
+				if (popup.IndexOf(item) == 0)
+					offset = fDragStart;
+				else
+					offset = -1;
 			}
-		}
-	}
-
-	if (s)
-	{
-		int offset;
-		if (msg->IsSourceRemote() || msg->IsSystem() || sfDragSource != this)
-			offset = -1;
-		else if (fDragButtons & B_TERTIARY_MOUSE_BUTTON)
-			offset = -1;
-		else if (fDragButtons & B_SECONDARY_MOUSE_BUTTON)
-		{
-			BPopUpMenu popup("copy or move");
-			popup.SetFont(be_plain_font);
-			popup.AddItem(new BMenuItem("Move", NULL));
-			popup.AddItem(new BMenuItem("Copy", NULL));
-			BMenuItem *item = popup.Go(msg->DropPoint(), false, true);
-
-			if (!item)
-			{
-				HideCaret();
-				fAnchor = fSavedAnchor;
-				fCaret = fSavedCaret;
-				return;
-			}
-
-			if (popup.IndexOf(item) == 0)
-				offset = fDragStart;
 			else
-				offset = -1;
-		}
-		else
-			offset = fDragStart;
-
-		if (offset == -1 || fCaret < offset || fCaret > offset + sl)
-		{
-			if (sfDragSource == this)
+				offset = fDragStart;
+	
+			if (offset == -1 || fCaret < offset || fCaret > offset + sl)
 			{
-				int a, c;
-
-				a = Offset2Line(fSavedAnchor);
-				c = Offset2Line(fSavedCaret);
-				TouchLines(min(a, c), max(a, c));
+				if (sfDragSource == this)
+				{
+					int a, c;
+	
+					a = Offset2Line(fSavedAnchor);
+					c = Offset2Line(fSavedCaret);
+					TouchLines(min(a, c), max(a, c));
+				}
+				RegisterCommand(new PDropCmd(this, s, sl, offset, fCaret));
 			}
-			RegisterCommand(new PDropCmd(this, s, sl, offset, fCaret));
 		}
-
-		if (msg->HasRef("refs"))
-			delete s;
 	}
+	else if (msg->HasRef("refs"))
+	{
+		// open all dropped files as documents:
+		BMessage openMsg(B_REFS_RECEIVED);
+		entry_ref ref;
+		for(int32 i=0; msg->FindRef("refs", i, &ref) == B_OK; ++i)
+			openMsg.AddRef("refs", &ref);
+		be_app_messenger.SendMessage(&openMsg);
+	}
 } /* PText::HandleDrop */
 
 bool PText::WaitMouseMoved(BPoint where)
@@ -2283,7 +2255,7 @@
 	return true;
 } /* PText::WaitMouseMoved */
 
-#pragma mark - Function Popup
+// #pragma mark - Function Popup
 
 class CSeparatorItem : public BMenuItem
 {
@@ -2565,7 +2537,7 @@
 		ShowFunctionMenu(ConvertToScreen(where), kFunctionsOnly);
 } /* PText::ShowContextualMenu */
 
-#pragma mark - Lines
+// #pragma mark - Lines
 
 void PText::OffsetLineBreaks(int bytes, int line)
 {
@@ -3144,7 +3116,7 @@
 	}
 } // PText::BlockOffsetsForLine
 
-#pragma mark - Language
+// #pragma mark - Language
 
 int PText::FindWord(int key, bool subWord)
 {
@@ -3362,7 +3334,7 @@
 	}
 } /* PText::HashLines */
 
-#pragma mark - Keys
+// #pragma mark - Keys
 
 void PText::KeyDown(const char *bytes, int32 numBytes)
 {
@@ -3970,7 +3942,7 @@
 	if (s) free(s);
 } /* PText::GlossaryButton */
 
-#pragma mark - Find
+// #pragma mark - Find
 
 void PText::Find(unsigned long msgWhat, void *args)
 {
@@ -4408,7 +4380,7 @@
 	}
 } /* PText::IncSearchKey */
 
-#pragma mark - Exec
+// #pragma mark - Exec
 
 const int kBufferSize = 4096;
 
@@ -4620,7 +4592,7 @@
 	return 0;
 } /* PExec::Execute */
 
-#pragma mark -
+// #pragma mark -
 
 void PText::ExecuteSelection()
 {
@@ -4681,7 +4653,7 @@
 	CharKeyDown("\n", 1);
 } /* PText::PrepareForOutput */
 
-#pragma mark - Draw
+// #pragma mark - Draw
 
 void PText::Draw(BRect updateRect)
 {
@@ -5422,7 +5394,7 @@
 		Draw(b);
 } /* PText::ShiftLinesPart2 */
 
-#pragma mark - Printing
+// #pragma mark - Printing
 
 struct PrintFunctionRef {
 	int32 offset;
@@ -5578,16 +5550,16 @@
 	}
 
 	fprintf(stderr, "printableRect = {%f, %f, %f, %f}\n", printableRect.left, printableRect.top, printableRect.right, printableRect.bottom);
-	fprintf(stderr, "firstLine = %d\n", firstLine);
-	fprintf(stderr, "lastLine = %d\n", lastLine);
-	fprintf(stderr, "pagesInDocument = %d\n", pagesInDocument);
-	fprintf(stderr, "linesInDocument = %d\n", linesInDocument);
+	fprintf(stderr, "firstLine = %ld\n", firstLine);
+	fprintf(stderr, "lastLine = %ld\n", lastLine);
+	fprintf(stderr, "pagesInDocument = %ld\n", pagesInDocument);
+	fprintf(stderr, "linesInDocument = %ld\n", linesInDocument);
 
 	int32 currentLine = 0;
 	while (currentLine < linesInDocument)
 	{
 		float currentHeight = 0;
-		fprintf(stderr, "currentLine = %d\n", currentLine);
+		fprintf(stderr, "currentLine = %ld\n", currentLine);
 		// smallest of remaining lines or number of lines fitting the page
 		int32 lines = (int32)(MIN((1 + linesInDocument - currentLine), printableRect.Height() / fLineHeight));
 		currentHeight += fLineHeight * lines;
@@ -5611,8 +5583,8 @@
 	}
 
 	
-	fprintf(stderr, "pagesInDocument = %d\n", pagesInDocument);
-	fprintf(stderr, "linesInDocument = %d\n", linesInDocument);
+	fprintf(stderr, "pagesInDocument = %ld\n", pagesInDocument);
+	fprintf(stderr, "linesInDocument = %ld\n", linesInDocument);
 
 	// let's do it!
 	printJob.BeginJob();
@@ -5622,7 +5594,7 @@
 		int32 printLine = firstLine;
 		while (printLine <= lastLine)
 		{
-			fprintf(stderr, "printLine = %d, lastLine = %d\n", printLine, lastLine);
+			fprintf(stderr, "printLine = %ld, lastLine = %ld\n", printLine, lastLine);
 			float currentHeight = 0;
 			int32 firstLineOnPage = printLine;
 			// smallest of remaining lines or number of lines fitting the page
@@ -5649,7 +5621,7 @@
 	return B_OK;
 } /* PText::Print */
 
-#pragma mark - Commands
+// #pragma mark - Commands
 
 BFilePanel *gCwdPanel = NULL;
 

Modified: branches/model-based-editing/Sources/Prefs.h
===================================================================
--- branches/model-based-editing/Sources/Prefs.h	2008-08-12 12:53:38 UTC (rev 536)
+++ branches/model-based-editing/Sources/Prefs.h	2008-08-19 11:05:20 UTC (rev 537)
@@ -19,32 +19,32 @@
 const char* const prf_X_SearchPath				= "searchpath";
 const char* const prf_X_StdErrPattern			= "stderrpattern";
 
-const char* const prf_C_Low						= "low color";
-const char* const prf_C_Text					= "text color";
+const char* const prf_C_Attribute				= "attribute color";
+const char* const prf_C_CharConst				= "char constant color";
 const char* const prf_C_Comment1				= "comment color";
 const char* const prf_C_Comment2				= "alt comment color";
 const char* const prf_C_Error1					= "error color";
 const char* const prf_C_Error2					= "alt error color";
+const char* const prf_C_IdentifierSystem		= "system identifier color";
+const char* const prf_C_IdentifierUser			= "user identifier color";
+const char* const prf_C_Invisibles				= "invisibles color";
+const char* const prf_C_Keyword1				= "keyword color";
 const char* const prf_C_Keyword2				= "alt keyword color";
+const char* const prf_C_Low						= "low color";
+const char* const prf_C_Mark					= "mark color";
 const char* const prf_C_Number1					= "number color";
 const char* const prf_C_Number2					= "alt number color";
 const char* const prf_C_Operator1				= "operator color";
 const char* const prf_C_Operator2				= "alt operator color";
-const char* const prf_C_Separator1				= "separator color";
-const char* const prf_C_Separator2				= "alt separator color";
 const char* const prf_C_Preprocessor1			= "preprocessor color";
 const char* const prf_C_Preprocessor2			= "altprocessor color";
-const char* const prf_C_CharConst				= "char constant color";
-const char* const prf_C_Invisibles				= "invisibles color";
-const char* const prf_C_Keyword1				= "keyword color";
-const char* const prf_C_Mark					= "mark color";
 const char* const prf_C_Selection				= "selection color";
+const char* const prf_C_Separator1				= "separator color";
+const char* const prf_C_Separator2				= "alt separator color";
 const char* const prf_C_String1					= "string color";
 const char* const prf_C_String2					= "tagstring color";
-const char* const prf_C_IdentifierSystem		= "system identifier color";
 const char* const prf_C_Tag						= "tag color";
-const char* const prf_C_Attribute				= "attribute color";
-const char* const prf_C_IdentifierUser			= "user identifier color";
+const char* const prf_C_Text					= "text color";
 const char* const prf_C_UserSet1				= "user1";
 const char* const prf_C_UserSet2				= "user2";
 const char* const prf_C_UserSet3				= "user3";
@@ -54,40 +54,26 @@
 const char* const prf_D_AltFontSize				= "alt font size";
 const char* const prf_D_FontSize				= "font size";
 
-const char* const prf_I_SearchBackwards			= "Search Backwards";
-const char* const prf_I_SearchBatch				= "Search Batch";
-const char* const prf_I_SearchEntireWord		= "Search Entire Word";
-const char* const prf_I_SearchIgnoreCase		= "Search Ignore Case";
-const char* const prf_I_SearchMultikind			= "Search Multikind";
-const char* const prf_I_SearchRecursive			= "Search Recursive";
-const char* const prf_I_SearchTextFilesOnly		= "Search Text Files Only";
-const char* const prf_I_SearchWhichDir			= "Search Whichdir";
-const char* const prf_I_SearchWrap				= "Search Wrap";
-const char* const prf_I_SearchWithGrep			= "Search with Grep";
 const char* const prf_I_AltFontSize				= "alt font size";
 const char* const prf_I_AltHome					= "althome";
 const char* const prf_I_AutoIndent				= "auto indent";
 const char* const prf_I_AutodetectProjects		= "autodetect projects";
-const char* const prf_I_MakeBackup				= "backup";
 const char* const prf_I_BalanceWhileTyping		= "balance";
 const char* const prf_I_BeIncludes				= "beincludes";
 const char* const prf_I_BlockCursor				= "block cursor";
 const char* const prf_I_CenterFoundString		= "centerfound";
+const char* const prf_I_ContextChars			= "contextchars";
 const char* const prf_I_ContextLines			= "contextlines";
-const char* const prf_I_ContextChars			= "contextchars";
 const char* const prf_I_DiffCaseInsensitive		= "diffcase";
 const char* const prf_I_DiffIgnoreWhiteSpace	= "diffwhite";
+const char* const prf_I_EndWithNewline			= "nl at eof";
 const char* const prf_I_FlashCursor				= "flash cursor";
 const char* const prf_I_FontSize				= "font size";
 const char* const prf_I_FullPathInTitle			= "fullpath";
-const char* const prf_I_ShowBeIdeMenu			= "ide menu";
-const char* const prf_I_ShowIncludes			= "includes";
 const char* const prf_I_InclSearchIgnoreCase	= "isearch_igncase";
 const char* const prf_I_LoadBeIdeExt			= "mw plugins";
-const char* const prf_I_EndWithNewline			= "nl at eof";
-const char* const prf_I_SearchParent			= "parent";
+const char* const prf_I_MakeBackup				= "backup";
 const char* const prf_I_PassiveFtp				= "passive ftp";
-const char* const prf_I_ShowPrototypes			= "protos";
 const char* const prf_I_RecentSize				= "recent size";
 const char* const prf_I_RedirectStdErr			= "redirect stderr";
 const char* const prf_I_RelativeGroupPaths		= "relative group paths";
@@ -99,15 +85,30 @@
 const char* const prf_I_SavedState				= "saved state";
 const char* const prf_I_ScrollwheelLines		= "scrollwheel lines";
 						// Currently not in GUI
-const char* const prf_I_ShowPaletteForHtml		= "show htmlpalette for html";
+const char* const prf_I_SearchBackwards			= "Search Backwards";
+const char* const prf_I_SearchBatch				= "Search Batch";
+const char* const prf_I_SearchEntireWord		= "Search Entire Word";
+const char* const prf_I_SearchIgnoreCase		= "Search Ignore Case";
+const char* const prf_I_SearchMultikind			= "Search Multikind";
+const char* const prf_I_SearchParent			= "parent";
+const char* const prf_I_SearchRecursive			= "Search Recursive";
+const char* const prf_I_SearchTextFilesOnly		= "Search Text Files Only";
+const char* const prf_I_SearchWhichDir			= "Search Whichdir";
+const char* const prf_I_SearchWithGrep			= "Search with Grep";
+const char* const prf_I_SearchWrap				= "Search Wrap";
+const char* const prf_I_ShowBeIdeMenu			= "ide menu";
+const char* const prf_I_ShowGlossary			= "showglossary";
 const char* const prf_I_ShowHtmlPalette			= "show htmlpalette";
+const char* const prf_I_ShowIncludes			= "includes";
 const char* const prf_I_ShowInvisibles			= "show invisibles";
+const char* const prf_I_ShowPaletteForHtml		= "show htmlpalette for html";
+const char* const prf_I_ShowPrototypes			= "protos";
 const char* const prf_I_ShowTabs				= "show tabs";
-const char* const prf_I_ShowGlossary			= "showglossary";
 const char* const prf_I_SingleClickGlossary		= "singleclickglossary";
 const char* const prf_I_SkipHtmlExt				= "skiphtmlext";
 const char* const prf_I_SkipTmpFiles			= "skiptmp";
 const char* const prf_I_SmartBraces				= "smart braces";
+const char* const prf_I_SmartWorkspaces			= "window to workspace";
 const char* const prf_I_SoftWrap				= "softwrap";
 const char* const prf_I_SortGroup				= "sortgroup";
 const char* const prf_I_SortPopup				= "sortpopup";
@@ -118,15 +119,14 @@
 const char* const prf_I_SyntaxColoring			= "syntax coloring";
 const char* const prf_I_ShowTypes				= "types";
 const char* const prf_I_VerifyOpenFiles			= "verify";
-const char* const prf_I_SmartWorkspaces			= "window to workspace";
 const char* const prf_I_Worksheet				= "worksheet";
 const char* const prf_I_WrapCol					= "wrapcol";
 const char* const prf_I_WrapType				= "wraptype";
 const char* const prf_I_ZoomOpenPanel			= "zoomopen";
 
+const char* const prf_R_DefaultDocumentRect		= "default document rect";
 const char* const prf_R_GlossaryPosition		= "GlossaryPosition";
 const char* const prf_R_HtmlPalettePos			= "HTMLPalettePos";
-const char* const prf_R_DefaultDocumentRect		= "default document rect";
 
 const char* const prf_S_AltFontFamily			= "alt font family";
 const char* const prf_S_AltFontStyle			= "alt font style";



