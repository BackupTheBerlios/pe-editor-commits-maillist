From bonefish at mail.berlios.de  Sun Jun 14 15:25:36 2009
From: bonefish at mail.berlios.de (bonefish at BerliOS)
Date: Sun, 14 Jun 2009 15:25:36 +0200
Subject: [pe-commits] r585 - trunk/Extensions
Message-ID: <200906141325.n5EDPaJi001428@sheep.berlios.de>

Author: bonefish
Date: 2009-06-14 15:25:36 +0200 (Sun, 14 Jun 2009)
New Revision: 585
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=585&view=rev

Modified:
   trunk/Extensions/HeaderHeader.cpp
Log:
Fixed Haiku build.


Modified: trunk/Extensions/HeaderHeader.cpp
===================================================================
--- trunk/Extensions/HeaderHeader.cpp	2009-05-08 23:22:32 UTC (rev 584)
+++ trunk/Extensions/HeaderHeader.cpp	2009-06-14 13:25:36 UTC (rev 585)
@@ -217,8 +217,14 @@
 			//MimeRefFilter(BList *mimes);
 	virtual	~MimeRefFilter();
 
+#ifdef __HAIKU__
 	virtual	bool	Filter(const entry_ref *ref, BNode *node, 
+							struct stat_beos *st, const char *filetype);
+#else
+	virtual	bool	Filter(const entry_ref *ref, BNode *node, 
 							struct stat *st, const char *filetype);
+#endif
+
 	private:
 		BList	*fMimes;
 };
@@ -253,8 +259,13 @@
 
 
 bool
+#ifdef __HAIKU__
 MimeRefFilter::Filter(const entry_ref *ref, BNode *node, 
+					struct stat_beos *st, const char *filetype)
+#else
+MimeRefFilter::Filter(const entry_ref *ref, BNode *node, 
 					struct stat *st, const char *filetype)
+#endif
 {
 	int i;
 	// allow folders else it's quite hard to navigate :)



From axeld at mail.berlios.de  Thu Jun 18 14:48:36 2009
From: axeld at mail.berlios.de (axeld at mail.berlios.de)
Date: Thu, 18 Jun 2009 14:48:36 +0200
Subject: [pe-commits] r586 - trunk/Sources
Message-ID: <200906181248.n5ICmaoV012223@sheep.berlios.de>

Author: axeld
Date: 2009-06-18 14:48:34 +0200 (Thu, 18 Jun 2009)
New Revision: 586
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=586&view=rev

Modified:
   trunk/Sources/PAbout.cpp
   trunk/Sources/PAbout.h
Log:
* Made window size depend on its contents, ie. it will now be large enough no
  matter the font (size).
* Made animation smoother, the fNextFrame wasn't computed correctly.
* Now shows "Haiku Rules!" instead of "BeOS Rules!" when built under Haiku.
* Removed x86 vs. PPC in the header - if you're using a computer, you should
  know anyway (or not care).
* Cleanup, ordered methods like they are defined in the class.


Modified: trunk/Sources/PAbout.cpp
===================================================================
--- trunk/Sources/PAbout.cpp	2009-06-14 13:25:36 UTC (rev 585)
+++ trunk/Sources/PAbout.cpp	2009-06-18 12:48:34 UTC (rev 586)
@@ -1,8 +1,8 @@
 /*	$Id$
-	
+
 	Copyright 1996, 1997, 1998, 2002
 	        Hekkelman Programmatuur B.V.  All rights reserved.
-	
+
 	Redistribution and use in source and binary forms, with or without
 	modification, are permitted provided that the following conditions are met:
 	1. Redistributions of source code must retain the above copyright notice,
@@ -12,13 +12,13 @@
 	   and/or other materials provided with the distribution.
 	3. All advertising materials mentioning features or use of this software
 	   must display the following acknowledgement:
-	   
+
 	    This product includes software developed by Hekkelman Programmatuur B.V.
-	
+
 	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
 	   promote products derived from this software without specific prior
 	   written permission.
-	
+
 	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
@@ -28,7 +28,7 @@
 	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 	Created: 09/15/97 23:11:37
 */
@@ -43,13 +43,8 @@
 #	include "PApp.h"
 #endif
 
-const char
-	kAboutText[] =
-#if __INTEL__
-		"Pe 2.4.2 (x86) Open Source Version\n\n"
-#else
-		"Pe 2.4.2 (PPC) Open Source Version\n\n"
-#endif
+const char kAboutText[] =
+		"Pe 2.4.2 Open Source Version\n\n"
 		"a high performance editor\n"
 		"created by Maarten Hekkelman.\n"
 		"Hekkelman Programmatuur B.V.\n"
@@ -83,8 +78,11 @@
 		"Stephan A?mus\n\n\n"
 		"...and thanks to everyone we forgot, too!\n\n";
 
-const char
-	kAboutText2[] = "BeOS Rules!";
+#ifdef __HAIKU__
+const char kAboutText2[] = "Haiku Rules!";
+#else
+const char kAboutText2[] = "BeOS Rules!";
+#endif
 
 #if STANDALONE
 const rgb_color
@@ -92,16 +90,11 @@
 	gCommentColor = { 255, 0, 0, 0 };
 #endif
 
-const long
-	kWindowWidth = 250,
-	kWindowHeight = 200,
-	kPEOffsetH = 95,
-	kPEOffsetV = 60,
-	kAboutTextWidth = kWindowWidth - 20,
-	kAboutTextHeight = 100;
+const long kPEOffsetH = 95;
+const long kPEOffsetV = 60;
+const long kAboutTextHeight = 100;
 
-const bigtime_t
-	kDelay = 60000;
+const bigtime_t kDelay = 20000;
 
 const unsigned long msg_Animate = 'anim';
 
@@ -110,139 +103,73 @@
 #if STANDALONE
 	return "now";
 #else
-	static const char *now = (char *)HResources::GetResource(rtyp_Time, rid_Time_Compiled);
+	static const char *now = (char *)HResources::GetResource(rtyp_Time,
+		rid_Time_Compiled);
 	return now;
 #endif
 } /* Now */
 
-static BRect AboutRect()
-{
-	BScreen s;
-	BRect f = s.Frame(), r;
-	
-	r.left = (f.Width() - kWindowWidth) / 2;
-	r.top = (f.Height() - kWindowHeight) / 2;
-	
-	r.right = r.left + kWindowWidth;
-	r.bottom = r.top + kWindowHeight;
+// #pragma mark - PAboutBox
 
-	return r;
-} /* AboutRect */
-
-void PAboutBox::DetermineBounds(const char *txt, BRect &r)
+PAboutBox::PAboutBox()
+	: BWindow(BRect(100, 100, 200, 200), "aboutbox", B_BORDERED_WINDOW, 0)
 {
-	font_height fh;
-	be_plain_font->GetHeight(&fh);
-	float lh = ceil(fh.ascent + fh.descent + fh.leading);
-	
-	int lc = 0;
+	fAboutText = (char *)malloc(strlen(kAboutText) + strlen(Now()) + 1);
+#if STANDALONE
+#else
+	FailNil(fAboutText);
+#endif
+	sprintf(fAboutText, kAboutText, Now());
 
-	do
-	{
-		if (*txt++ == '\n') lc++;
-	}
-	while (*txt);
-	
-	r.top = r.left = 0;
-	r.right = kAboutTextWidth;
-	r.bottom = lh * lc + 2 * kAboutTextHeight;
-} /* PAboutBox::DetermineBounds */
+	BRect textRect;
+	DetermineBounds(textRect);
+	ResizeAndCenter(textRect);
 
-void PAboutBox::DrawText(const char *txt, BView *vw)
-{
-	vw->FillRect(vw->Bounds(), B_SOLID_LOW);
-	vw->SetFont(be_plain_font);
+	// Setup off-screen bitmap
 
-	font_height fh;
-	be_plain_font->GetHeight(&fh);
-	float lh = ceil(fh.ascent + fh.descent + fh.leading);
+	fOffscreen = new BBitmap(Bounds(), B_RGB_32_BIT, true);
 
-	const char *lp, *ep;
-	float l = kAboutTextHeight + fh.ascent + fh.leading, w;
-	
-	lp = txt;
-	
-	while (*lp)
-	{
-		ep = strchr(lp, '\n');
-
-		if (ep == NULL)
-			break;
-		else if (ep == lp)
-			; // empty line
-		else if (strncmp(lp, "-", ep - lp) == 0)
-		{
-			vw->MovePenTo(0, l - lh / 2);
-			vw->StrokeLine(BPoint(kAboutTextWidth, l - lh / 2));
-		}
-//		else if (strncmp(lp, "--date--", ep - lp) == 0)
-//		{
-//			w = be_plain_font->StringWidth(__DATE__);
-//			vw->MovePenTo((kAboutTextWidth - w) / 2, l);
-//			vw->DrawString(__DATE__);
-//		}
-		else
-		{
-			w = be_plain_font->StringWidth(lp, ep - lp);
-			vw->MovePenTo((kAboutTextWidth - w) / 2, l);
-			vw->DrawString(lp, ep - lp);
-		}
-		
-		l += lh;
-		lp = ep + 1;
-	}
-} /* PAboutBox::DrawText */
-
-PAboutBox::PAboutBox()
-	: BWindow(AboutRect(), "aboutbox", B_BORDERED_WINDOW, 0)
-{
-	fOffscreen = new BBitmap(Bounds(), B_RGB_32_BIT, true);
-	
-	fAboutText = (char *)malloc(strlen(kAboutText) + strlen(Now()) + 1);
-	FailNil(fAboutText);
-	sprintf(fAboutText, kAboutText, Now());
-	
 	fPFont.SetFamilyAndStyle("Baskerville", "Roman");
 	fPFont.SetSize(60);
 	fPFont.SetSpacing(B_CHAR_SPACING);
 	fEFont = fPFont;
-	
+
 	fPFont.SetShear(45);
 
 	if (fOffscreen->Lock())
 	{
-		fOffscreen->AddChild(fOffView = new BView(Bounds(), "view", 0, B_WILL_DRAW));
+		fOffscreen->AddChild(fOffView = new BView(Bounds(), "view", 0,
+			B_WILL_DRAW));
 		fOffView->SetFont(&fPFont);
 		fOffscreen->Unlock();
 	}
 
-	BRect r;
-	DetermineBounds(fAboutText, r);
+	// Render text into another off-screen bitmap
 
-	fOffText = new BBitmap(r, B_RGB_32_BIT, true);
-	BView *tv;
-	fOffText->AddChild(tv = new BView(r, "text", 0, B_WILL_DRAW));
-	
+	fOffText = new BBitmap(textRect, B_RGB_32_BIT, true);
+	BView *textView = new BView(textRect, "text", 0, B_WILL_DRAW);
+	fOffText->AddChild(textView);
+
 	if (fOffText->Lock())
 	{
-		DrawText(fAboutText, tv);
-		tv->Sync();
+		DrawText(fAboutText, textView);
+		textView->Sync();
 		fOffText->Unlock();
 	}
 
 	AddChild(fView = new PAboutView(Bounds(), fOffscreen, fOffText));
 
-	fTextViewD.Set(10, 100, 10 + kAboutTextWidth, kWindowHeight);
+	fTextViewD.Set(10, 100, 10 + textRect.Width(), Bounds().Height());
 	fTextViewS = fTextViewD;
 	fTextViewS.OffsetTo(0, 0);
-	
+
 	fState1 = 0;
 	fState2 = 0;
 	fVelocity = 10;
 	fNextFrame = 0;
-	
+
 	this->PostMessage(msg_Animate);
-	
+
 	Show();
 } /* PAboutBox::PAboutBox */
 
@@ -252,7 +179,7 @@
 	free(fAboutText);
 
 	delete fOffText;
-	
+
 #if STANDALONE
 	be_app->PostMessage(B_QUIT_REQUESTED);
 #endif
@@ -272,9 +199,13 @@
 
 	bigtime_t now = system_time();
 	if (fNextFrame > now)
+	{
 		snooze(fNextFrame - now);
-	fNextFrame = now + kDelay;
-	
+		fNextFrame += kDelay;
+	}
+	else
+		fNextFrame = now + kDelay;
+
 	if (fOffscreen->Lock())
 	{
 		fOffView->FillRect(b, B_SOLID_LOW);
@@ -282,26 +213,26 @@
 
 		int i;
 		uchar wipe[8] = { 0xEE, 0xCC, 0xAA, 0x88, 0x66, 0x44, 0x22, 0x00 };
-		
+
 		fOffView->SetDrawingMode(B_OP_ADD);
-		
+
 		for (i = 0; i < 7; i++)
 		{
 			fOffView->SetHighColor(wipe[i], wipe[i], wipe[i]);
-			
+
 			BPoint pl = fTextViewD.LeftTop(), pr = fTextViewD.RightTop();
 			pl.y += i; pr.y += i;
-			
+
 			fOffView->StrokeLine(pl, pr);
-			
+
 			pl = fTextViewD.LeftBottom(), pr = fTextViewD.RightBottom();
 			pl.y -= i; pr.y -= i;
-			
+
 			fOffView->StrokeLine(pl, pr);
 		}
-		
+
 		fOffView->SetDrawingMode(B_OP_COPY);
-		
+
 		if ((++fTextStep % 2) == 0)
 		{
 			fTextViewS.OffsetBy(0, 1);
@@ -310,7 +241,7 @@
 				fTextViewS.OffsetTo(0, 0);
 			}
 		}
-		
+
 		switch (fState1)
 		{
 			case 0:
@@ -318,15 +249,15 @@
 //				fOffView->FillRect(b, B_SOLID_LOW);
 //				fOffView->SetHighColor(gColor[kColorKeyword1]);
 				fOffView->SetHighColor(0x39, 0x74, 0x79, 255);
-				
+
 				BPoint p;
 				p.y = kPEOffsetV;
 				p.x = b.left + fState2;
-				
+
 				fState2 += (fVelocity *= 0.95);
-		
+
 				fOffView->DrawString("P", p);
-				
+
 				if (fState2 >= kPEOffsetH)
 				{
 					fState1++;
@@ -335,7 +266,7 @@
 				}
 				break;
 			}
-			
+
 			case 1:
 			{
 //				fOffView->FillRect(b, B_SOLID_LOW);
@@ -346,9 +277,9 @@
 
 				fPFont.SetShear(fState2);
 				fOffView->SetFont(&fPFont);
-				
+
 				fOffView->DrawString("P", p);
-				
+
 				if (fState2 <= 90)
 					fState2 += (fVelocity *= 1.05);
 				else if (fState2 < 135)
@@ -357,21 +288,21 @@
 					fState1++;
 				break;
 			}
-			
+
 			case 2:
 			{
 //				fOffView->FillRect(b, B_SOLID_LOW);
 				fOffView->SetHighColor(0x39, 0x74, 0x79, 255);
-		
+
 				BPoint p;
 				p.y = kPEOffsetV;
 				p.x = b.left + kPEOffsetH;
 
 				fPFont.SetShear(fState2);
 				fOffView->SetFont(&fPFont);
-				
+
 				fOffView->DrawString("P", p);
-				
+
 				if (fState2 > 90)
 					fState2 -= (fVelocity *= 0.95);
 				else
@@ -380,33 +311,33 @@
 					fState1++;
 					fState2 = b.right;
 					fPStop = kPEOffsetH + fPFont.StringWidth("P");
-					fVelocity = 10;
+					fVelocity = fState2 / 25;
 				}
 				break;
 			}
-			
+
 			case 3:
 			{
 //				fOffView->FillRect(b, B_SOLID_LOW);
 				fOffView->SetHighColor(0x39, 0x74, 0x79, 255);
-		
+
 				BPoint p;
 				p.y = kPEOffsetV;
 				p.x = b.left + kPEOffsetH;
 
 				fOffView->SetFont(&fPFont);
 				fOffView->DrawString("P", p);
-				
+
 				p.x = fState2;
-				
+
 				fState2 -= (fVelocity *= 0.95);
-				
+
 				fOffView->SetHighColor(0xa1, 0x64, 0x0e, 255);
 				fEFont.SetShear(90);
 				fOffView->SetFont(&fEFont);
-				
+
 				fOffView->DrawString("e", p);
-				
+
 				if (fState2 <= fPStop)
 				{
 					fState1 += 2;
@@ -416,73 +347,73 @@
 				}
 				break;
 			}
-			
+
 			case 4:
 			{
 //				fOffView->FillRect(b, B_SOLID_LOW);
 				fOffView->SetHighColor(0x39, 0x74, 0x79, 255);
-		
+
 				BPoint p;
 				p.y = kPEOffsetV;
 				p.x = b.left + kPEOffsetH;
 
 				fOffView->SetFont(&fPFont);
 				fOffView->DrawString("P", p);
-				
+
 				p.x = fPStop;
-				
+
 				fOffView->SetHighColor(0xa1, 0x64, 0x0e, 255);
 				fEFont.SetShear(fState2);
 				fOffView->SetFont(&fEFont);
-				
+
 				fOffView->DrawString("e", p);
-				
+
 				if (fState2 > 90)
 					fState2 -= (fVelocity *= 1.05);
 				else
 					fState1++;
 				break;
 			}
-			
+
 			case 5:
 			{
 //				fOffView->FillRect(b, B_SOLID_LOW);
 				fOffView->SetHighColor(0x39, 0x74, 0x79, 255);
-		
+
 				BPoint p;
 				p.y = kPEOffsetV;
 				p.x = b.left + kPEOffsetH;
 
 				fPFont.SetShear(fState2);
 				fOffView->SetFont(&fPFont);
-				
+
 				fOffView->DrawString("P", p);
 				fOffView->SetHighColor(0xa1, 0x64, 0x0e, 255);
 				fOffView->DrawString("e");
-				
+
 				if (fState2 <= 45)
 					fState1++;
 				else
 					fState2 -= (fVelocity *= 0.95);
 				break;
 			}
-			
+
 			case 6:
 			{
 //				fOffView->FillRect(b, B_SOLID_LOW);
 				fOffView->SetHighColor(0x39, 0x74, 0x79, 255);
-		
+
 				BPoint p;
 				p.y = kPEOffsetV;
 				p.x = b.left + kPEOffsetH;
 
 				fPFont.SetShear(fState2);
 				fOffView->SetFont(&fPFont);
-				
+
 				fOffView->DrawString("P", p);
 				fOffView->SetHighColor(0xa1, 0x64, 0x0e, 255);
 				fOffView->DrawString("e");
-				
+
 				if (fState2 < 90)
 					fState2 += (fVelocity *= 0.95);
 				else
@@ -494,29 +425,29 @@
 //				}
 //				break;
 //			}
-//			
+//
 //			case 7:
 //			{
 ////				fOffView->FillRect(b, B_SOLID_LOW);
-//		
+//
 //				BPoint p;
 //				p.y = kPEOffsetV;
 //				p.x = b.left + kPEOffsetH;
 //
 //				fOffView->SetFont(&fPFont);
-//				
+//
 //				fOffView->SetHighColor(0x39, 0x74, 0x79, 255);
 //				fOffView->DrawString("P", p);
 //				fOffView->SetHighColor(0xa1, 0x64, 0x0e, 255);
 //				fOffView->DrawString("e");
-//				
+//
 //				p.y = b.bottom - 4;
 //				p.x = fState2;
-//				
+//
 //				fOffView->SetFont(be_plain_font);
 //				fOffView->SetHighColor(0, 0, 0);
 //				fOffView->DrawString(fAboutText, p);
-//				
+//
 //				if (--fState2 < fPStop)
 //				{
 					fState1++;
@@ -527,14 +458,14 @@
 //					fState2 = b.right;
 				break;
 			}
-			
+
 			case 8:
 			{
 //				fOffView->FillRect(b, B_SOLID_LOW);
-		
+
 //				fPFont.SetRotation(fVelocity * 10);
 //				fEFont.SetRotation(360 - fVelocity * 10);
-				
+
 				BPoint p;
 				p.y = kPEOffsetV;
 				p.x = b.left + kPEOffsetH;
@@ -549,7 +480,7 @@
 
 				fOffView->SetHighColor(0xa1, 0x64, 0x0e, 255);
 				fOffView->DrawString("e", p);
-				
+
 				fState2 += (fVelocity *= 1.05);
 				if (fState2 > b.bottom + 30)
 				{
@@ -559,15 +490,15 @@
 				}
 				break;
 			}
-			
+
 			case 9:
 			{
 //				fOffView->FillRect(b, B_SOLID_LOW);
-		
+
 				BPoint p;
 				p.y = fState2;
 				p.x = b.left + kPEOffsetH;
-				
+
 				fOffView->SetFont(&fPFont);
 				fOffView->SetHighColor(0x39, 0x74, 0x79, 255);
 				fOffView->DrawString("P", p);
@@ -578,23 +509,28 @@
 					fState1++;
 					fState2 = 0;
 					fVelocity = 1;
-					
+
 					fPFont.SetSize(32);
 					fOffView->SetFont(&fPFont);
-					
-					fPStop = b.left + (b.Width() - fPFont.StringWidth(kAboutText2)) / 2;
+
+					fPStop = b.left + (b.Width()
+						- fPFont.StringWidth(kAboutText2)) / 2;
 				}
 				break;
 			}
-			
+
 			case 10:
 			{
 //				fOffView->FillRect(b, B_SOLID_LOW);
-				
+
 				BPoint p;
 				p.y = fState2;
 				p.x = fPStop;
-				
+
+#ifdef __HAIKU__
+				fOffView->SetHighColor(0x85, 0x19, 0x19, 255);
+				fOffView->DrawString(kAboutText2, p);
+#else
 				fOffView->SetHighColor(0, 0, 80);
 				fOffView->DrawString("B", p);
 				fOffView->SetHighColor(178, 0, 0);
@@ -603,9 +539,10 @@
 				fOffView->DrawString("OS ");
 				fOffView->SetHighColor(0x85, 0x19, 0x19, 255);
 				fOffView->DrawString(kAboutText2 + 5);
-				
+#endif
+
 				fState2 += (fVelocity *= 1.04);
-				
+
 				if (fState2 > kPEOffsetV)
 				{
 					fState1++;
@@ -613,13 +550,17 @@
 				}
 				break;
 			}
-			
+
 			case 11:
 			{
 				BPoint p;
 				p.y = kPEOffsetV;
 				p.x = fPStop;
-				
+
+#ifdef __HAIKU__
+				fOffView->SetHighColor(0x85, 0x19, 0x19, 255);
+				fOffView->DrawString(kAboutText2, p);
+#else
 				fOffView->SetHighColor(0, 0, 80);
 				fOffView->DrawString("B", p);
 				fOffView->SetHighColor(178, 0, 0);
@@ -628,6 +569,7 @@
 				fOffView->DrawString("OS ");
 				fOffView->SetHighColor(0x85, 0x19, 0x19, 255);
 				fOffView->DrawString(kAboutText2 + 5);
+#endif
 
 				if (++fState2 > 100)
 				{
@@ -636,30 +578,36 @@
 				}
 				break;
 			}
-			
+
 			case 12:
 			{
 				BPoint p;
 				p.y = kPEOffsetV;
 				p.x = fPStop;
-				
+
 				unsigned int c = (int)fState2 * 10;
-				
+
+#ifndef __HAIKU__
 				fOffView->SetHighColor(c, c, (80 * (25 - fState2) + fState2 * 250) / 25);
 				fOffView->DrawString("B", p);
 				fOffView->SetHighColor((178 * (25 - fState2) + fState2 * 250) / 25 , c, c);
 				fOffView->DrawString("e");
 				fOffView->SetHighColor(c, c, c);
 				fOffView->DrawString("OS ");
-				
+#endif
+
 				rgb_color clr = { 0x85, 0x19, 0x19, 255 };
 				clr.red = (uint8)((clr.red * (25 - fState2) + fState2 * 250) / 25);
 				clr.green = (uint8)((clr.green * (25 - fState2) + fState2 * 250) / 25);
 				clr.blue = (uint8)((clr.blue * (25 - fState2) + fState2 * 250) / 25);
-				
+
 				fOffView->SetHighColor(clr);
+#ifdef __HAIKU__
+				fOffView->DrawString(kAboutText2, p);
+#else
 				fOffView->DrawString(kAboutText2 + 5);
-				
+#endif
+
 				if (++fState2 > 25)
 				{
 					fState1++;
@@ -667,11 +615,11 @@
 				}
 				break;
 			}
-			
+
 			case 13:
 			{
 				fOffView->SetDrawingMode(B_OP_COPY);
-				
+
 				if (++fState2 > 10)
 				{
 					fState1 = 0;
@@ -683,26 +631,112 @@
 				}
 				break;
 			}
-			
+
 			default:
 				return;
 		}
-		
+
 		fOffView->Sync();
 		fOffscreen->Unlock();
 	}
-	
+
 	if (Lock())
 	{
+//b.PrintToStream();
 		fView->Draw(b);
 		Unlock();
 	}
-	
+
 	PostMessage(msg_Animate);
 } /* PAboutBox::Animate */
 
-#pragma mark -> PAboutView <-
+void PAboutBox::ResizeAndCenter(BRect textRect)
+{
+	BScreen screen(this);
+	BRect screenFrame = screen.Frame();
+	int32 width = textRect.IntegerWidth() + 20;
+	int32 height = textRect.IntegerWidth() * 4 / 5;
 
+	MoveTo((screenFrame.Width() - width) / 2,
+		(screenFrame.Height() - height) / 2);
+	ResizeTo(width, height);
+} /* PAboutBox::ResizeAndCenter */
+
+void PAboutBox::DetermineBounds(BRect &textRect)
+{
+	font_height fh;
+	be_plain_font->GetHeight(&fh);
+	float lineHeight = ceilf(fh.ascent + fh.descent + fh.leading);
+
+	const char *text = fAboutText;
+	const char *lastLine = text;
+	float maxWidth = 0;
+	int lineCount = 0;
+
+	do
+	{
+		if (*text++ == '\n') {
+			lineCount++;
+			float lineWidth = be_plain_font->StringWidth(lastLine,
+				text - 1 - lastLine);
+			if (lineWidth > maxWidth)
+				maxWidth = lineWidth;
+
+			lastLine = text;
+		}
+	}
+	while (*text);
+
+	textRect.Set(0, 0, maxWidth, lineHeight * lineCount + 2 * kAboutTextHeight);
+} /* PAboutBox::DetermineBounds */
+
+void PAboutBox::DrawText(const char *txt, BView *view)
+{
+	view->FillRect(view->Bounds(), B_SOLID_LOW);
+	view->SetFont(be_plain_font);
+
+	font_height fh;
+	be_plain_font->GetHeight(&fh);
+	float lh = ceil(fh.ascent + fh.descent + fh.leading);
+
+	const char *lp, *ep;
+	float l = kAboutTextHeight + fh.ascent + fh.leading, w;
+
+	lp = txt;
+
+	while (*lp)
+	{
+		ep = strchr(lp, '\n');
+
+		if (ep == NULL)
+			break;
+		else if (ep == lp)
+			; // empty line
+		else if (strncmp(lp, "-", ep - lp) == 0)
+		{
+			view->MovePenTo(0, l - lh / 2);
+			view->StrokeLine(BPoint(view->Bounds().Width(), l - lh / 2));
+		}
+//		else if (strncmp(lp, "--date--", ep - lp) == 0)
+//		{
+//			w = be_plain_font->StringWidth(__DATE__);
+//			view->MovePenTo((kAboutTextWidth - w) / 2, l);
+//			view->DrawString(__DATE__);
+//		}
+		else
+		{
+			w = be_plain_font->StringWidth(lp, ep - lp);
+			view->MovePenTo((view->Bounds().Width() - w) / 2, l);
+			view->DrawString(lp, ep - lp);
+		}
+
+		l += lh;
+		lp = ep + 1;
+	}
+} /* PAboutBox::DrawText */
+
+// #pragma mark - PAboutView
+
 PAboutView::PAboutView(BRect frame, BBitmap *offscreen, BBitmap *offText)
 	: BView(frame, "about view", 0, B_WILL_DRAW)
 {
@@ -720,6 +754,8 @@
 	Window()->PostMessage(B_QUIT_REQUESTED);
 } /* PAboutView::MouseDown */
 
+// #pragma mark - Standalone part only
+
 #if STANDALONE
 main()
 {

Modified: trunk/Sources/PAbout.h
===================================================================
--- trunk/Sources/PAbout.h	2009-06-14 13:25:36 UTC (rev 585)
+++ trunk/Sources/PAbout.h	2009-06-18 12:48:34 UTC (rev 586)
@@ -1,8 +1,8 @@
 /*	$Id$
-	
+
 	Copyright 1996, 1997, 1998, 2002
 	        Hekkelman Programmatuur B.V.  All rights reserved.
-	
+
 	Redistribution and use in source and binary forms, with or without
 	modification, are permitted provided that the following conditions are met:
 	1. Redistributions of source code must retain the above copyright notice,
@@ -12,13 +12,13 @@
 	   and/or other materials provided with the distribution.
 	3. All advertising materials mentioning features or use of this software
 	   must display the following acknowledgement:
-	   
+
 	    This product includes software developed by Hekkelman Programmatuur B.V.
-	
+
 	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
 	   promote products derived from this software without specific prior
 	   written permission.
-	
+
 	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
@@ -28,7 +28,7 @@
 	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 	Created: 09/15/97 23:11:56
 */
@@ -56,9 +56,10 @@
 			void Animate();
 
 private:
-			void DetermineBounds(const char *txt, BRect& r);
+			void ResizeAndCenter(BRect textRect);
+			void DetermineBounds(BRect& textRect);
 			void DrawText(const char *txt, BView *vw);
-			
+
 			int fState1, fTextStep;
 			BBitmap *fOffscreen, *fOffText;
 			BView *fView, *fOffView;



