From zooey at mail.berlios.de  Sun Nov 12 18:23:14 2006
From: zooey at mail.berlios.de (zooey at BerliOS)
Date: Sun, 12 Nov 2006 18:23:14 +0100
Subject: [pe-commits] r448 - trunk/Sources
Message-ID: <200611121723.kACHNEJa016703@sheep.berlios.de>

Author: zooey
Date: 2006-11-12 18:23:14 +0100 (Sun, 12 Nov 2006)
New Revision: 448
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=448&view=rev

Modified:
   trunk/Sources/CDocIO.cpp
Log:
* applied code kindly supplied by Rainer that changes save-semantics to a double
  write policy (first backup, then original file) in order to fix problems
  related to icon-position of original file in Tracker and to circumvent renaming
  problems in CIFS.


Modified: trunk/Sources/CDocIO.cpp
===================================================================
--- trunk/Sources/CDocIO.cpp	2006-10-16 14:00:37 UTC (rev 447)
+++ trunk/Sources/CDocIO.cpp	2006-11-12 17:23:14 UTC (rev 448)
@@ -87,6 +87,43 @@
 
 static int32 DetermineEncoding(const BString& str)
 {
+	/* HACK: Get the first line and see if there's something like 
+	  "[PE:ENC=<encoding>]" in there. <encoding> is supported encodings
+	  with spaces replaced by "-", eg.: "ISO-8859-15" */
+	int32			pos;
+	BString			line;
+	int32			enc_id = -1;
+	BString			enc_name;
+	CEncodingRoster	enc_roster;
+
+	// Get the first line
+	if ((pos = str.FindFirst('\n')) != B_ERROR ||
+	    (pos = str.FindFirst('\r')) != B_ERROR)
+	{
+		str.CopyInto(line, 0, pos);
+		// Cut down to begin of magic identifier, if there
+		if ((pos = line.IFindFirst("[PE:")) != B_ERROR)
+		{
+			line.Remove(0, pos+4);
+			// Find end of settings and cut the rest off
+			if ((pos = line.FindFirst(']')) != B_ERROR)
+			{
+				line.Remove(pos, line.Length()-pos);
+				// Check supported encodings
+				// (sofar no other settings allowed)
+				while (enc_roster.IsSupportedEncoding(++enc_id))
+				{
+					enc_name = enc_roster.EncodingNameByIdx(enc_id);
+					enc_name.ReplaceAll(' ', '-');
+					enc_name.Prepend("ENC=");
+					if (line.ICompare(enc_name) == 0)
+					{
+						return enc_id;
+					}
+				}
+			}
+		}
+	}
 	return B_UNICODE_UTF8;
 }
 
@@ -100,7 +137,7 @@
 		{
 			attr_info ai;
 			
-			if (strcmp(name, "BEOS:TYPE") == 0)
+			if (strcmp(name, "_trk/_clipping_file_") == 0)
 				continue;
 			
 			FailOSErr(from.GetAttrInfo(name, &ai));
@@ -121,6 +158,47 @@
 	}
 }
 
+static bool CopyFile(BEntry& srcEntry, BEntry& dstEntry)
+{
+	try
+	{
+		char srcName[B_FILE_NAME_LENGTH];
+
+		BFile srcFile;
+		BFile dstFile;
+		BDirectory dir;
+		const int bufSize = 1024;
+		char buf[bufSize];
+		ssize_t bytesRead;
+		time_t created;
+
+		// Create destination file
+		FailOSErr(srcEntry.GetCreationTime(&created));
+		FailOSErr(srcEntry.GetName(srcName));
+		string dstName(srcName);
+		dstName += '~';
+		FailOSErr(srcEntry.GetParent(&dir));
+		FailOSErr(dstEntry.SetTo(&dir, dstName.c_str(), true));
+		FailOSErr(dstFile.SetTo(&dstEntry, B_WRITE_ONLY|B_CREATE_FILE|B_ERASE_FILE));
+
+		// Copy file data, attributes and time
+		FailOSErr(srcFile.SetTo(&srcEntry, B_READ_ONLY));
+		while ((bytesRead = srcFile.Read((void *)buf, bufSize)) > 0)
+		{
+			dstFile.Write(buf, bytesRead);
+		}
+		CopyAttributes(srcFile, dstFile);
+		FailOSErr(dstFile.SetCreationTime(created));
+		FailOSErr(dstFile.Sync());
+	}
+	catch (HErr& e)
+	{
+		e.DoError();
+		return false;
+	}
+	return true;
+}
+
 bool operator< (const node_ref& left, const node_ref& right)
 {
 	if (left.node < right.node)
@@ -343,11 +421,12 @@
 
 	return result;
 }
-	
+
 bool CLocalDocIO::WriteDoc()
 {
 	char name[B_FILE_NAME_LENGTH];
 	BEntry e(fEntryRef, true);
+	BEntry backup;
 	bool existed = e.Exists();
 
 	try
@@ -358,36 +437,27 @@
 		fDoc->GetText(docText);
 		if (!DoPostEditTextConversions(docText))
 			return false;
-	
+
 		FailOSErr(e.GetName(name));
-	
-		time_t created;
-		if (existed)
-		{
-			FailOSErr(e.GetCreationTime(&created));
 
-			string bname(name);
-			bname += '~';
-			FailOSErr(e.Rename(bname.c_str(), true));
+		if (existed) 
+		{	// Create a backup file
+			if (!CopyFile(e, backup))
+				return false;
 		}
 
+		// Write document
 		BFile file;
 		BDirectory dir;
 		FailOSErr(e.GetParent(&dir));
-		FailOSErr(dir.CreateFile(name, &file, true));
+		FailOSErr(dir.CreateFile(name, &file, false));
 		CheckedWrite(file, docText.String(), docText.Length());
-		if (existed)
-		{
-			BFile old;
-			FailOSErr(old.SetTo(&e, B_READ_ONLY));
-			CopyAttributes(old, file);
-			FailOSErr(file.SetCreationTime(created));
-		}
 		fDoc->WriteAttr(file, settingsMsg);
 		file.Sync();
-
+		
+		// Remove backup file
 		if (existed && !gPrefs->GetPrefInt(prf_I_Backup))
-			FailOSErr(e.Remove());
+			FailOSErr(backup.Remove());
 
 		// Update MIME type info
 		e.SetTo(&dir, name);
@@ -408,10 +478,6 @@
 	catch (HErr& err)
 	{
 		err.DoError();
-		// Now don't check error codes anymore... hope this is right
-		BEntry(fDoc->EntryRef(), true).Remove();
-		if (existed)
-			e.Rename(name);
 		return false;
 	}
 	return true;



From zooey at mail.berlios.de  Mon Nov 13 18:12:42 2006
From: zooey at mail.berlios.de (zooey at BerliOS)
Date: Mon, 13 Nov 2006 18:12:42 +0100
Subject: [pe-commits] r449 - trunk/Sources
Message-ID: <200611131712.kADHCgdj019103@sheep.berlios.de>

Author: zooey
Date: 2006-11-13 18:12:42 +0100 (Mon, 13 Nov 2006)
New Revision: 449
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=449&view=rev

Modified:
   trunk/Sources/CDocIO.cpp
Log:
* allow Sync() to fail silently, as it always fails on CIFS


Modified: trunk/Sources/CDocIO.cpp
===================================================================
--- trunk/Sources/CDocIO.cpp	2006-11-12 17:23:14 UTC (rev 448)
+++ trunk/Sources/CDocIO.cpp	2006-11-13 17:12:42 UTC (rev 449)
@@ -189,7 +189,7 @@
 		}
 		CopyAttributes(srcFile, dstFile);
 		FailOSErr(dstFile.SetCreationTime(created));
-		FailOSErr(dstFile.Sync());
+		dstFile.Sync();
 	}
 	catch (HErr& e)
 	{



From hoern at mail.berlios.de  Tue Nov 14 11:27:33 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Tue, 14 Nov 2006 11:27:33 +0100
Subject: [pe-commits] r450 - trunk/Sources
Message-ID: <200611141027.kAEARX47023796@sheep.berlios.de>

Author: hoern
Date: 2006-11-14 11:27:33 +0100 (Tue, 14 Nov 2006)
New Revision: 450
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=450&view=rev

Modified:
   trunk/Sources/PDoc.cpp
Log:
List of open windows is now sorted alphabetically.

Modified: trunk/Sources/PDoc.cpp
===================================================================
--- trunk/Sources/PDoc.cpp	2006-11-13 17:12:42 UTC (rev 449)
+++ trunk/Sources/PDoc.cpp	2006-11-14 10:27:33 UTC (rev 450)
@@ -1512,7 +1512,8 @@
 	UpdateShortCuts();
 
 	doclist::iterator di;
-	
+
+	int32 firstIndex = fWindows->CountItems();
 	for (di = sfDocList.begin(); di != sfDocList.end(); di++)
 	{
 		PDoc *doc = dynamic_cast<PDoc*>(*di);
@@ -1525,8 +1526,15 @@
 			continue;
 		BMessage *msg = new BMessage(msg_SelectWindow);
 		msg->AddPointer("window", w);
+		// Sort alphabetically; TODO: utf-8 compare?!
+		int32 insertId = firstIndex-1;
+		while (++insertId<fWindows->CountItems() && 
+			   strcmp(fWindows->ItemAt(insertId)->Label(), w->Title()) < 0)
+		{
+		}
+		// Finally insert
 		fWindows->AddItem(new BMenuItem(w->Title(), msg,
-			(doc && doc->fShortcut < 10) ? '0' + doc->fShortcut : 0));
+			(doc && doc->fShortcut < 10) ? '0' + doc->fShortcut : 0), insertId);
 	}
 	
 	i = fRecent->CountItems() - 1;



From hoern at mail.berlios.de  Tue Nov 14 14:55:58 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Tue, 14 Nov 2006 14:55:58 +0100
Subject: [pe-commits] r451 - trunk/Sources
Message-ID: <200611141355.kAEDtw9P020257@sheep.berlios.de>

Author: hoern
Date: 2006-11-14 14:55:58 +0100 (Tue, 14 Nov 2006)
New Revision: 451
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=451&view=rev

Modified:
   trunk/Sources/CDoc.cpp
   trunk/Sources/PDoc.cpp
Log:
"Save" menuitem is only enabled when file is dirty or new
Document is only saved when dirty or new (for "Save All" case)


Modified: trunk/Sources/CDoc.cpp
===================================================================
--- trunk/Sources/CDoc.cpp	2006-11-14 10:27:33 UTC (rev 450)
+++ trunk/Sources/CDoc.cpp	2006-11-14 13:55:58 UTC (rev 451)
@@ -138,17 +138,20 @@
 		if (!fDocIO)
 			THROW(("No file available"));
 		// Only save directly if the file is writable and if we already
-		// have a place (entry) for the file:
+		// have a place (entry) for the file
 		if (!fReadOnly && (!fDocIO->IsLocal() || EntryRef()))
 		{
-			StopWatchingFile();
-			if (fDocIO->WriteDoc())
-				SetDirty(false);
-			StartWatchingFile();
+			if (IsDirty())
+			{
+				StopWatchingFile();
+				if (fDocIO->WriteDoc())
+					SetDirty(false);
+				StartWatchingFile();
+			}
 		}
 		else
 		{
-			// ask user where to save to:
+			// Ask user where to save to
 			SaveAs();
 		}
 	}

Modified: trunk/Sources/PDoc.cpp
===================================================================
--- trunk/Sources/PDoc.cpp	2006-11-14 10:27:33 UTC (rev 450)
+++ trunk/Sources/PDoc.cpp	2006-11-14 13:55:58 UTC (rev 451)
@@ -1536,6 +1536,12 @@
 		fWindows->AddItem(new BMenuItem(w->Title(), msg,
 			(doc && doc->fShortcut < 10) ? '0' + doc->fShortcut : 0), insertId);
 	}
+
+	// Disable "Save" menuitem on non-dirty/new files
+	BMenuItem* saveItem = fMBar->FindItem(msg_Save);
+	if (saveItem)
+		saveItem->SetEnabled(fText->IsDirty() || !EntryRef());
+
 	
 	i = fRecent->CountItems() - 1;
 	while (i >= 0)



From hoern at mail.berlios.de  Tue Nov 14 16:07:41 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Tue, 14 Nov 2006 16:07:41 +0100
Subject: [pe-commits] r452 - trunk/Sources
Message-ID: <200611141507.kAEF7f8T029380@sheep.berlios.de>

Author: hoern
Date: 2006-11-14 16:07:41 +0100 (Tue, 14 Nov 2006)
New Revision: 452
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=452&view=rev

Modified:
   trunk/Sources/PDoc.cpp
Log:
* "Save all" now also is disabled when there's nothing to save
* "Save all" now displays the number of files to save
* Some code cleanup and some comments added


Modified: trunk/Sources/PDoc.cpp
===================================================================
--- trunk/Sources/PDoc.cpp	2006-11-14 13:55:58 UTC (rev 451)
+++ trunk/Sources/PDoc.cpp	2006-11-14 15:07:41 UTC (rev 452)
@@ -1499,60 +1499,67 @@
 
 void PDoc::MenusBeginning()
 {
-	int i;
+	int32 i;
+	int32 unsavedDocs = 0;
+	BMenuItem* mitem;
 
+	// First call, remember number of entries without OpenWindows
 	if (fWindowMenuLength == -1)
 		fWindowMenuLength = fWindows->CountItems();
+	// Otherwise remove OpenWindows entries
 	else
-		for (i = fWindows->CountItems() - 1; i >= fWindowMenuLength; i--)
+		for (int32 i = fWindows->CountItems() - 1; i >= fWindowMenuLength; i--)
 		{
 			delete fWindows->RemoveItem(i);
 		}
-
 	UpdateShortCuts();
 
+	// Add OpenWindows entries
 	doclist::iterator di;
-
-	int32 firstIndex = fWindows->CountItems();
 	for (di = sfDocList.begin(); di != sfDocList.end(); di++)
 	{
 		PDoc *doc = dynamic_cast<PDoc*>(*di);
+		BWindow *w = dynamic_cast<BWindow*>(*di);
 
-		if (doc && doc->IsWorksheet())
+		if ((doc && doc->IsWorksheet()) || !w)
 			continue;
-
-		BWindow *w = dynamic_cast<BWindow*>(*di);
-		if (!w)
-			continue;
+		// Count files to be saved
+		if (doc->IsDirty() || !doc->EntryRef())
+			unsavedDocs++;
 		BMessage *msg = new BMessage(msg_SelectWindow);
 		msg->AddPointer("window", w);
 		// Sort alphabetically; TODO: utf-8 compare?!
-		int32 insertId = firstIndex-1;
+		int32 insertId = fWindowMenuLength-1;
 		while (++insertId<fWindows->CountItems() && 
-			   strcmp(fWindows->ItemAt(insertId)->Label(), w->Title()) < 0)
-		{
-		}
+			   strcmp(fWindows->ItemAt(insertId)->Label(), w->Title()) < 0) ;
 		// Finally insert
 		fWindows->AddItem(new BMenuItem(w->Title(), msg,
 			(doc && doc->fShortcut < 10) ? '0' + doc->fShortcut : 0), insertId);
 	}
 
 	// Disable "Save" menuitem on non-dirty/new files
-	BMenuItem* saveItem = fMBar->FindItem(msg_Save);
-	if (saveItem)
-		saveItem->SetEnabled(fText->IsDirty() || !EntryRef());
+	if ((mitem = fMBar->FindItem(msg_Save)))
+		mitem->SetEnabled(fText->IsDirty() || !EntryRef());
 
-	
+	// Disable "SaveAll" menuitem on non-dirty/new files
+	if ((mitem = fMBar->FindItem(msg_SaveAll)))
+	{
+		BString str = mitem->Label();
+		if ((i = str.FindLast("  (")) > 0)
+		{
+			str.Remove(i, str.Length()-i);
+		}
+		if (unsavedDocs > 0)
+			str << "  (" << unsavedDocs << ")";
+		mitem->SetLabel(str.String());
+		mitem->SetEnabled(unsavedDocs > 0);
+	}
+
+	// List of recent Documents
 	i = fRecent->CountItems() - 1;
 	while (i >= 0)
 		delete fRecent->RemoveItem(i--);
 
-	float w;
-
-	{
-		w = BScreen().Frame().Width() / 3;
-	}
-
 	int cnt = sfTenLastDocs.size();
 	char **p = (char **)malloc(cnt * sizeof(char *));	
 	const char **s = (const char **)malloc(cnt * sizeof(char *));	
@@ -1563,6 +1570,7 @@
 		p[i] = (char *)malloc(strlen(s[i]) + 4);
 	}
 
+	float w = BScreen().Frame().Width() / 3;
 	be_bold_font->GetTruncatedStrings(s, cnt, B_TRUNCATE_SMART, w, p);
 	
 	for (i = 0; i < cnt; i++)



From hoern at mail.berlios.de  Sun Nov 19 03:22:03 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Sun, 19 Nov 2006 03:22:03 +0100
Subject: [pe-commits] r453 - trunk/Languages/Sources
Message-ID: <200611190222.kAJ2M3Kx023027@sheep.berlios.de>

Author: hoern
Date: 2006-11-19 03:22:01 +0100 (Sun, 19 Nov 2006)
New Revision: 453
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=453&view=rev

Added:
   trunk/Languages/Sources/Antlr_Language.cpp
   trunk/Languages/Sources/Antlr_Popup.cpp
   trunk/Languages/Sources/Asm_Language.cpp
   trunk/Languages/Sources/Cpp_Language.cpp
   trunk/Languages/Sources/Cpp_Popup.cpp
   trunk/Languages/Sources/D_Language.cpp
   trunk/Languages/Sources/D_Popup.cpp
   trunk/Languages/Sources/Diff_Language.cpp
   trunk/Languages/Sources/HtmlJs_Language.cpp
   trunk/Languages/Sources/HtmlJs_Popup.cpp
   trunk/Languages/Sources/Html_Language.cpp
   trunk/Languages/Sources/Html_Popup.cpp
   trunk/Languages/Sources/Jam_Language.cpp
   trunk/Languages/Sources/Java_Language.cpp
   trunk/Languages/Sources/Java_Popup.l
   trunk/Languages/Sources/LanguageIncludes.h
   trunk/Languages/Sources/Lout_Language.cpp
   trunk/Languages/Sources/Lout_Popup.l
   trunk/Languages/Sources/Lua_Language.cpp
   trunk/Languages/Sources/Lua_Popup.cpp
   trunk/Languages/Sources/Mathematica_Language.cpp
   trunk/Languages/Sources/Mathematica_Popup.l
   trunk/Languages/Sources/Oberon_Language.cpp
   trunk/Languages/Sources/Oberon_Popup.l
   trunk/Languages/Sources/Pascal_Language.cpp
   trunk/Languages/Sources/Pascal_Popup.cpp
   trunk/Languages/Sources/Perl_Language.cpp
   trunk/Languages/Sources/Perl_Popup.l
   trunk/Languages/Sources/Python_Language.cpp
   trunk/Languages/Sources/Python_Popup.l
   trunk/Languages/Sources/Rez_Language.cpp
   trunk/Languages/Sources/Rez_Popup.l
   trunk/Languages/Sources/Shell_Language.cpp
   trunk/Languages/Sources/Sql_Language.cpp
   trunk/Languages/Sources/Tex_Language.cpp
   trunk/Languages/Sources/Tex_Popup.l
Removed:
   trunk/Languages/Sources/CDPopup.cpp
   trunk/Languages/Sources/CLangIncl.h
   trunk/Languages/Sources/CLang_antlr.cpp
   trunk/Languages/Sources/CLang_asm.cpp
   trunk/Languages/Sources/CLang_cpp.cpp
   trunk/Languages/Sources/CLang_d.cpp
   trunk/Languages/Sources/CLang_diff.cpp
   trunk/Languages/Sources/CLang_html.cpp
   trunk/Languages/Sources/CLang_html_2.cpp
   trunk/Languages/Sources/CLang_jam.cpp
   trunk/Languages/Sources/CLang_java.cpp
   trunk/Languages/Sources/CLang_lout.cpp
   trunk/Languages/Sources/CLang_lua.cpp
   trunk/Languages/Sources/CLang_m.cpp
   trunk/Languages/Sources/CLang_ob2.cpp
   trunk/Languages/Sources/CLang_pas.cpp
   trunk/Languages/Sources/CLang_perl.cpp
   trunk/Languages/Sources/CLang_python.cpp
   trunk/Languages/Sources/CLang_rez.cpp
   trunk/Languages/Sources/CLang_shell.cpp
   trunk/Languages/Sources/CLang_sql.cpp
   trunk/Languages/Sources/CLang_tex.cpp
   trunk/Languages/Sources/CLoutFuncPopup.l
   trunk/Languages/Sources/CantlrPopup.cpp
   trunk/Languages/Sources/CcppPopup.cpp
   trunk/Languages/Sources/ChtmlPopup.cpp
   trunk/Languages/Sources/CjavaFuncPopup.l
   trunk/Languages/Sources/CluaPopup.cpp
   trunk/Languages/Sources/CmFuncPopup.l
   trunk/Languages/Sources/Cob2FuncPopup.l
   trunk/Languages/Sources/CpasPopup.cpp
   trunk/Languages/Sources/CperlFuncPopup.l
   trunk/Languages/Sources/CpythonFuncPopup.l
   trunk/Languages/Sources/CrezFuncPopup.l
   trunk/Languages/Sources/CtexFuncPopup.l
Modified:
   trunk/Languages/Sources/Jamfile
Log:
* New unified naming of language extension source files


Copied: trunk/Languages/Sources/Antlr_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_antlr.cpp)

Copied: trunk/Languages/Sources/Antlr_Popup.cpp (from rev 452, trunk/Languages/Sources/CantlrPopup.cpp)

Copied: trunk/Languages/Sources/Asm_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_asm.cpp)

Deleted: trunk/Languages/Sources/CDPopup.cpp

Deleted: trunk/Languages/Sources/CLangIncl.h

Deleted: trunk/Languages/Sources/CLang_antlr.cpp

Deleted: trunk/Languages/Sources/CLang_asm.cpp

Deleted: trunk/Languages/Sources/CLang_cpp.cpp

Deleted: trunk/Languages/Sources/CLang_d.cpp

Deleted: trunk/Languages/Sources/CLang_diff.cpp

Deleted: trunk/Languages/Sources/CLang_html.cpp

Deleted: trunk/Languages/Sources/CLang_html_2.cpp

Deleted: trunk/Languages/Sources/CLang_jam.cpp

Deleted: trunk/Languages/Sources/CLang_java.cpp

Deleted: trunk/Languages/Sources/CLang_lout.cpp

Deleted: trunk/Languages/Sources/CLang_lua.cpp

Deleted: trunk/Languages/Sources/CLang_m.cpp

Deleted: trunk/Languages/Sources/CLang_ob2.cpp

Deleted: trunk/Languages/Sources/CLang_pas.cpp

Deleted: trunk/Languages/Sources/CLang_perl.cpp

Deleted: trunk/Languages/Sources/CLang_python.cpp

Deleted: trunk/Languages/Sources/CLang_rez.cpp

Deleted: trunk/Languages/Sources/CLang_shell.cpp

Deleted: trunk/Languages/Sources/CLang_sql.cpp

Deleted: trunk/Languages/Sources/CLang_tex.cpp

Deleted: trunk/Languages/Sources/CLoutFuncPopup.l

Deleted: trunk/Languages/Sources/CantlrPopup.cpp

Deleted: trunk/Languages/Sources/CcppPopup.cpp

Deleted: trunk/Languages/Sources/ChtmlPopup.cpp

Deleted: trunk/Languages/Sources/CjavaFuncPopup.l

Deleted: trunk/Languages/Sources/CluaPopup.cpp

Deleted: trunk/Languages/Sources/CmFuncPopup.l

Deleted: trunk/Languages/Sources/Cob2FuncPopup.l

Deleted: trunk/Languages/Sources/CpasPopup.cpp

Deleted: trunk/Languages/Sources/CperlFuncPopup.l

Copied: trunk/Languages/Sources/Cpp_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_cpp.cpp)

Copied: trunk/Languages/Sources/Cpp_Popup.cpp (from rev 452, trunk/Languages/Sources/CcppPopup.cpp)

Deleted: trunk/Languages/Sources/CpythonFuncPopup.l

Deleted: trunk/Languages/Sources/CrezFuncPopup.l

Deleted: trunk/Languages/Sources/CtexFuncPopup.l

Copied: trunk/Languages/Sources/D_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_d.cpp)

Copied: trunk/Languages/Sources/D_Popup.cpp (from rev 452, trunk/Languages/Sources/CDPopup.cpp)

Copied: trunk/Languages/Sources/Diff_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_diff.cpp)

Copied: trunk/Languages/Sources/HtmlJs_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_html_2.cpp)

Added: trunk/Languages/Sources/HtmlJs_Popup.cpp
===================================================================
--- trunk/Languages/Sources/HtmlJs_Popup.cpp	2006-11-14 15:07:41 UTC (rev 452)
+++ trunk/Languages/Sources/HtmlJs_Popup.cpp	2006-11-19 02:22:01 UTC (rev 453)
@@ -0,0 +1,304 @@
+/*	$Id: ChtmlPopup.cpp 6 2002-06-05 14:39:23Z maarten $
+	
+	Copyright 1996, 1997, 1998, 2002
+	        Hekkelman Programmatuur B.V.  All rights reserved.
+	
+	Redistribution and use in source and binary forms, with or without
+	modification, are permitted provided that the following conditions are met:
+	1. Redistributions of source code must retain the above copyright notice,
+	   this list of conditions and the following disclaimer.
+	2. Redistributions in binary form must reproduce the above copyright notice,
+	   this list of conditions and the following disclaimer in the documentation
+	   and/or other materials provided with the distribution.
+	3. All advertising materials mentioning features or use of this software
+	   must display the following acknowledgement:
+	   
+	    This product includes software developed by Hekkelman Programmatuur B.V.
+	
+	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
+	   promote products derived from this software without specific prior
+	   written permission.
+	
+	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
+	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+	AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+	EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+	PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
+
+	Created: 04/19/98 19:30:25
+*/
+
+#include "CLanguageAddOn.h"
+#include <string>
+
+const long kMaxNameSize = 256;
+
+const char *skip(const char *txt, int ch);
+const char *skip_nc(const char *txt, int ch);
+const char *Anchor(const char *txt, CLanguageProxy& ao);
+const char *Heading(const char *txt, CLanguageProxy& ao);
+const char *JavaScript(const char *txt, CLanguageProxy& ao);
+
+const char *skip(const char *txt, int ch)
+{
+	while (*txt)
+	{
+		if (*txt == ch)
+		{
+			txt++;
+			break;
+		}
+		txt++;
+	}
+
+	return txt;
+} /* skip */
+
+const char *skip_nc(const char *txt, int ch)
+{
+	while (*txt)
+	{
+		if (*txt == ch)
+		{
+			txt++;
+			break;
+		}
+		else if (*txt == '"')
+			txt = skip(txt + 1, '"');
+		else
+			txt++;
+	}
+
+	return txt;
+} /* skip_nc */
+
+inline const char *skip_white(const char *txt)
+{
+	while (isspace(*txt))
+		txt++;
+	return txt;
+} /* skip_white */
+
+const char *Anchor(const char *txt, CLanguageProxy& ao)
+{
+	char name[PATH_MAX];
+
+	txt = skip_white(txt);
+	
+	do
+	{
+		if (strncasecmp(txt, "HREF", 4) == 0)
+		{
+			txt = skip_white(txt + 4);
+			
+			if (*txt != '=')
+				break;
+			
+			txt = skip_white(txt + 1);
+			
+			if (*txt != '"')
+				break;
+			
+			const char *file = txt + 1;
+			
+			txt = skip(txt + 1, '"');
+			
+			if (*txt == 0)
+				break;
+			
+			int l = min((long)PATH_MAX - 1, txt - file - 1);
+			strncpy(name, file, l);
+			name[l] = 0;
+			
+			ao.AddInclude(name, name);
+		}
+		else if (strncasecmp(txt, "NAME", 4) == 0)
+		{
+			txt = skip_white(txt + 4);
+			
+			if (*txt != '=')
+				break;
+			
+			txt = skip_white(txt + 1);
+			
+			if (*txt != '"')
+				break;
+
+			int offset = txt - ao.Text();
+			const char *anchor = txt + 1;
+			
+			txt = skip(txt + 1, '"');
+			
+			if (*txt == 0)
+				break;
+			
+			char *p = name + kMaxNameSize;
+			int l = min(kMaxNameSize - 1, txt - anchor - 1);
+			strncpy(name, anchor, l);
+			name[l] = 0;
+			
+			sprintf(p, "A: %s", name);
+			
+			ao.AddFunction(p, name, offset);
+		}
+	}
+	while (false);
+	
+	return skip(txt, '>');
+} /* Anchor */
+
+const char *Heading(const char *txt, CLanguageProxy& ao)
+{
+	const char *hName;
+	int level = *txt - '0';
+	
+	txt = skip(txt + 1, '>');
+	
+	while (*txt == '<')
+		txt = skip(txt + 1, '>');
+	
+	if (*txt == 0)
+		return txt;
+	
+	hName = txt;
+	
+	txt = skip(txt + 1, '<');
+	
+	char name[kMaxNameSize];
+	int l = min(txt - hName - 1, kMaxNameSize - 1);
+	int offset = hName - ao.Text();
+	
+	strncpy(name, hName, l);
+	name[l] = 0;
+	
+	hName = strtok(name, "\n\t\r");
+	
+	do
+	{
+		if (strlen(hName))
+		{
+			char label[kMaxNameSize + 10];
+			sprintf(label, "H%d: %s", level, hName);
+			ao.AddFunction(label, hName, offset);
+			break;
+		}
+		hName = strtok(NULL, "\n\r\t");
+	}
+	while (hName);
+	
+	return txt;
+} /* Heading */
+
+const char *JavaScript(const char *txt, CLanguageProxy& ao)
+{
+	txt = skip_nc(txt, '>');
+	
+	while (*txt)
+	{
+		switch (*txt)
+		{
+			case '/':
+				if (txt[1] == '/')
+					txt = skip(txt, '\n');
+				break;
+			case '"':
+			{
+				while (*++txt)
+				{
+					if (*txt == '\\')
+						txt++;
+					else if (*txt == '"')
+						break;
+				}
+				break;
+			}
+			case '\'':
+			{
+				while (*++txt)
+				{
+					if (*txt == '\\')
+						txt++;
+					else if (*txt == '\'')
+						break;
+				}
+				break;
+			}
+			case '{':
+				txt = skip(txt + 1, '}');
+				break;
+			case '(':
+				txt = skip(txt + 1, ')');
+				break;
+			case '<':
+				if (strncasecmp(txt, "</script", 8) == 0)
+					return txt + 9;
+				break;
+			default:
+				if (strncasecmp(txt, "function", 8) == 0)
+				{
+					txt += 8;
+					while (isspace(*txt)) txt++;
+					
+					int offset = txt - ao.Text();
+					
+					string name, label;
+					
+					while (isalnum(*txt))
+						name += *txt++;
+					
+					label = "JS: " + name;
+					
+					ao.AddFunction(label.c_str(), name.c_str(), offset);
+				}
+				break;
+		}
+		txt++;
+	}
+	
+	return txt;
+} // JavaScript
+
+void ScanForFunctions(CLanguageProxy& proxy)
+{
+	const char *text = proxy.Text(), *max = text + proxy.Size();
+	if (*max != 0)
+		return;
+	
+	while (text < max)
+	{
+		text = skip(text, '<');
+		text = skip_white(text);
+		
+		switch (toupper(*text))
+		{
+			case 0:
+				return;
+			case 'A':
+				if (isspace(*++text))
+					text = Anchor(text, proxy);
+				else
+					text = skip_nc(text, '>');
+				break;
+			case 'H':
+				if (*++text >= '1' && *text <= '6')
+				{
+					text = Heading(text, proxy);
+				}
+				else
+					text = skip_nc(text, '>');
+				break;
+			case 'S':
+				if (strncasecmp(text, "SCRIPT", 6) == 0)
+					text = JavaScript(text, proxy);
+				break;
+			default:
+				text = skip_nc(text + 1, '>');
+				break;
+		}
+	}
+} /* ScanForFunctions */

Copied: trunk/Languages/Sources/Html_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_html.cpp)

Copied: trunk/Languages/Sources/Html_Popup.cpp (from rev 452, trunk/Languages/Sources/ChtmlPopup.cpp)

Copied: trunk/Languages/Sources/Jam_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_jam.cpp)

Modified: trunk/Languages/Sources/Jamfile
===================================================================
--- trunk/Languages/Sources/Jamfile	2006-11-14 15:07:41 UTC (rev 452)
+++ trunk/Languages/Sources/Jamfile	2006-11-19 02:22:01 UTC (rev 453)
@@ -4,14 +4,14 @@
 SubDirHdrs $(TOP) Sources ;
 
 if $(OSPLAT) = X86 {
-	C++FLAGS += -include [ FDirName $(TOP) Languages Sources CLangIncl.h ] -Wno-unused ;
+	C++FLAGS += -include [ FDirName $(TOP) Languages Sources LanguageIncludes.h ] -Wno-unused ;
 } else {
-	C++FLAGS += -prefix CLangIncl.h -w nounusedvar ;
+	C++FLAGS += -prefix LanguageIncludes.h -w nounusedvar ;
 }
 
 # <pe-src>
 PeLanguage AntlrExt 
-	: CLang_antlr.cpp CantlrPopup.cpp
+	: Antlr_Language.cpp Antlr_Popup.cpp 
 	: be 
 	: keywords.g.rsrc 
 	;
@@ -19,7 +19,7 @@
 
 # <pe-src>
 PeLanguage AsmExt 
-	: CLang_asm.cpp 
+	: Asm_Language.cpp
 	: be 
 	: keywords.asm.rsrc 
 	;
@@ -27,16 +27,15 @@
 
 # <pe-src>
 PeLanguage CppExt 
-	: CLang_cpp.cpp CcppPopup.cpp 
+	: Cpp_Language.cpp Cpp_Popup.cpp 
 	: be 
 	: keywords.cpp.rsrc 
 	;
 # </pe-src>
 
 # <pe-src>
-PeLanguage DExt : 
-	CLang_d.cpp
-	CDPopup.cpp
+PeLanguage DExt
+	: D_Language.cpp D_Popup.cpp 
 	: be 
 	: keywords.d.rsrc 
 	;
@@ -44,7 +43,7 @@
 
 # <pe-src>
 PeLanguage DiffExt 
-	: CLang_diff.cpp 
+	: Diff_Language.cpp
 	: be 
 	: keywords.diff.rsrc 
 	;
@@ -52,7 +51,7 @@
 
 # <pe-src>
 PeLanguage HtmlExt 
-	: CLang_html.cpp ChtmlPopup.cpp 
+	: Html_Language.cpp Html_Popup.cpp 
 	: be $(STDC++LIB) 
 	: keywords.html.rsrc 
 	;
@@ -60,7 +59,7 @@
 
 # <pe-src>
 PeLanguage HtmlJSExt 
-	: CLang_html_2.cpp ChtmlPopup.cpp 
+	: HtmlJs_Language.cpp HtmlJs_Popup.cpp 
 	: be $(STDC++LIB) 
 	: keywords.html-js.rsrc 
 	;
@@ -68,7 +67,7 @@
 
 # <pe-src>
 PeLanguage JamExt 
-	: CLang_jam.cpp 
+	: Jam_Language.cpp 
 	: be 
 	: keywords.jam.rsrc 
 	;
@@ -76,16 +75,15 @@
 
 # <pe-src>
 PeLanguage JavaExt 
-	: CLang_java.cpp CjavaFuncPopup.l 
+	: Java_Language.cpp Java_Popup.l 
 	: be 
 	: keywords.java.rsrc 
 	;
 # </pe-src>
 
 # <pe-src>
-PeLanguage LoutExt : 
-	CLang_lout.cpp
-	CLoutFuncPopup.l
+PeLanguage LoutExt
+	: Lout_Language.cpp Lout_Popup.l 
 	: be
 	: keywords.lt.rsrc 
 	;
@@ -93,7 +91,7 @@
 
 # <pe-src>
 PeLanguage LuaExt 
-	: CLang_lua.cpp CluaPopup.cpp 
+	: Lua_Language.cpp Lua_Popup.cpp 
 	: be 
 	: keywords.lua.rsrc 
 	;
@@ -101,7 +99,7 @@
 
 # <pe-src>
 PeLanguage MathematicaExt 
-	: CLang_m.cpp CmFuncPopup.l 
+	: Mathematica_Language.cpp Mathematica_Popup.l 
 	: be 
 	: keywords.m.rsrc 
 	;
@@ -109,7 +107,7 @@
 
 # <pe-src>
 PeLanguage OberonExt 
-	: CLang_ob2.cpp Cob2FuncPopup.l 
+	: Oberon_Language.cpp Oberon_Popup.l 
 	: be 
 	: keywords.ob2.rsrc 
 	;
@@ -117,7 +115,7 @@
 
 # <pe-src>
 PeLanguage PascalExt 
-	: CLang_pas.cpp CpasPopup.cpp 
+	: Pascal_Language.cpp Pascal_Popup.cpp 
 	: be 
 	: keywords.pas.rsrc 
 	;
@@ -125,7 +123,7 @@
 
 # <pe-src>
 PeLanguage PerlExt 
-	: CLang_perl.cpp CperlFuncPopup.l 
+	: Perl_Language.cpp Perl_Popup.l 
 	: be 
 	: keywords.pl.rsrc 
 	;
@@ -133,7 +131,7 @@
 
 # <pe-src>
 PeLanguage PythonExt 
-	: CLang_python.cpp CpythonFuncPopup.l 
+	: Python_Language.cpp Python_Popup.l 
 	: be 
 	: keywords.py.rsrc 
 	;
@@ -141,7 +139,7 @@
 
 # <pe-src>
 PeLanguage RezExt 
-	: CLang_rez.cpp CrezFuncPopup.l 
+	: Rez_Language.cpp Rez_Popup.l 
 	: be 
 	: keywords.rez.rsrc 
 	;
@@ -149,7 +147,7 @@
 
 # <pe-src>
 PeLanguage ShellExt 
-	: CLang_shell.cpp 
+	: Shell_Language.cpp 
 	: be 
 	: keywords.sh.rsrc 
 	;
@@ -157,7 +155,7 @@
 
 # <pe-src>
 PeLanguage SQLExt 
-	: CLang_sql.cpp 
+	: Sql_Language.cpp 
 	: be 
 	: keywords.sql.rsrc 
 	;
@@ -165,7 +163,7 @@
 
 # <pe-src>
 PeLanguage TexExt 
-	: CLang_tex.cpp CtexFuncPopup.l 
+	: Tex_Language.cpp Tex_Popup.l 
 	: be 
 	: keywords.tex.rsrc 
 	;

Copied: trunk/Languages/Sources/Java_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_java.cpp)

Copied: trunk/Languages/Sources/Java_Popup.l (from rev 452, trunk/Languages/Sources/CjavaFuncPopup.l)

Copied: trunk/Languages/Sources/LanguageIncludes.h (from rev 452, trunk/Languages/Sources/CLangIncl.h)

Copied: trunk/Languages/Sources/Lout_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_lout.cpp)

Copied: trunk/Languages/Sources/Lout_Popup.l (from rev 452, trunk/Languages/Sources/CLoutFuncPopup.l)

Copied: trunk/Languages/Sources/Lua_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_lua.cpp)

Copied: trunk/Languages/Sources/Lua_Popup.cpp (from rev 452, trunk/Languages/Sources/CluaPopup.cpp)

Copied: trunk/Languages/Sources/Mathematica_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_m.cpp)

Copied: trunk/Languages/Sources/Mathematica_Popup.l (from rev 452, trunk/Languages/Sources/CmFuncPopup.l)

Copied: trunk/Languages/Sources/Oberon_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_ob2.cpp)

Copied: trunk/Languages/Sources/Oberon_Popup.l (from rev 452, trunk/Languages/Sources/Cob2FuncPopup.l)

Copied: trunk/Languages/Sources/Pascal_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_pas.cpp)

Copied: trunk/Languages/Sources/Pascal_Popup.cpp (from rev 452, trunk/Languages/Sources/CpasPopup.cpp)

Copied: trunk/Languages/Sources/Perl_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_perl.cpp)

Copied: trunk/Languages/Sources/Perl_Popup.l (from rev 452, trunk/Languages/Sources/CperlFuncPopup.l)

Copied: trunk/Languages/Sources/Python_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_python.cpp)

Copied: trunk/Languages/Sources/Python_Popup.l (from rev 452, trunk/Languages/Sources/CpythonFuncPopup.l)

Copied: trunk/Languages/Sources/Rez_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_rez.cpp)

Copied: trunk/Languages/Sources/Rez_Popup.l (from rev 452, trunk/Languages/Sources/CrezFuncPopup.l)

Copied: trunk/Languages/Sources/Shell_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_shell.cpp)

Copied: trunk/Languages/Sources/Sql_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_sql.cpp)

Copied: trunk/Languages/Sources/Tex_Language.cpp (from rev 452, trunk/Languages/Sources/CLang_tex.cpp)

Copied: trunk/Languages/Sources/Tex_Popup.l (from rev 452, trunk/Languages/Sources/CtexFuncPopup.l)



From hoern at mail.berlios.de  Sun Nov 19 19:56:35 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Sun, 19 Nov 2006 19:56:35 +0100
Subject: [pe-commits] r454 - trunk/Sources
Message-ID: <200611191856.kAJIuZit023138@sheep.berlios.de>

Author: hoern
Date: 2006-11-19 19:56:35 +0100 (Sun, 19 Nov 2006)
New Revision: 454
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=454&view=rev

Modified:
   trunk/Sources/CKeywords.cpp
Log:
* Fixed a bug where the first keyword after an '-...'-line was skipped


Modified: trunk/Sources/CKeywords.cpp
===================================================================
--- trunk/Sources/CKeywords.cpp	2006-11-19 02:22:01 UTC (rev 453)
+++ trunk/Sources/CKeywords.cpp	2006-11-19 18:56:35 UTC (rev 454)
@@ -48,7 +48,7 @@
  *     the amount of words contained in the map beforehand, the memory footprint
  *     of the hashmap would be (much) worse than that of a map.
  *     Benchmarks have indicated that lookup speed is good enough with maps
- *		 anyway (it performs at least s well as the older DFA-approach), 
+ *		 anyway (it performs at least as well as the older DFA-approach), 
  *		 so I have decided to use a map for now.
  */
 void GenerateKWMap(const char *file, const char *ext, map<BString,int>& kwMap)
@@ -106,7 +106,7 @@
 		BString word;
 		char* buf;
 		int currType = kKeywordLanguage;
-		while(start < end) {
+		while (start < end) {
 			// ideally, we'd like to use this:
 			//			word.SetTo(start, end-start);
 			// but the implementation of SetTo() seems to do a strlen() without
@@ -123,7 +123,7 @@
 				start += strspn(start, white);
 				end = start + strcspn(start, white);
 			} else {
-				if(word[0] == '-') {
+				if (word[0] == '-') {
 					// it's a keyword-class specifier, we check which one:
 					if (!word.ICompare("-Pe-Keywords-Language-"))
 						currType = kKeywordLanguage;
@@ -140,9 +140,7 @@
 						// '-' entry bumps the type...
 						currType++;
 						// ...and skips to end of line:
-						start += strcspn(start, "\n");
-						start += strspn(start, white);
-						end = start + strcspn(start, white);
+						end = start + strcspn(start, "\n");
 					}
 				} else {
 					kwMap[word] = currType;



From hoern at mail.berlios.de  Mon Nov 20 02:20:04 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Mon, 20 Nov 2006 02:20:04 +0100
Subject: [pe-commits] r455 - in trunk: Languages/Resources Languages/Sources
	Sources
Message-ID: <200611200120.kAK1K4Eu001725@sheep.berlios.de>

Author: hoern
Date: 2006-11-20 02:19:52 +0100 (Mon, 20 Nov 2006)
New Revision: 455
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=455&view=rev

Added:
   trunk/Languages/Resources/keywords.html-js-php
   trunk/Languages/Resources/keywords.html-js-php.r
   trunk/Languages/Sources/HtmlJsPhp_Language.cpp
   trunk/Languages/Sources/HtmlJsPhp_Popup.cpp
Modified:
   trunk/Languages/Resources/Jamfile
   trunk/Languages/Sources/Jamfile
   trunk/Sources/CLangIntf.cpp
Log:
* (Experimental) language support for PHP added, backported from Pepper
  (thanks to Maarten!)
* Added support for '-enclosed php strings


Modified: trunk/Languages/Resources/Jamfile
===================================================================
--- trunk/Languages/Resources/Jamfile	2006-11-19 18:56:35 UTC (rev 454)
+++ trunk/Languages/Resources/Jamfile	2006-11-20 01:19:52 UTC (rev 455)
@@ -8,6 +8,7 @@
 	keywords.diff.r
 	keywords.g.r
 	keywords.html-js.r
+	keywords.html-js-php.r
 	keywords.html.r
 	keywords.jam.r
 	keywords.java.r

Added: trunk/Languages/Resources/keywords.html-js-php
===================================================================
--- trunk/Languages/Resources/keywords.html-js-php	2006-11-19 18:56:35 UTC (rev 454)
+++ trunk/Languages/Resources/keywords.html-js-php	2006-11-20 01:19:52 UTC (rev 455)
@@ -0,0 +1,679 @@
+--- (01) HTML-Tags ---------------------------------------------------------------------------------
+a abbr acronym address applet area b base basefont bdo big blockquote body br button caption center
+cite code col colgroup dd del dfn dir div dl dt em fieldset font form frame frameset h1 h2 h3 h4 h5
+h6 head hr html i iframe img input ins isindex kbd label legend li link map menu meta noframes
+noscript object ol optgroup option p param pre q s samp script select small span strike strong style
+sub sup table tbody td textarea tfoot th thead title tr tt u ul var
+
+--- (02) HTML-Attributes ---------------------------------------------------------------------------
+abbr accept accept-charset accesskey action align alink alt archive axis background bgcolor border
+cellpadding cellspacing char charoff charset checked cite class classid clear code codebase codetype
+color cols colspan compact content coords data datetime declare defer dir disabled enctype face for
+frame frameborder headers height href hreflang hspace http-equiv id ismap label lang language link
+longdesc marginheight marginwidth maxlength media method multiple name nohref noresize noshade
+nowrap object onblur onchange onclick ondblclick onfocus onkeydown onkeypress onkeyup onload
+onmousedown onmousemove onmouseout onmouseover onmouseup onreset onselect onsubmit onunload profile
+prompt readonly rel rev rows rowspan rules scheme scope scrolling selected shape size span src
+standby start style summary tabindex target text title type usemap valign value valuetype version
+vlink vspace width
+
+--- (03) Javascript-Keywords -----------------------------------------------------------------------
+abstract boolean break byte case catch char class const continue debugger default delete do document
+double else enum export extends extends false false final finally float for function goto if
+implements import in instanceof int interface long native new null package private protected public
+return short static super switch synchonized this throw throws transient true try typeof var void
+while window with
+
+--- (04) Javascript-Constants ----------------------------------------------------------------------
+E LN10 LN2 LOG10E LOG2E PI SQRT1_2 SQRT2
+
+--- (05) PHP-Language ------------------------------------------------------------------------------
+__CLASS__ __FILE__ __FUNCTION__ __LINE__ __METHOD__ __call __construct __destruct __done __get
+__isset __set __set_state __sleep __toString __unset __wakeup abstract and array as break case catch
+cfunction class clone const continue declare default die do echo else elseif empty enddeclare endfor
+endforeach endif endswitch endwhile eval exception exit extends false final for foreach function
+global if implements include include_once interface isset list new old_function or php_user_filter
+print private protected public require require_once return static switch this throw true try unset
+use var while xor
+
+--- (06) PHP-Keywords ------------------------------------------------------------------------------
+abs acos acosh addcslashes addslashes aggregate aggregate_info aggregate_methods
+aggregate_methods_by_list aggregate_methods_by_regexp aggregate_properties
+aggregate_properties_by_list aggregate_properties_by_regexp aggregation_info apache_child_terminate
+apache_get_modules apache_get_version apache_getenv apache_lookup_uri apache_note
+apache_request_headers apache_reset_timeout apache_response_headers apache_setenv apd_breakpoint
+apd_callstack apd_clunk apd_continue apd_croak apd_dump_function_table apd_dump_persistent_resources
+apd_dump_regular_resources apd_echo apd_get_active_symbols apd_set_pprof_trace apd_set_session
+apd_set_session_trace apd_set_socket_session_trace array array_change_key_case array_chunk
+array_combine array_count_values array_diff array_diff_assoc array_diff_key array_diff_uassoc
+array_diff_ukey array_fill array_filter array_flip array_intersect array_intersect_assoc
+array_intersect_key array_intersect_uassoc array_intersect_ukey array_key_exists array_keys
+array_map array_merge array_merge_recursive array_multisort array_pad array_pop array_push
+array_rand array_reduce array_reverse array_search array_shift array_slice array_splice array_sum
+array_udiff array_udiff_assoc array_udiff_uassoc array_uintersect array_uintersect_assoc
+array_uintersect_uassoc array_unique array_unshift array_values array_walk array_walk_recursive
+arsort ascii2ebcdic asin asinh asort aspell_check aspell_check_raw aspell_new aspell_suggest assert
+assert_options atan atan2 atanh base64_decode base64_encode base_convert basename bcadd bccomp bcdiv
+bcmod bcmul bcompile_write_file bcompiler_load bcompiler_load_exe bcompiler_parse_class
+bcompiler_read bcompiler_write_class bcompiler_write_constant bcompiler_write_exe_footer
+bcompiler_write_footer bcompiler_write_function bcompiler_write_functions_from_file
+bcompiler_write_header bcpow bcpowmod bcscale bcsqrt bcsub bin2hex bind_textdomain_codeset bindec
+bindtextdomain bzclose bzcompress bzdecompress bzerrno bzerror bzerrstr bzflush bzopen bzread
+bzwrite cal_days_in_month cal_from_jd cal_info cal_to_jd call_user_func call_user_func_array
+call_user_method call_user_method_array ccvs_add ccvs_auth ccvs_command ccvs_count ccvs_delete
+ccvs_done ccvs_init ccvs_lookup ccvs_new ccvs_report ccvs_return ccvs_reverse ccvs_sale ccvs_status
+ccvs_textvalue ccvs_void ceil chdir checkdate checkdnsrr chgrp chmod chop chown chr chroot
+chunk_split class_exists class_implements class_parents classkit_import classkit_method_add
+classkit_method_copy classkit_method_redefine classkit_method_remove classkit_method_rename
+clearstatcache closedir closelog com com_addref com_create_guid com_event_sink com_get
+com_get_active_object com_invoke com_isenum com_load com_load_typelib com_message_pump
+com_print_typeinfo com_propget com_propput com_propset com_release com_set compact
+connection_aborted connection_status connection_timeout constant convert_cyr_string convert_uudecode
+convert_uuencode copy cos cosh count count_chars cpdf_add_annotation cpdf_add_outline cpdf_arc
+cpdf_begin_text cpdf_circle cpdf_clip cpdf_close cpdf_closepath cpdf_closepath_fill_stroke
+cpdf_closepath_stroke cpdf_continue_text cpdf_curveto cpdf_end_text cpdf_fill cpdf_fill_stroke
+cpdf_finalize cpdf_finalize_page cpdf_global_set_document_limits cpdf_import_jpeg cpdf_lineto
+cpdf_moveto cpdf_newpath cpdf_open cpdf_output_buffer cpdf_page_init cpdf_place_inline_image
+cpdf_rect cpdf_restore cpdf_rlineto cpdf_rmoveto cpdf_rotate cpdf_rotate_text cpdf_save
+cpdf_save_to_file cpdf_scale cpdf_set_action_url cpdf_set_char_spacing cpdf_set_creator
+cpdf_set_current_page cpdf_set_font cpdf_set_font_directories cpdf_set_font_map_file
+cpdf_set_horiz_scaling cpdf_set_keywords cpdf_set_leading cpdf_set_page_animation cpdf_set_subject
+cpdf_set_text_matrix cpdf_set_text_pos cpdf_set_text_rendering cpdf_set_text_rise cpdf_set_title
+cpdf_set_viewer_preferences cpdf_set_word_spacing cpdf_setdash cpdf_setflat cpdf_setgray
+cpdf_setgray_fill cpdf_setgray_stroke cpdf_setlinecap cpdf_setlinejoin cpdf_setlinewidth
+cpdf_setmiterlimit cpdf_setrgbcolor cpdf_setrgbcolor_fill cpdf_setrgbcolor_stroke cpdf_show
+cpdf_show_xy cpdf_stringwidth cpdf_stroke cpdf_text cpdf_translate crack_check crack_closedict
+crack_getlastmessage crack_opendict crc32 create_function crypt ctype_alnum ctype_alpha ctype_cntrl
+ctype_digit ctype_graph ctype_lower ctype_print ctype_punct ctype_space ctype_upper ctype_xdigit
+curl_close curl_copy_handle curl_errno curl_error curl_exec curl_getinfo curl_init
+curl_multi_add_handle curl_multi_close curl_multi_exec curl_multi_getcontent curl_multi_info_read
+curl_multi_init curl_multi_remove_handle curl_multi_select curl_setopt curl_version current
+cybercash_base64_decode cybercash_base64_encode cybercash_decr cybercash_encr cyrus_authenticate
+cyrus_bind cyrus_close cyrus_connect cyrus_query cyrus_unbind date date_sunrise date_sunset
+dba_close dba_delete dba_exists dba_fetch dba_firstkey dba_handlers dba_insert dba_key_split
+dba_list dba_nextkey dba_open dba_optimize dba_popen dba_replace dba_sync dbase_add_record
+dbase_close dbase_create dbase_delete_record dbase_get_header_info dbase_get_record
+dbase_get_record_with_names dbase_numfields dbase_numrecords dbase_open dbase_pack
+dbase_replace_record dblist dbmclose dbmdelete dbmexists dbmfetch dbmfirstkey dbminsert dbmnextkey
+dbmopen dbmreplace dbplus_add dbplus_aql dbplus_chdir dbplus_close dbplus_curr dbplus_errcode
+dbplus_errno dbplus_find dbplus_first dbplus_flush dbplus_freealllocks dbplus_freelock
+dbplus_freerlocks dbplus_getlock dbplus_getunique dbplus_info dbplus_last dbplus_lockrel dbplus_next
+dbplus_open dbplus_prev dbplus_rchperm dbplus_rcreate dbplus_rcrtexact dbplus_rcrtlike
+dbplus_resolve dbplus_restorepos dbplus_rkeys dbplus_ropen dbplus_rquery dbplus_rrename
+dbplus_rsecindex dbplus_runlink dbplus_rzap dbplus_savepos dbplus_setindex dbplus_setindexbynumber
+dbplus_sql dbplus_tcl dbplus_tremove dbplus_undo dbplus_undoprepare dbplus_unlockrel dbplus_unselect
+dbplus_update dbplus_xlockrel dbplus_xunlockrel dbx_close dbx_compare dbx_connect dbx_error
+dbx_escape_string dbx_fetch_row dbx_query dbx_sort dcgettext dcngettext deaggregate debug_backtrace
+debug_print_backtrace debug_zval_dump debugger_off debugger_on decbin dechex decoct define
+define_syslog_variables defined deg2rad delete dgettext die dio_close dio_fcntl dio_open dio_read
+dio_seek dio_stat dio_tcsetattr dio_truncate dio_write dir dirname disk_free_space disk_total_space
+diskfreespace dl dngettext dns_check_record dns_get_mx dns_get_record dom_import_simplexml
+domxml_new_doc domxml_open_file domxml_open_mem domxml_version domxml_xmltree domxml_xslt_stylesheet
+domxml_xslt_stylesheet_doc domxml_xslt_stylesheet_file dotnet dotnet_load doubleval each easter_date
+easter_days ebcdic2ascii echo empty end ereg ereg_replace eregi eregi_replace error_log
+error_reporting escapeshellarg escapeshellcmd eval exec exif_imagetype exif_read_data exif_tagname
+exif_thumbnail exit exp explode expm1 extension_loaded extract ezmlm_hash fam_cancel_monitor
+fam_close fam_monitor_collection fam_monitor_directory fam_monitor_file fam_next_event fam_open
+fam_pending fam_resume_monitor fam_suspend_monitor fbsql_affected_rows fbsql_autocommit
+fbsql_blob_size fbsql_change_user fbsql_clob_size fbsql_close fbsql_commit fbsql_connect
+fbsql_create_blob fbsql_create_clob fbsql_create_db fbsql_data_seek fbsql_database
+fbsql_database_password fbsql_db_query fbsql_db_status fbsql_drop_db fbsql_errno fbsql_error
+fbsql_fetch_array fbsql_fetch_assoc fbsql_fetch_field fbsql_fetch_lengths fbsql_fetch_object
+fbsql_fetch_row fbsql_field_flags fbsql_field_len fbsql_field_name fbsql_field_seek
+fbsql_field_table fbsql_field_type fbsql_free_result fbsql_get_autostart_info fbsql_hostname
+fbsql_insert_id fbsql_list_dbs fbsql_list_fields fbsql_list_tables fbsql_next_result
+fbsql_num_fields fbsql_num_rows fbsql_password fbsql_pconnect fbsql_query fbsql_read_blob
+fbsql_read_clob fbsql_result fbsql_rollback fbsql_select_db fbsql_set_lob_mode fbsql_set_password
+fbsql_set_transaction fbsql_start_db fbsql_stop_db fbsql_tablename fbsql_username fbsql_warnings
+fclose fdf_add_doc_javascript fdf_add_template fdf_close fdf_create fdf_enum_values fdf_errno
+fdf_error fdf_get_ap fdf_get_attachment fdf_get_encoding fdf_get_file fdf_get_flags fdf_get_opt
+fdf_get_status fdf_get_value fdf_get_version fdf_header fdf_next_field_name fdf_open fdf_open_string
+fdf_remove_item fdf_save fdf_save_string fdf_set_ap fdf_set_encoding fdf_set_file fdf_set_flags
+fdf_set_javascript_action fdf_set_on_import_javascript fdf_set_opt fdf_set_status
+fdf_set_submit_form_action fdf_set_target_frame fdf_set_value fdf_set_version feof fflush fgetc
+fgetcsv fgets fgetss file file_exists file_get_contents file_put_contents fileatime filectime
+filegroup fileinode filemtime fileowner fileperms filepro filepro_fieldcount filepro_fieldname
+filepro_fieldtype filepro_fieldwidth filepro_retrieve filepro_rowcount filesize filetype floatval
+flock floor flush fmod fnmatch fopen fpassthru fprintf fputcsv fputs fread frenchtojd
+fribidi_log2vis fscanf fseek fsockopen fstat ftell ftok ftp_alloc ftp_cdup ftp_chdir ftp_chmod
+ftp_close ftp_connect ftp_delete ftp_exec ftp_fget ftp_fput ftp_get ftp_get_option ftp_login
+ftp_mdtm ftp_mkdir ftp_nb_continue ftp_nb_fget ftp_nb_fput ftp_nb_get ftp_nb_put ftp_nlist ftp_pasv
+ftp_put ftp_pwd ftp_quit ftp_raw ftp_rawlist ftp_rename ftp_rmdir ftp_set_option ftp_site ftp_size
+ftp_ssl_connect ftp_systype ftruncate func_get_arg func_get_args func_num_args function_exists
+fwrite gd_info get_browser get_cfg_var get_class get_class_methods get_class_vars get_current_user
+get_declared_classes get_declared_interfaces get_defined_constants get_defined_functions
+get_defined_vars get_extension_funcs get_headers get_html_translation_table get_include_path
+get_included_files get_loaded_extensions get_magic_quotes_gpc get_magic_quotes_runtime get_meta_tags
+get_object_vars get_parent_class get_required_files get_resource_type getallheaders getcwd getdate
+getenv gethostbyaddr gethostbyname gethostbynamel getimagesize getlastmod getmxrr getmygid
+getmyinode getmypid getmyuid getopt getprotobyname getprotobynumber getrandmax getrusage
+getservbyname getservbyport gettext gettimeofday gettype glob gmdate gmmktime gmp_abs gmp_add
+gmp_and gmp_clrbit gmp_cmp gmp_com gmp_div gmp_div_q gmp_div_qr gmp_div_r gmp_divexact gmp_fact
+gmp_gcd gmp_gcdext gmp_hamdist gmp_init gmp_intval gmp_invert gmp_jacobi gmp_legendre gmp_mod
+gmp_mul gmp_neg gmp_or gmp_perfect_square gmp_popcount gmp_pow gmp_powm gmp_prob_prime gmp_random
+gmp_scan0 gmp_scan1 gmp_setbit gmp_sign gmp_sqrt gmp_sqrtrem gmp_strval gmp_sub gmp_xor gmstrftime
+gregoriantojd gzclose gzcompress gzdeflate gzencode gzeof gzfile gzgetc gzgets gzgetss gzinflate
+gzopen gzpassthru gzputs gzread gzrewind gzseek gztell gzuncompress gzwrite header headers_list
+headers_sent hebrev hebrevc hexdec highlight_file highlight_string html_entity_decode htmlentities
+htmlspecialchars http_build_query hw_api_attribute hw_api_content hw_api_object hw_array2objrec
+hw_changeobject hw_children hw_childrenobj hw_close hw_connect hw_connection_info hw_cp
+hw_deleteobject hw_docbyanchor hw_docbyanchorobj hw_document_attributes hw_document_bodytag
+hw_document_content hw_document_setcontent hw_document_size hw_dummy hw_edittext hw_error
+hw_errormsg hw_free_document hw_getanchors hw_getanchorsobj hw_getandlock hw_getchildcoll
+hw_getchildcollobj hw_getchilddoccoll hw_getchilddoccollobj hw_getobject hw_getobjectbyquery
+hw_getobjectbyquerycoll hw_getobjectbyquerycollobj hw_getobjectbyqueryobj hw_getparents
+hw_getparentsobj hw_getrellink hw_getremote hw_getremotechildren hw_getsrcbydestobj hw_gettext
+hw_getusername hw_identify hw_incollections hw_info hw_inscoll hw_insdoc hw_insertanchors
+hw_insertdocument hw_insertobject hw_mapid hw_modifyobject hw_mv hw_new_document hw_objrec2array
+hw_output_document hw_pconnect hw_pipedocument hw_root hw_setlinkroot hw_stat hw_unlock hw_who
+hwapi_hgcsp hypot ibase_add_user ibase_affected_rows ibase_backup ibase_blob_add ibase_blob_cancel
+ibase_blob_close ibase_blob_create ibase_blob_echo ibase_blob_get ibase_blob_import ibase_blob_info
+ibase_blob_open ibase_close ibase_commit ibase_commit_ret ibase_connect ibase_db_info
+ibase_delete_user ibase_drop_db ibase_errcode ibase_errmsg ibase_execute ibase_fetch_assoc
+ibase_fetch_object ibase_fetch_row ibase_field_info ibase_free_event_handler ibase_free_query
+ibase_free_result ibase_gen_id ibase_maintain_db ibase_modify_user ibase_name_result
+ibase_num_fields ibase_num_params ibase_param_info ibase_pconnect ibase_prepare ibase_query
+ibase_restore ibase_rollback ibase_rollback_ret ibase_server_info ibase_service_attach
+ibase_service_detach ibase_set_event_handler ibase_timefmt ibase_trans ibase_wait_event iconv
+iconv_get_encoding iconv_mime_decode iconv_mime_decode_headers iconv_mime_encode iconv_set_encoding
+iconv_strlen iconv_strpos iconv_strrpos iconv_substr id3_get_frame_long_name
+id3_get_frame_short_name id3_get_genre_id id3_get_genre_list id3_get_genre_name id3_get_tag
+id3_get_version id3_remove_tag id3_set_tag idate ifx_affected_rows ifx_blobinfile_mode
+ifx_byteasvarchar ifx_close ifx_connect ifx_copy_blob ifx_create_blob ifx_create_char ifx_do
+ifx_error ifx_errormsg ifx_fetch_row ifx_fieldproperties ifx_fieldtypes ifx_free_blob ifx_free_char
+ifx_free_result ifx_get_blob ifx_get_char ifx_getsqlca ifx_htmltbl_result ifx_nullformat
+ifx_num_fields ifx_num_rows ifx_pconnect ifx_prepare ifx_query ifx_textasvarchar ifx_update_blob
+ifx_update_char ifxus_close_slob ifxus_create_slob ifxus_free_slob ifxus_open_slob ifxus_read_slob
+ifxus_seek_slob ifxus_tell_slob ifxus_write_slob ignore_user_abort image2wbmp
+image_type_to_extension image_type_to_mime_type imagealphablending imageantialias imagearc imagechar
+imagecharup imagecolorallocate imagecolorallocatealpha imagecolorat imagecolorclosest
+imagecolorclosestalpha imagecolorclosesthwb imagecolordeallocate imagecolorexact
+imagecolorexactalpha imagecolormatch imagecolorresolve imagecolorresolvealpha imagecolorset
+imagecolorsforindex imagecolorstotal imagecolortransparent imagecopy imagecopymerge
+imagecopymergegray imagecopyresampled imagecopyresized imagecreate imagecreatefromgd
+imagecreatefromgd2 imagecreatefromgd2part imagecreatefromgif imagecreatefromjpeg imagecreatefrompng
+imagecreatefromstring imagecreatefromwbmp imagecreatefromxbm imagecreatefromxpm imagecreatetruecolor
+imagedashedline imagedestroy imageellipse imagefill imagefilledarc imagefilledellipse
+imagefilledpolygon imagefilledrectangle imagefilltoborder imagefilter imagefontheight imagefontwidth
+imageftbbox imagefttext imagegammacorrect imagegd imagegd2 imagegif imageinterlace imageistruecolor
+imagejpeg imagelayereffect imageline imageloadfont imagepalettecopy imagepng imagepolygon
+imagepsbbox imagepscopyfont imagepsencodefont imagepsextendfont imagepsfreefont imagepsloadfont
+imagepsslantfont imagepstext imagerectangle imagerotate imagesavealpha imagesetbrush imagesetpixel
+imagesetstyle imagesetthickness imagesettile imagestring imagestringup imagesx imagesy
+imagetruecolortopalette imagettfbbox imagettftext imagetypes imagewbmp imagexbm imap_8bit
+imap_alerts imap_append imap_base64 imap_binary imap_body imap_bodystruct imap_check
+imap_clearflag_full imap_close imap_createmailbox imap_delete imap_deletemailbox imap_errors
+imap_expunge imap_fetch_overview imap_fetchbody imap_fetchheader imap_fetchstructure imap_get_quota
+imap_get_quotaroot imap_getacl imap_getmailboxes imap_getsubscribed imap_header imap_headerinfo
+imap_headers imap_last_error imap_list imap_listmailbox imap_listscan imap_listsubscribed imap_lsub
+imap_mail imap_mail_compose imap_mail_copy imap_mail_move imap_mailboxmsginfo
+imap_mime_header_decode imap_msgno imap_num_msg imap_num_recent imap_open imap_ping imap_qprint
+imap_renamemailbox imap_reopen imap_rfc822_parse_adrlist imap_rfc822_parse_headers
+imap_rfc822_write_address imap_scanmailbox imap_search imap_set_quota imap_setacl imap_setflag_full
+imap_sort imap_status imap_subscribe imap_thread imap_timeout imap_uid imap_undelete
+imap_unsubscribe imap_utf7_decode imap_utf7_encode imap_utf8 implode import_request_variables
+in_array inet_ntop inet_pton ingres_autocommit ingres_close ingres_commit ingres_connect
+ingres_fetch_array ingres_fetch_object ingres_fetch_row ingres_field_length ingres_field_name
+ingres_field_nullable ingres_field_precision ingres_field_scale ingres_field_type ingres_num_fields
+ingres_num_rows ingres_pconnect ingres_query ingres_rollback ini_alter ini_get ini_get_all
+ini_restore ini_set interface_exists intval ip2long iptcembed iptcparse ircg_channel_mode
+ircg_disconnect ircg_eval_ecmascript_params ircg_fetch_error_msg ircg_get_username ircg_html_encode
+ircg_ignore_add ircg_ignore_del ircg_invite ircg_is_conn_alive ircg_join ircg_kick ircg_list
+ircg_lookup_format_messages ircg_lusers ircg_msg ircg_names ircg_nick ircg_nickname_escape
+ircg_nickname_unescape ircg_notice ircg_oper ircg_part ircg_pconnect ircg_register_format_messages
+ircg_set_current ircg_set_file ircg_set_on_die ircg_topic ircg_who ircg_whois is_a is_array is_bool
+is_callable is_dir is_double is_executable is_file is_finite is_float is_infinite is_int is_integer
+is_link is_long is_nan is_null is_numeric is_object is_readable is_real is_resource is_scalar
+is_soap_fault is_string is_subclass_of is_uploaded_file is_writable is_writeable isset
+iterator_count iterator_to_array java_last_exception_clear java_last_exception_get jddayofweek
+jdmonthname jdtofrench jdtogregorian jdtojewish jdtojulian jdtounix jewishtojd join jpeg2wbmp
+juliantojd key krsort ksort lcg_value ldap_8859_to_t61 ldap_add ldap_bind ldap_close ldap_compare
+ldap_connect ldap_count_entries ldap_delete ldap_dn2ufn ldap_err2str ldap_errno ldap_error
+ldap_explode_dn ldap_first_attribute ldap_first_entry ldap_first_reference ldap_free_result
+ldap_get_attributes ldap_get_dn ldap_get_entries ldap_get_option ldap_get_values ldap_get_values_len
+ldap_list ldap_mod_add ldap_mod_del ldap_mod_replace ldap_modify ldap_next_attribute ldap_next_entry
+ldap_next_reference ldap_parse_reference ldap_parse_result ldap_read ldap_rename ldap_sasl_bind
+ldap_search ldap_set_option ldap_set_rebind_proc ldap_sort ldap_start_tls ldap_t61_to_8859
+ldap_unbind levenshtein link linkinfo list localeconv localtime log log10 log1p long2ip lstat ltrim
+lzf_compress lzf_decompress lzf_optimized_for mail mailparse_determine_best_xfer_encoding
+mailparse_msg_create mailparse_msg_extract_part mailparse_msg_extract_part_file mailparse_msg_free
+mailparse_msg_get_part mailparse_msg_get_part_data mailparse_msg_get_structure mailparse_msg_parse
+mailparse_msg_parse_file mailparse_rfc822_parse_addresses mailparse_stream_encode
+mailparse_uudecode_all main max mb_convert_case mb_convert_encoding mb_convert_kana
+mb_convert_variables mb_decode_mimeheader mb_decode_numericentity mb_detect_encoding mb_detect_order
+mb_encode_mimeheader mb_encode_numericentity mb_ereg mb_ereg_match mb_ereg_replace mb_ereg_search
+mb_ereg_search_getpos mb_ereg_search_getregs mb_ereg_search_init mb_ereg_search_pos
+mb_ereg_search_regs mb_ereg_search_setpos mb_eregi mb_eregi_replace mb_get_info mb_http_input
+mb_http_output mb_internal_encoding mb_language mb_list_encodings mb_output_handler mb_parse_str
+mb_preferred_mime_name mb_regex_encoding mb_regex_set_options mb_send_mail mb_split mb_strcut
+mb_strimwidth mb_strlen mb_strpos mb_strrpos mb_strtolower mb_strtoupper mb_strwidth
+mb_substitute_character mb_substr mb_substr_count mcal_append_event mcal_close mcal_create_calendar
+mcal_date_compare mcal_date_valid mcal_day_of_week mcal_day_of_year mcal_days_in_month
+mcal_delete_calendar mcal_delete_event mcal_event_add_attribute mcal_event_init mcal_event_set_alarm
+mcal_event_set_category mcal_event_set_class mcal_event_set_description mcal_event_set_end
+mcal_event_set_recur_daily mcal_event_set_recur_monthly_mday mcal_event_set_recur_monthly_wday
+mcal_event_set_recur_none mcal_event_set_recur_weekly mcal_event_set_recur_yearly
+mcal_event_set_start mcal_event_set_title mcal_expunge mcal_fetch_current_stream_event
+mcal_fetch_event mcal_is_leap_year mcal_list_alarms mcal_list_events mcal_next_recurrence mcal_open
+mcal_popen mcal_rename_calendar mcal_reopen mcal_snooze mcal_store_event mcal_time_valid
+mcal_week_of_year mcrypt_cbc mcrypt_cfb mcrypt_create_iv mcrypt_decrypt mcrypt_ecb
+mcrypt_enc_get_algorithms_name mcrypt_enc_get_block_size mcrypt_enc_get_iv_size
+mcrypt_enc_get_key_size mcrypt_enc_get_modes_name mcrypt_enc_get_supported_key_sizes
+mcrypt_enc_is_block_algorithm mcrypt_enc_is_block_algorithm_mode mcrypt_enc_is_block_mode
+mcrypt_enc_self_test mcrypt_encrypt mcrypt_generic mcrypt_generic_deinit mcrypt_generic_end
+mcrypt_generic_init mcrypt_get_block_size mcrypt_get_cipher_name mcrypt_get_iv_size
+mcrypt_get_key_size mcrypt_list_algorithms mcrypt_list_modes mcrypt_module_close
+mcrypt_module_get_algo_block_size mcrypt_module_get_algo_key_size
+mcrypt_module_get_supported_key_sizes mcrypt_module_is_block_algorithm
+mcrypt_module_is_block_algorithm_mode mcrypt_module_is_block_mode mcrypt_module_open
+mcrypt_module_self_test mcrypt_ofb mcve_adduser mcve_adduserarg mcve_bt mcve_checkstatus mcve_chkpwd
+mcve_chngpwd mcve_completeauthorizations mcve_connect mcve_connectionerror mcve_deleteresponse
+mcve_deletetrans mcve_deleteusersetup mcve_deluser mcve_destroyconn mcve_destroyengine
+mcve_disableuser mcve_edituser mcve_enableuser mcve_force mcve_getcell mcve_getcellbynum
+mcve_getcommadelimited mcve_getheader mcve_getuserarg mcve_getuserparam mcve_gft mcve_gl mcve_gut
+mcve_initconn mcve_initengine mcve_initusersetup mcve_iscommadelimited mcve_liststats mcve_listusers
+mcve_maxconntimeout mcve_monitor mcve_numcolumns mcve_numrows mcve_override mcve_parsecommadelimited
+mcve_ping mcve_preauth mcve_preauthcompletion mcve_qc mcve_responseparam mcve_return mcve_returncode
+mcve_returnstatus mcve_sale mcve_setblocking mcve_setdropfile mcve_setip mcve_setssl
+mcve_setssl_files mcve_settimeout mcve_settle mcve_text_avs mcve_text_code mcve_text_cv
+mcve_transactionauth mcve_transactionavs mcve_transactionbatch mcve_transactioncv mcve_transactionid
+mcve_transactionitem mcve_transactionssent mcve_transactiontext mcve_transinqueue mcve_transnew
+mcve_transparam mcve_transsend mcve_ub mcve_uwait mcve_verifyconnection mcve_verifysslcert mcve_void
+md5 md5_file mdecrypt_generic memcache_debug memory_get_usage metaphone method_exists mhash
+mhash_count mhash_get_block_size mhash_get_hash_name mhash_keygen_s2k microtime mime_content_type
+min ming_setcubicthreshold ming_setscale ming_useswfversion mkdir mktime money_format
+move_uploaded_file msession_connect msession_count msession_create msession_destroy
+msession_disconnect msession_find msession_get msession_get_array msession_get_data msession_inc
+msession_list msession_listvar msession_lock msession_plugin msession_randstr msession_set
+msession_set_array msession_set_data msession_timeout msession_uniq msession_unlock msg_get_queue
+msg_receive msg_remove_queue msg_send msg_set_queue msg_stat_queue msql msql_affected_rows
+msql_close msql_connect msql_create_db msql_createdb msql_data_seek msql_db_query msql_dbname
+msql_drop_db msql_error msql_fetch_array msql_fetch_field msql_fetch_object msql_fetch_row
+msql_field_flags msql_field_len msql_field_name msql_field_seek msql_field_table msql_field_type
+msql_fieldflags msql_fieldlen msql_fieldname msql_fieldtable msql_fieldtype msql_free_result
+msql_list_dbs msql_list_fields msql_list_tables msql_num_fields msql_num_rows msql_numfields
+msql_numrows msql_pconnect msql_query msql_regcase msql_result msql_select_db msql_tablename
+mssql_bind mssql_close mssql_connect mssql_data_seek mssql_execute mssql_fetch_array
+mssql_fetch_assoc mssql_fetch_batch mssql_fetch_field mssql_fetch_object mssql_fetch_row
+mssql_field_length mssql_field_name mssql_field_seek mssql_field_type mssql_free_result
+mssql_free_statement mssql_get_last_message mssql_guid_string mssql_init mssql_min_error_severity
+mssql_min_message_severity mssql_next_result mssql_num_fields mssql_num_rows mssql_pconnect
+mssql_query mssql_result mssql_rows_affected mssql_select_db mt_getrandmax mt_rand mt_srand
+muscat_close muscat_get muscat_give muscat_setup muscat_setup_net mysql_affected_rows
+mysql_change_user mysql_client_encoding mysql_close mysql_connect mysql_create_db mysql_data_seek
+mysql_db_name mysql_db_query mysql_drop_db mysql_errno mysql_error mysql_escape_string
+mysql_fetch_array mysql_fetch_assoc mysql_fetch_field mysql_fetch_lengths mysql_fetch_object
+mysql_fetch_row mysql_field_flags mysql_field_len mysql_field_name mysql_field_seek
+mysql_field_table mysql_field_type mysql_free_result mysql_get_client_info mysql_get_host_info
+mysql_get_proto_info mysql_get_server_info mysql_info mysql_insert_id mysql_list_dbs
+mysql_list_fields mysql_list_processes mysql_list_tables mysql_num_fields mysql_num_rows
+mysql_pconnect mysql_ping mysql_query mysql_real_escape_string mysql_result mysql_select_db
+mysql_stat mysql_tablename mysql_thread_id mysql_unbuffered_query mysqli_affected_rows
+mysqli_autocommit mysqli_bind_param mysqli_bind_result mysqli_change_user mysqli_character_set_name
+mysqli_client_encoding mysqli_close mysqli_commit mysqli_connect mysqli_connect_errno
+mysqli_connect_error mysqli_data_seek mysqli_debug mysqli_disable_reads_from_master
+mysqli_disable_rpl_parse mysqli_dump_debug_info mysqli_embedded_connect
+mysqli_enable_reads_from_master mysqli_enable_rpl_parse mysqli_errno mysqli_error
+mysqli_escape_string mysqli_execute mysqli_fetch mysqli_fetch_array mysqli_fetch_assoc
+mysqli_fetch_field mysqli_fetch_field_direct mysqli_fetch_fields mysqli_fetch_lengths
+mysqli_fetch_object mysqli_fetch_row mysqli_field_count mysqli_field_seek mysqli_field_tell
+mysqli_free_result mysqli_get_client_info mysqli_get_client_version mysqli_get_host_info
+mysqli_get_metadata mysqli_get_proto_info mysqli_get_server_info mysqli_get_server_version
+mysqli_info mysqli_init mysqli_insert_id mysqli_kill mysqli_master_query mysqli_more_results
+mysqli_multi_query mysqli_next_result mysqli_num_fields mysqli_num_rows mysqli_options
+mysqli_param_count mysqli_ping mysqli_prepare mysqli_query mysqli_real_connect
+mysqli_real_escape_string mysqli_real_query mysqli_report mysqli_rollback mysqli_rpl_parse_enabled
+mysqli_rpl_probe mysqli_rpl_query_type mysqli_select_db mysqli_send_long_data mysqli_send_query
+mysqli_server_end mysqli_server_init mysqli_set_opt mysqli_sqlstate mysqli_ssl_set mysqli_stat
+mysqli_stmt_affected_rows mysqli_stmt_bind_param mysqli_stmt_bind_result mysqli_stmt_close
+mysqli_stmt_data_seek mysqli_stmt_errno mysqli_stmt_error mysqli_stmt_execute mysqli_stmt_fetch
+mysqli_stmt_free_result mysqli_stmt_init mysqli_stmt_num_rows mysqli_stmt_param_count
+mysqli_stmt_prepare mysqli_stmt_reset mysqli_stmt_result_metadata mysqli_stmt_send_long_data
+mysqli_stmt_sqlstate mysqli_stmt_store_result mysqli_store_result mysqli_thread_id
+mysqli_thread_safe mysqli_use_result mysqli_warning_count natcasesort natsort ncurses_addch
+ncurses_addchnstr ncurses_addchstr ncurses_addnstr ncurses_addstr ncurses_assume_default_colors
+ncurses_attroff ncurses_attron ncurses_attrset ncurses_baudrate ncurses_beep ncurses_bkgd
+ncurses_bkgdset ncurses_border ncurses_bottom_panel ncurses_can_change_color ncurses_cbreak
+ncurses_clear ncurses_clrtobot ncurses_clrtoeol ncurses_color_content ncurses_color_set
+ncurses_curs_set ncurses_def_prog_mode ncurses_def_shell_mode ncurses_define_key ncurses_del_panel
+ncurses_delay_output ncurses_delch ncurses_deleteln ncurses_delwin ncurses_doupdate ncurses_echo
+ncurses_echochar ncurses_end ncurses_erase ncurses_erasechar ncurses_filter ncurses_flash
+ncurses_flushinp ncurses_getch ncurses_getmaxyx ncurses_getmouse ncurses_getyx ncurses_halfdelay
+ncurses_has_colors ncurses_has_ic ncurses_has_il ncurses_has_key ncurses_hide_panel ncurses_hline
+ncurses_inch ncurses_init ncurses_init_color ncurses_init_pair ncurses_insch ncurses_insdelln
+ncurses_insertln ncurses_insstr ncurses_instr ncurses_isendwin ncurses_keyok ncurses_keypad
+ncurses_killchar ncurses_longname ncurses_meta ncurses_mouse_trafo ncurses_mouseinterval
+ncurses_mousemask ncurses_move ncurses_move_panel ncurses_mvaddch ncurses_mvaddchnstr
+ncurses_mvaddchstr ncurses_mvaddnstr ncurses_mvaddstr ncurses_mvcur ncurses_mvdelch ncurses_mvgetch
+ncurses_mvhline ncurses_mvinch ncurses_mvvline ncurses_mvwaddstr ncurses_napms ncurses_new_panel
+ncurses_newpad ncurses_newwin ncurses_nl ncurses_nocbreak ncurses_noecho ncurses_nonl
+ncurses_noqiflush ncurses_noraw ncurses_pair_content ncurses_panel_above ncurses_panel_below
+ncurses_panel_window ncurses_pnoutrefresh ncurses_prefresh ncurses_putp ncurses_qiflush ncurses_raw
+ncurses_refresh ncurses_replace_panel ncurses_reset_prog_mode ncurses_reset_shell_mode
+ncurses_resetty ncurses_savetty ncurses_scr_dump ncurses_scr_init ncurses_scr_restore
+ncurses_scr_set ncurses_scrl ncurses_show_panel ncurses_slk_attr ncurses_slk_attroff
+ncurses_slk_attron ncurses_slk_attrset ncurses_slk_clear ncurses_slk_color ncurses_slk_init
+ncurses_slk_noutrefresh ncurses_slk_refresh ncurses_slk_restore ncurses_slk_set ncurses_slk_touch
+ncurses_standend ncurses_standout ncurses_start_color ncurses_termattrs ncurses_termname
+ncurses_timeout ncurses_top_panel ncurses_typeahead ncurses_ungetch ncurses_ungetmouse
+ncurses_update_panels ncurses_use_default_colors ncurses_use_env ncurses_use_extended_names
+ncurses_vidattr ncurses_vline ncurses_waddch ncurses_waddstr ncurses_wattroff ncurses_wattron
+ncurses_wattrset ncurses_wborder ncurses_wclear ncurses_wcolor_set ncurses_werase ncurses_wgetch
+ncurses_whline ncurses_wmouse_trafo ncurses_wmove ncurses_wnoutrefresh ncurses_wrefresh
+ncurses_wstandend ncurses_wstandout ncurses_wvline next ngettext nl2br nl_langinfo notes_body
+notes_copy_db notes_create_db notes_create_note notes_drop_db notes_find_note notes_header_info
+notes_list_msgs notes_mark_read notes_mark_unread notes_nav_create notes_search notes_unread
+notes_version nsapi_request_headers nsapi_response_headers nsapi_virtual number_format ob_clean
+ob_end_clean ob_end_flush ob_flush ob_get_clean ob_get_contents ob_get_flush ob_get_length
+ob_get_level ob_get_status ob_gzhandler ob_iconv_handler ob_implicit_flush ob_list_handlers ob_start
+ob_tidyhandler oci_bind_by_name oci_cancel oci_close oci_commit oci_connect oci_define_by_name
+oci_error oci_execute oci_fetch oci_fetch_all oci_fetch_array oci_fetch_assoc oci_fetch_object
+oci_fetch_row oci_field_is_null oci_field_name oci_field_precision oci_field_scale oci_field_size
+oci_field_type oci_field_type_raw oci_free_statement oci_internal_debug oci_lob_copy
+oci_lob_is_equal oci_new_collection oci_new_connect oci_new_cursor oci_new_descriptor oci_num_fields
+oci_num_rows oci_parse oci_password_change oci_pconnect oci_result oci_rollback oci_server_version
+oci_set_prefetch oci_statement_type ocibindbyname ocicancel ocicloselob ocicollappend ocicollassign
+ocicollassignelem ocicollgetelem ocicollmax ocicollsize ocicolltrim ocicolumnisnull ocicolumnname
+ocicolumnprecision ocicolumnscale ocicolumnsize ocicolumntype ocicolumntyperaw ocicommit
+ocidefinebyname ocierror ociexecute ocifetch ocifetchinto ocifetchstatement ocifreecollection
+ocifreecursor ocifreedesc ocifreestatement ociinternaldebug ociloadlob ocilogoff ocilogon
+ocinewcollection ocinewcursor ocinewdescriptor ocinlogon ocinumcols ociparse ociplogon ociresult
+ocirollback ocirowcount ocisavelob ocisavelobfile ociserverversion ocisetprefetch ocistatementtype
+ociwritelobtofile ociwritetemporarylob octdec odbc_autocommit odbc_binmode odbc_close odbc_close_all
+odbc_columnprivileges odbc_columns odbc_commit odbc_connect odbc_cursor odbc_data_source odbc_do
+odbc_error odbc_errormsg odbc_exec odbc_execute odbc_fetch_array odbc_fetch_into odbc_fetch_object
+odbc_fetch_row odbc_field_len odbc_field_name odbc_field_num odbc_field_precision odbc_field_scale
+odbc_field_type odbc_foreignkeys odbc_free_result odbc_gettypeinfo odbc_longreadlen odbc_next_result
+odbc_num_fields odbc_num_rows odbc_pconnect odbc_prepare odbc_primarykeys odbc_procedurecolumns
+odbc_procedures odbc_result odbc_result_all odbc_rollback odbc_setoption odbc_specialcolumns
+odbc_statistics odbc_tableprivileges odbc_tables openal_buffer_create openal_buffer_data
+openal_buffer_destroy openal_buffer_get openal_buffer_loadwav openal_context_create
+openal_context_current openal_context_destroy openal_context_process openal_context_suspend
+openal_device_close openal_device_open openal_listener_get openal_listener_set openal_source_create
+openal_source_destroy openal_source_get openal_source_pause openal_source_play openal_source_rewind
+openal_source_set openal_source_stop openal_stream opendir openlog openssl_csr_export
+openssl_csr_export_to_file openssl_csr_new openssl_csr_sign openssl_error_string openssl_free_key
+openssl_get_privatekey openssl_get_publickey openssl_open openssl_pkcs7_decrypt
+openssl_pkcs7_encrypt openssl_pkcs7_sign openssl_pkcs7_verify openssl_pkey_export
+openssl_pkey_export_to_file openssl_pkey_get_private openssl_pkey_get_public openssl_pkey_new
+openssl_private_decrypt openssl_private_encrypt openssl_public_decrypt openssl_public_encrypt
+openssl_seal openssl_sign openssl_verify openssl_x509_check_private_key openssl_x509_checkpurpose
+openssl_x509_export openssl_x509_export_to_file openssl_x509_free openssl_x509_parse
+openssl_x509_read ora_bind ora_close ora_columnname ora_columnsize ora_columntype ora_commit
+ora_commitoff ora_commiton ora_do ora_error ora_errorcode ora_exec ora_fetch ora_fetch_into
+ora_getcolumn ora_logoff ora_logon ora_numcols ora_numrows ora_open ora_parse ora_plogon
+ora_rollback ord output_add_rewrite_var output_reset_rewrite_vars overload override_function
+ovrimos_close ovrimos_commit ovrimos_connect ovrimos_cursor ovrimos_exec ovrimos_execute
+ovrimos_fetch_into ovrimos_fetch_row ovrimos_field_len ovrimos_field_name ovrimos_field_num
+ovrimos_field_type ovrimos_free_result ovrimos_longreadlen ovrimos_num_fields ovrimos_num_rows
+ovrimos_prepare ovrimos_result ovrimos_result_all ovrimos_rollback pack parse_ini_file parse_str
+parse_url parsekit_compile_file parsekit_compile_string parsekit_func_arginfo passthru pathinfo
+pclose pcntl_alarm pcntl_exec pcntl_fork pcntl_getpriority pcntl_setpriority pcntl_signal pcntl_wait
+pcntl_waitpid pcntl_wexitstatus pcntl_wifexited pcntl_wifsignaled pcntl_wifstopped pcntl_wstopsig
+pcntl_wtermsig pdf_add_annotation pdf_add_bookmark pdf_add_launchlink pdf_add_locallink pdf_add_note
+pdf_add_outline pdf_add_pdflink pdf_add_thumbnail pdf_add_weblink pdf_arc pdf_arcn pdf_attach_file
+pdf_begin_page pdf_begin_pattern pdf_begin_template pdf_circle pdf_clip pdf_close pdf_close_image
+pdf_close_pdi pdf_close_pdi_page pdf_closepath pdf_closepath_fill_stroke pdf_closepath_stroke
+pdf_concat pdf_continue_text pdf_curveto pdf_delete pdf_end_page pdf_end_pattern pdf_end_template
+pdf_endpath pdf_fill pdf_fill_stroke pdf_findfont pdf_get_buffer pdf_get_font pdf_get_fontname
+pdf_get_fontsize pdf_get_image_height pdf_get_image_width pdf_get_majorversion pdf_get_minorversion
+pdf_get_parameter pdf_get_pdi_parameter pdf_get_pdi_value pdf_get_value pdf_initgraphics pdf_lineto
+pdf_makespotcolor pdf_moveto pdf_new pdf_open pdf_open_ccitt pdf_open_file pdf_open_gif
+pdf_open_image pdf_open_image_file pdf_open_jpeg pdf_open_memory_image pdf_open_pdi
+pdf_open_pdi_page pdf_open_png pdf_open_tiff pdf_place_image pdf_place_pdi_page pdf_rect pdf_restore
+pdf_rotate pdf_save pdf_scale pdf_set_border_color pdf_set_border_dash pdf_set_border_style
+pdf_set_char_spacing pdf_set_duration pdf_set_font pdf_set_horiz_scaling pdf_set_info
+pdf_set_info_author pdf_set_info_creator pdf_set_info_keywords pdf_set_info_subject
+pdf_set_info_title pdf_set_leading pdf_set_parameter pdf_set_text_matrix pdf_set_text_pos
+pdf_set_text_rendering pdf_set_text_rise pdf_set_value pdf_set_word_spacing pdf_setcolor pdf_setdash
+pdf_setflat pdf_setfont pdf_setgray pdf_setgray_fill pdf_setgray_stroke pdf_setlinecap
+pdf_setlinejoin pdf_setlinewidth pdf_setmatrix pdf_setmiterlimit pdf_setpolydash pdf_setrgbcolor
+pdf_setrgbcolor_fill pdf_setrgbcolor_stroke pdf_show pdf_show_boxed pdf_show_xy pdf_skew
+pdf_stringwidth pdf_stroke pdf_translate pfpro_cleanup pfpro_init pfpro_process pfpro_process_raw
+pfpro_version pfsockopen pg_affected_rows pg_cancel_query pg_client_encoding pg_close pg_connect
+pg_connection_busy pg_connection_reset pg_connection_status pg_convert pg_copy_from pg_copy_to
+pg_dbname pg_delete pg_end_copy pg_escape_bytea pg_escape_string pg_fetch_all pg_fetch_array
+pg_fetch_assoc pg_fetch_object pg_fetch_result pg_fetch_row pg_field_is_null pg_field_name
+pg_field_num pg_field_prtlen pg_field_size pg_field_type pg_free_result pg_get_notify pg_get_pid
+pg_get_result pg_host pg_insert pg_last_error pg_last_notice pg_last_oid pg_lo_close pg_lo_create
+pg_lo_export pg_lo_import pg_lo_open pg_lo_read pg_lo_read_all pg_lo_seek pg_lo_tell pg_lo_unlink
+pg_lo_write pg_meta_data pg_num_fields pg_num_rows pg_options pg_parameter_status pg_pconnect
+pg_ping pg_port pg_put_line pg_query pg_result_error pg_result_seek pg_result_status pg_select
+pg_send_query pg_set_client_encoding pg_trace pg_tty pg_unescape_bytea pg_untrace pg_update
+pg_version php_check_syntax php_ini_scanned_files php_logo_guid php_register_url_stream_wrapper
+php_sapi_name php_stream_can_cast php_stream_cast php_stream_close php_stream_closedir
+php_stream_copy_to_mem php_stream_copy_to_stream php_stream_eof php_stream_filter_register_factory
+php_stream_filter_unregister_factory php_stream_flush php_stream_fopen_from_file
+php_stream_fopen_temporary_file php_stream_fopen_tmpfile php_stream_getc php_stream_gets
+php_stream_is php_stream_is_persistent php_stream_make_seekable php_stream_open_wrapper
+php_stream_open_wrapper_as_file php_stream_open_wrapper_ex php_stream_opendir php_stream_passthru
+php_stream_read php_stream_readdir php_stream_rewinddir php_stream_seek
+php_stream_sock_open_from_socket php_stream_sock_open_host php_stream_sock_open_unix php_stream_stat
+php_stream_stat_path php_stream_tell php_stream_write php_strip_whitespace php_uname
+php_unregister_url_stream_wrapper phpcredits phpinfo phpversion pi png2wbmp popen pos posix_ctermid
+posix_get_last_error posix_getcwd posix_getegid posix_geteuid posix_getgid posix_getgrgid
+posix_getgrnam posix_getgroups posix_getlogin posix_getpgid posix_getpgrp posix_getpid posix_getppid
+posix_getpwnam posix_getpwuid posix_getrlimit posix_getsid posix_getuid posix_isatty posix_kill
+posix_mkfifo posix_setegid posix_seteuid posix_setgid posix_setpgid posix_setsid posix_setuid
+posix_strerror posix_times posix_ttyname posix_uname pow preg_grep preg_match preg_match_all
+preg_quote preg_replace preg_replace_callback preg_split prev print print_r printer_abort
+printer_close printer_create_brush printer_create_dc printer_create_font printer_create_pen
+printer_delete_brush printer_delete_dc printer_delete_font printer_delete_pen printer_draw_bmp
+printer_draw_chord printer_draw_elipse printer_draw_line printer_draw_pie printer_draw_rectangle
+printer_draw_roundrect printer_draw_text printer_end_doc printer_end_page printer_get_option
+printer_list printer_logical_fontheight printer_open printer_select_brush printer_select_font
+printer_select_pen printer_set_option printer_start_doc printer_start_page printer_write printf
+proc_close proc_get_status proc_nice proc_open proc_terminate pspell_add_to_personal
+pspell_add_to_session pspell_check pspell_clear_session pspell_config_create pspell_config_data_dir
+pspell_config_dict_dir pspell_config_ignore pspell_config_mode pspell_config_personal
+pspell_config_repl pspell_config_runtogether pspell_config_save_repl pspell_new pspell_new_config
+pspell_new_personal pspell_save_wordlist pspell_store_replacement pspell_suggest putenv qdom_error
+qdom_tree quoted_printable_decode quotemeta rad2deg rand range rar_close rar_entry_get rar_list
+rar_open rawurldecode rawurlencode read_exif_data readdir readfile readgzfile readline
+readline_add_history readline_callback_handler_install readline_callback_handler_remove
+readline_callback_read_char readline_clear_history readline_completion_function readline_info
+readline_list_history readline_on_new_line readline_read_history readline_redisplay
+readline_write_history readlink realpath recode recode_file recode_string register_shutdown_function
+register_tick_function rename rename_function reset restore_error_handler restore_exception_handler
+restore_include_path rewind rewinddir rmdir round rsort rtrim scandir sem_acquire sem_get
+sem_release sem_remove serialize sesam_affected_rows sesam_commit sesam_connect sesam_diagnostic
+sesam_disconnect sesam_errormsg sesam_execimm sesam_fetch_array sesam_fetch_result sesam_fetch_row
+sesam_field_array sesam_field_name sesam_free_result sesam_num_fields sesam_query sesam_rollback
+sesam_seek_row sesam_settransaction session_cache_expire session_cache_limiter session_commit
+session_decode session_destroy session_encode session_get_cookie_params session_id
+session_is_registered session_module_name session_name session_regenerate_id session_register
+session_save_path session_set_cookie_params session_set_save_handler session_start
+session_unregister session_unset session_write_close set_error_handler set_exception_handler
+set_file_buffer set_include_path set_magic_quotes_runtime set_time_limit setcookie setlocale
+setrawcookie settype sha1 sha1_file shell_exec shm_attach shm_detach shm_get_var shm_put_var
+shm_remove shm_remove_var shmop_close shmop_delete shmop_open shmop_read shmop_size shmop_write
+show_source shuffle similar_text simplexml_import_dom simplexml_load_file simplexml_load_string sin
+sinh sizeof sleep snmp_get_quick_print snmp_get_valueretrieval snmp_read_mib snmp_set_enum_print
+snmp_set_oid_numeric_print snmp_set_quick_print snmp_set_valueretrieval snmpget snmpgetnext
+snmprealwalk snmpset snmpwalk snmpwalkoid socket_accept socket_bind socket_clear_error socket_close
+socket_connect socket_create socket_create_listen socket_create_pair socket_get_option
+socket_get_status socket_getpeername socket_getsockname socket_last_error socket_listen socket_read
+socket_recv socket_recvfrom socket_select socket_send socket_sendto socket_set_block
+socket_set_blocking socket_set_nonblock socket_set_option socket_set_timeout socket_shutdown
+socket_strerror socket_write sort soundex spl_classes split spliti sprintf sql_regcase
+sqlite_array_query sqlite_busy_timeout sqlite_changes sqlite_close sqlite_column
+sqlite_create_aggregate sqlite_create_function sqlite_current sqlite_error_string
+sqlite_escape_string sqlite_exec sqlite_factory sqlite_fetch_all sqlite_fetch_array
+sqlite_fetch_column_types sqlite_fetch_object sqlite_fetch_single sqlite_fetch_string
+sqlite_field_name sqlite_has_more sqlite_has_prev sqlite_last_error sqlite_last_insert_rowid
+sqlite_libencoding sqlite_libversion sqlite_next sqlite_num_fields sqlite_num_rows sqlite_open
+sqlite_popen sqlite_prev sqlite_query sqlite_rewind sqlite_seek sqlite_single_query
+sqlite_udf_decode_binary sqlite_udf_encode_binary sqlite_unbuffered_query sqrt srand sscanf
+ssh2_auth_none ssh2_auth_password ssh2_auth_pubkey_file ssh2_connect ssh2_exec ssh2_fetch_stream
+ssh2_fingerprint ssh2_methods_negotiated ssh2_scp_recv ssh2_scp_send ssh2_sftp ssh2_sftp_lstat
+ssh2_sftp_mkdir ssh2_sftp_readlink ssh2_sftp_realpath ssh2_sftp_rename ssh2_sftp_rmdir
+ssh2_sftp_stat ssh2_sftp_symlink ssh2_sftp_unlink ssh2_shell ssh2_tunnel stat str_ireplace str_pad
+str_repeat str_replace str_rot13 str_shuffle str_split str_word_count strcasecmp strchr strcmp
+strcoll strcspn stream_context_create stream_context_get_default stream_context_get_options
+stream_context_set_option stream_context_set_params stream_copy_to_stream stream_filter_append
+stream_filter_prepend stream_filter_register stream_filter_remove stream_get_contents
+stream_get_filters stream_get_line stream_get_meta_data stream_get_transports stream_get_wrappers
+stream_register_wrapper stream_select stream_set_blocking stream_set_timeout stream_set_write_buffer
+stream_socket_accept stream_socket_client stream_socket_enable_crypto stream_socket_get_name
+stream_socket_pair stream_socket_recvfrom stream_socket_sendto stream_socket_server
+stream_wrapper_register stream_wrapper_restore stream_wrapper_unregister strftime strip_tags
+stripcslashes stripos stripslashes stristr strlen strnatcasecmp strnatcmp strncasecmp strncmp
+strpbrk strpos strptime strrchr strrev strripos strrpos strspn strstr strtok strtolower strtotime
+strtoupper strtr strval substr substr_compare substr_count substr_replace swf_actiongeturl
+swf_actiongotoframe swf_actiongotolabel swf_actionnextframe swf_actionplay swf_actionprevframe
+swf_actionsettarget swf_actionstop swf_actiontogglequality swf_actionwaitforframe
+swf_addbuttonrecord swf_addcolor swf_closefile swf_definebitmap swf_definefont swf_defineline
+swf_definepoly swf_definerect swf_definetext swf_endbutton swf_enddoaction swf_endshape
+swf_endsymbol swf_fontsize swf_fontslant swf_fonttracking swf_getbitmapinfo swf_getfontinfo
+swf_getframe swf_labelframe swf_lookat swf_modifyobject swf_mulcolor swf_nextid swf_oncondition
+swf_openfile swf_ortho swf_ortho2 swf_perspective swf_placeobject swf_polarview swf_popmatrix
+swf_posround swf_pushmatrix swf_removeobject swf_rotate swf_scale swf_setfont swf_setframe
+swf_shapearc swf_shapecurveto swf_shapecurveto3 swf_shapefillbitmapclip swf_shapefillbitmaptile
+swf_shapefilloff swf_shapefillsolid swf_shapelinesolid swf_shapelineto swf_shapemoveto swf_showframe
+swf_startbutton swf_startdoaction swf_startshape swf_startsymbol swf_textwidth swf_translate
+swf_viewport swfaction swfbitmap swfbutton swfbutton_keypress swfdisplayitem swffill swffont
+swfgradient swfmorph swfmovie swfshape swfsprite swftext swftextfield sybase_affected_rows
+sybase_close sybase_connect sybase_data_seek sybase_deadlock_retry_count sybase_fetch_array
+sybase_fetch_assoc sybase_fetch_field sybase_fetch_object sybase_fetch_row sybase_field_seek
+sybase_free_result sybase_get_last_message sybase_min_client_severity sybase_min_error_severity
+sybase_min_message_severity sybase_min_server_severity sybase_num_fields sybase_num_rows
+sybase_pconnect sybase_query sybase_result sybase_select_db sybase_set_message_handler
+sybase_unbuffered_query symlink syslog system tan tanh tcpwrap_check tempnam textdomain
+tidy_access_count tidy_clean_repair tidy_config_count tidy_diagnose tidy_error_count tidy_get_body
+tidy_get_config tidy_get_error_buffer tidy_get_head tidy_get_html tidy_get_html_ver tidy_get_output
+tidy_get_release tidy_get_root tidy_get_status tidy_getopt tidy_is_xhtml tidy_is_xml
+tidy_load_config tidy_parse_file tidy_parse_string tidy_repair_file tidy_repair_string
+tidy_reset_config tidy_save_config tidy_set_encoding tidy_setopt tidy_warning_count time
+time_nanosleep tmpfile token_get_all token_name touch trigger_error trim uasort ucfirst ucwords
+udm_add_search_limit udm_alloc_agent udm_alloc_agent_array udm_api_version udm_cat_list udm_cat_path
+udm_check_charset udm_check_stored udm_clear_search_limits udm_close_stored udm_crc32 udm_errno
+udm_error udm_find udm_free_agent udm_free_ispell_data udm_free_res udm_get_doc_count
+udm_get_res_field udm_get_res_param udm_hash32 udm_load_ispell_data udm_open_stored
+udm_set_agent_param uksort umask uniqid unixtojd unlink unpack unregister_tick_function unserialize
+unset urldecode urlencode user_error usleep usort utf8_decode utf8_encode var_dump var_export
+variant variant_abs variant_add variant_and variant_cast variant_cat variant_cmp
+variant_date_from_timestamp variant_date_to_timestamp variant_div variant_eqv variant_fix
+variant_get_type variant_idiv variant_imp variant_int variant_mod variant_mul variant_neg
+variant_not variant_or variant_pow variant_round variant_set variant_set_type variant_sub
+variant_xor version_compare vfprintf virtual vpopmail_add_alias_domain vpopmail_add_alias_domain_ex
+vpopmail_add_domain vpopmail_add_domain_ex vpopmail_add_user vpopmail_alias_add vpopmail_alias_del
+vpopmail_alias_del_domain vpopmail_alias_get vpopmail_alias_get_all vpopmail_auth_user
+vpopmail_del_domain vpopmail_del_domain_ex vpopmail_del_user vpopmail_error vpopmail_passwd
+vpopmail_set_user_quota vprintf vsprintf w32api_deftype w32api_init_dtype w32api_invoke_function
+w32api_register_function w32api_set_call_method wddx_add_vars wddx_deserialize wddx_packet_end
+wddx_packet_start wddx_serialize_value wddx_serialize_vars wordwrap xattr_get xattr_list
+xattr_remove xattr_set xattr_supported xdiff_file_diff xdiff_file_diff_binary xdiff_file_merge3
+xdiff_file_patch xdiff_file_patch_binary xdiff_string_diff xdiff_string_diff_binary
+xdiff_string_merge3 xdiff_string_patch xdiff_string_patch_binary xml_error_string
+xml_get_current_byte_index xml_get_current_column_number xml_get_current_line_number
+xml_get_error_code xml_parse xml_parse_into_struct xml_parser_create xml_parser_create_ns
+xml_parser_free xml_parser_get_option xml_parser_set_option xml_set_character_data_handler
+xml_set_default_handler xml_set_element_handler xml_set_end_namespace_decl_handler
+xml_set_external_entity_ref_handler xml_set_notation_decl_handler xml_set_object
+xml_set_processing_instruction_handler xml_set_start_namespace_decl_handler
+xml_set_unparsed_entity_decl_handler xmlrpc_decode xmlrpc_decode_request xmlrpc_encode
+xmlrpc_encode_request xmlrpc_get_type xmlrpc_is_fault xmlrpc_parse_method_descriptions
+xmlrpc_server_add_introspection_data xmlrpc_server_call_method xmlrpc_server_create
+xmlrpc_server_destroy xmlrpc_server_register_introspection_callback xmlrpc_server_register_method
+xmlrpc_set_type xpath_eval xpath_eval_expression xpath_new_context xptr_eval xptr_new_context
+xsl_xsltprocessor_get_parameter xsl_xsltprocessor_has_exslt_support
+xsl_xsltprocessor_import_stylesheet xsl_xsltprocessor_register_php_functions
+xsl_xsltprocessor_remove_parameter xsl_xsltprocessor_set_parameter
+xsl_xsltprocessor_transform_to_doc xsl_xsltprocessor_transform_to_uri
+xsl_xsltprocessor_transform_to_xml xslt_backend_info xslt_backend_name xslt_backend_version
+xslt_create xslt_errno xslt_error xslt_free xslt_getopt xslt_process xslt_set_base xslt_set_encoding
+xslt_set_error_handler xslt_set_log xslt_set_object xslt_set_sax_handler xslt_set_sax_handlers
+xslt_set_scheme_handler xslt_set_scheme_handlers xslt_setopt yaz_addinfo yaz_ccl_conf yaz_ccl_parse
+yaz_close yaz_connect yaz_database yaz_element yaz_errno yaz_error yaz_es_result yaz_get_option
+yaz_hits yaz_itemorder yaz_present yaz_range yaz_record yaz_scan yaz_scan_result yaz_schema
+yaz_search yaz_set_option yaz_sort yaz_syntax yaz_wait yp_all yp_cat yp_err_string yp_errno yp_first
+yp_get_default_domain yp_master yp_match yp_next yp_order zend_logo_guid zend_version zip_close
+zip_entry_close zip_entry_compressedsize zip_entry_compressionmethod zip_entry_filesize
+zip_entry_name zip_entry_open zip_entry_read zip_open zip_read zlib_get_coding_type
+//
+Rotate SoapClient SoapFault SoapHeader SoapParam SoapServer SoapVar __call __construct
+__getFunctions __getLastRequest __getLastResponse __getTypes __toString add addAction addColor
+addEntry addFill addFunction addShape addString add_namespace add_root addstring affected_rows align
+append appendChild appendData append_child append_sibling asXML assign assignElem attreditable
+attributes autocommit beginTransaction bindColumn bindParam bind_param bind_result change_user
+character_set_name checkin checkout child_nodes children cloneNode clone_node close commit connect
+content copy count createAttribute createAttributeNS createCDATASection createComment createDocument
+createDocumentFragment createDocumentType createElement createElementNS createEntityReference
+createProcessingInstruction createTextNode create_attribute create_cdata_section create_comment
+create_element create_element_ns create_entity_reference create_processing_instruction
+create_text_node current current_field data data_seek dbstat dcstat decrement delete deleteData
+description disable_reads_from_master doctype document_element drawCurve drawCurveTo drawLine
+drawLineTo dstanchors dstofsrcanchor dump_debug_info dump_file dump_mem dump_node entities eof erase
+errno error errorCode errorInfo exec execute export extract fetch fetchAll fetchSingle fetch_array
+fetch_assoc fetch_field fetch_field_direct fetch_fields fetch_object fetch_row field_count
+field_seek find first_child flush free free_result ftstat get getATime getAttr getAttribute
+getAttributeNS getAttributeNode getAttributeNodeNS getBuffering getCTime getChildren getCrc getDepth
+getElem getElementById getElementsByTagName getElementsByTagNameNS getFileTime getFilename
+getFunctions getGroup getHeight getHostOs getInnerIterator getInode getIterator getMTime getMethod
+getName getNamedItem getNamedItemNS getOwner getPackedSize getPath getPathname getPerms getPosition
+getSize getStats getSubIterator getType getUnpackedSize getVersion getWidth get_attr get_attribute
+get_attribute_node get_content get_element_by_id get_elements_by_tagname get_host_info get_nodes
+getshape1 getshape2 getwidth handle hasAttribute hasAttributeNS hasAttributes hasChildNodes
+hasChildren hasNext hasSiblings has_attribute has_attributes has_child_nodes html_dump_mem hwstat
+identify import importNode increment info insert insertBefore insertData insert_before insert_id
+insertanchor insertcollection insertdocument internal_subset isAsp isComment isDir isDot
+isExecutable isFile isHtml isId isJste isLink isPhp isReadable isSameNode isSupported isText
+isWhitespaceInElementContent isWritable isXhtml isXml is_blank_node item key kill langdepvalue
+lastInsertId last_child lengths link load loadHTML loadHTMLFile loadXML lock lookupNamespaceURI
+lookupPrefix max mimetype more_results move movePen movePenTo moveTo multColor multi_query name next
+next_result next_sibling nextframe node_name node_type node_value normalize notations num_rows
+object objectbyanchor offsetExists offsetGet offsetSet offsetUnset options output owner_document
+param_count parent_node parents pconnect ping prefix prepare prev previous_sibling process
+protocol_version public_id query read real_connect real_escape_string real_query reason
+registerNamespace relaxNGValidate relaxNGValidateSource remove removeAttribute removeAttributeNS
+removeAttributeNode removeChild remove_attribute remove_child replace replaceChild replaceData
+replace_child replace_node reset result_dump_file result_dump_mem rewind rollBack rollback rotateTo
+rowCount rpl_query_type save scale scaleTo schemaValidate schemaValidateSource seek select_db
+send_long_data send_query server_info set setAction setAttribute setAttributeNS setAttributeNode
+setAttributeNodeNS setBuffering setClass setColor setDepth setFont setHeight setHit setLeftFill
+setLeftMargin setLine setLineSpacing setMargins setName setOver setPersistence setRatio setRightFill
+setSpacing setUp set_attribute set_content set_name set_namespace setbackground setbounds setcolor
+setcommittedversion setdimension setdown setframes setindentation setname setrate setrightMargin
+size skewX skewXTo skewY skewYTo specified splitText sqlstate srcanchors srcsofdst ssl_set stat
+stmt_init store_result streammp3 substringData system_id tagname target tell thread_id title trim
+truncate type unlink_node unlock use_result user userlist valid validate value values warning_count
+write writeTemporary xinclude xpath
+
+--- (07) PHP-Constants -----------------------------------------------------------------------------
+ABDAY_1 ABDAY_2 ABDAY_3 ABDAY_4 ABDAY_5 ABDAY_6 ABDAY_7 ABMON_1 ABMON_10 ABMON_11 ABMON_12 ABMON_2
+ABMON_3 ABMON_4 ABMON_5 ABMON_6 ABMON_7 ABMON_8 ABMON_9 ALT_DIGITS AM_STR ASSERT_ACTIVE ASSERT_BAIL
+ASSERT_CALLBACK ASSERT_QUIET_EVAL ASSERT_WARNING CASE_LOWER CASE_UPPER CHAR_MAX CODESET
+CONNECTION_ABORTED CONNECTION_NORMAL CONNECTION_TIMEOUT COUNT_NORMAL COUNT_RECURSIVE CREDITS_ALL
+CREDITS_DOCS CREDITS_FULLPAGE CREDITS_GENERAL CREDITS_GROUP CREDITS_MODULES CREDITS_QA CREDITS_SAPI
+CRNCYSTR CRYPT_BLOWFISH CRYPT_EXT_DES CRYPT_MD5 CRYPT_SALT_LENGTH CRYPT_STD_DES CURRENCY_SYMBOL
+DAY_1 DAY_2 DAY_3 DAY_4 DAY_5 DAY_6 DAY_7 DECIMAL_POINT DEFAULT_INCLUDE_PATH DIRECTORY_SEPARATOR
+D_FMT D_T_FMT ENT_COMPAT ENT_NOQUOTES ENT_QUOTES ERA ERA_D_FMT ERA_D_T_FMT ERA_T_FMT ERA_YEAR
+EXTR_IF_EXISTS EXTR_OVERWRITE EXTR_PREFIX_ALL EXTR_PREFIX_IF_EXISTS EXTR_PREFIX_INVALID
+EXTR_PREFIX_SAME EXTR_SKIP E_ALL E_COMPILE_ERROR E_COMPILE_WARNING E_CORE_ERROR E_CORE_WARNING
+E_ERROR E_NOTICE E_PARSE E_STRICT E_USER_ERROR E_USER_NOTICE E_USER_WARNING E_WARNING FRAC_DIGITS
+GROUPING HTML_ENTITIES HTML_SPECIALCHARS INFO_ALL INFO_CONFIGURATION INFO_CREDITS INFO_ENVIRONMENT
+INFO_GENERAL INFO_LICENSE INFO_MODULES INFO_VARIABLES INI_ALL INI_PERDIR INI_SYSTEM INI_USER
+INT_CURR_SYMBOL INT_FRAC_DIGITS LC_ALL LC_COLLATE LC_CTYPE LC_MESSAGES LC_MONETARY LC_NUMERIC
+LC_TIME LOCK_EX LOCK_NB LOCK_SH LOCK_UN LOG_ALERT LOG_AUTH LOG_AUTHPRIV LOG_CONS LOG_CRIT LOG_CRON
+LOG_DAEMON LOG_DEBUG LOG_EMERG LOG_ERR LOG_INFO LOG_KERN LOG_LOCAL0 LOG_LOCAL1 LOG_LOCAL2 LOG_LOCAL3
+LOG_LOCAL4 LOG_LOCAL5 LOG_LOCAL6 LOG_LOCAL7 LOG_LPR LOG_MAIL LOG_NDELAY LOG_NEWS LOG_NOTICE
+LOG_NOWAIT LOG_ODELAY LOG_PERROR LOG_PID LOG_SYSLOG LOG_USER LOG_UUCP LOG_WARNING MON_1 MON_10
+MON_11 MON_12 MON_2 MON_3 MON_4 MON_5 MON_6 MON_7 MON_8 MON_9 MON_DECIMAL_POINT MON_GROUPING
+MON_THOUSANDS_SEP M_1_PI M_2_PI M_2_SQRTPI M_E M_LN10 M_LN2 M_LOG10E M_LOG2E M_PI M_PI_2 M_PI_4
+M_SQRT1_2 M_SQRT2 NEGATIVE_SIGN NOEXPR NOSTR N_CS_PRECEDES N_SEP_BY_SPACE N_SIGN_POSN
+PATHINFO_BASENAME PATHINFO_DIRNAME PATHINFO_EXTENSION PATH_SEPARATOR PEAR_EXTENSION_DIR
+PEAR_INSTALL_DIR PHP_BINDIR PHP_CONFIG_FILE_PATH PHP_CONFIG_FILE_SCAN_DIR PHP_DATADIR PHP_EOL
+PHP_EXTENSION_DIR PHP_INT_MAX PHP_INT_SIZE PHP_LIBDIR PHP_LOCALSTATEDIR PHP_OS
+PHP_OUTPUT_HANDLER_CONT PHP_OUTPUT_HANDLER_END PHP_OUTPUT_HANDLER_START PHP_PREFIX PHP_SAPI
+PHP_SHLIB_SUFFIX PHP_SYSCONFDIR PHP_VERSION PM_STR POSITIVE_SIGN P_CS_PRECEDES P_SEP_BY_SPACE
+P_SIGN_POSN RADIXCHAR SEEK_CUR SEEK_END SEEK_SET SORT_ASC SORT_DESC SORT_NUMERIC SORT_REGULAR
+SORT_STRING STR_PAD_BOTH STR_PAD_LEFT STR_PAD_RIGHT THOUSANDS_SEP THOUSEP T_FMT T_FMT_AMPM YESEXPR
+YESSTR __COMPILER_HALT_OFFSET__
+
+--- (08) User Set 1 --------------------------------------------------------------------------------
+
+--- (09) User Set 2 --------------------------------------------------------------------------------
+
+--- (10) User Set 3 --------------------------------------------------------------------------------
+
+--- (11) User Set 4 --------------------------------------------------------------------------------

Added: trunk/Languages/Resources/keywords.html-js-php.r
===================================================================
--- trunk/Languages/Resources/keywords.html-js-php.r	2006-11-19 18:56:35 UTC (rev 454)
+++ trunk/Languages/Resources/keywords.html-js-php.r	2006-11-20 01:19:52 UTC (rev 455)
@@ -0,0 +1,2 @@
+read 'KeyW' (0, "keywords.html-js-php")
+	"keywords.html-js-php";

Added: trunk/Languages/Sources/HtmlJsPhp_Language.cpp
===================================================================
--- trunk/Languages/Sources/HtmlJsPhp_Language.cpp	2006-11-19 18:56:35 UTC (rev 454)
+++ trunk/Languages/Sources/HtmlJsPhp_Language.cpp	2006-11-20 01:19:52 UTC (rev 455)
@@ -0,0 +1,1564 @@
+/*	$Id: HtmlJs_Language.cpp 453 2006-11-19 02:22:01Z hoern $
+	
+	Copyright 1996, 1997, 1998, 2002
+	        Hekkelman Programmatuur B.V.  All rights reserved.
+	
+	Redistribution and use in source and binary forms, with or without
+	modification, are permitted provided that the following conditions are met:
+	1. Redistributions of source code must retain the above copyright notice,
+	   this list of conditions and the following disclaimer.
+	2. Redistributions in binary form must reproduce the above copyright notice,
+	   this list of conditions and the following disclaimer in the documentation
+	   and/or other materials provided with the distribution.
+	3. All advertising materials mentioning features or use of this software
+	   must display the following acknowledgement:
+	   
+	    This product includes software developed by Hekkelman Programmatuur B.V.
+	
+	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
+	   promote products derived from this software without specific prior
+	   written permission.
+	
+	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
+	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+	AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+	EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+	PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
+
+	Created: 12/07/97 22:01:11 by Maarten Hekkelman
+*/
+
+#include "CLanguageAddOn.h"
+#include <cctype>
+#include <cstring>
+#include <stack>
+
+using namespace std;
+
+enum Language {
+	lang_HTML,
+	lang_JavaScript,
+	lang_PHP
+};
+
+//template <class I1, class I2>
+//inline int strncasecmp(I1 a, I2 b, int l)
+//{
+//	int d = 0;
+//
+//	while (l-- > 0 && d == 0)
+//		d = tolower(*a++) - tolower(*b++);
+//	
+//	return d;
+//}
+
+_EXPORT const char kLanguageName[] = "HTML-JS-PHP";
+_EXPORT const char kLanguageExtensions[] = "html;htm;php";
+_EXPORT const char kLanguageCommentStart[] = "<!";
+_EXPORT const char kLanguageCommentEnd[] = ">";
+_EXPORT const char kLanguageKeywordFile[] = "keywords.html-js-php";
+
+//	--- Available Colors ---
+//	kLTextColor
+//	kLKeyWordColor,				kLAltKeyWordColor,
+//	kLCommentColor,				kLAltCommentColor,
+//	kLStringColor,				kLAltStringColor,
+//	kLCharConstColor,
+//	kLTagColor,
+//	kLSystemIdentifierColor,	kLUserIdentifierColor,
+//	kLNumberColor,				kLAltNumberColor,
+//	kLPreProcessorColor,		kLAltProcessorColor,
+//	kLErrorColor,				kLAltErrorColor,
+//	kLOperatorColor,			kLAltOperatorColor,
+//	kLSeparatorColor,			kLAltSeparatorColor,
+//	kLUser1, kLUser2, kLUser3, kLUser4,
+
+// Translate from pepper-colors to pe-colors
+enum {
+	kLngColorHtmlKeyword	= kLAltKeyWordColor,
+	kLngColorHtmlAttribute	= kLAltKeyWordColor,
+	kLngColorJsKeyword		= kLKeyWordColor,
+	kLngColorPhpKeyword		= kLKeyWordColor,
+	kLngColorSpecialChar	= kLUser4,
+	kLngColorTagString		= kLStringColor,
+	kLngColorPhpFunction	= kLUser4
+};
+
+enum {
+	START = 0,
+		TAGSTART,
+		TAGSTARTKEYWORD,
+		TAGENDKEYWORD,
+		TAG,
+		TAGSTRING1,
+		TAGSTRING2,
+		TAGATTRIBUTE,
+		SPECIAL,
+		COMMENT_DTD,
+		COMMENT,
+	JAVASCRIPT,
+		JS_COMMENT,
+		JS_LCOMMENT,
+		JS_IDENTIFIER,
+		JS_STRING1,
+		JS_STRING2,
+	PHP_SCRIPT,
+		PHP_IDENTIFIER,
+		PHP_COMMENT,
+		PHP_LCOMMENT,
+		PHP_STRING1,
+		PHP_STRING2
+};
+
+enum {
+	kKwHtmlTag			= 2,
+	kKwHtmlAttribute	= 3,
+	kKwJsLanguage		= 4,
+	kKwJsConstants		= 5,	// TODO
+	kKwPhpLanguage		= 6,
+	kKwPhpFunctions		= 7,
+	kKwPhpConstants		= 8,	// TODO
+	kKwUserset1			= 9,
+	kKwUserset2			= 10,
+	kKwUserset3			= 11,
+	kKwUserset4			= 12
+};
+
+
+
+#pragma mark Debug-Functions
+
+#define DEBUG_PHP 0
+
+#if DEBUG_PHP
+
+void DEB_PrintState(const int state, const char c, const char *sub="")
+{
+	const char* name = NULL;
+	switch (state)
+	{
+		case START:				name = "START"; break;
+		case TAGSTART:			name = "TAGSTART"; break;
+		case TAGSTARTKEYWORD:	name = "TAGSTARTKEYWORD"; break;
+		case TAGENDKEYWORD:		name = "TAGENDKEYWORD"; break;
+		case TAG:				name = "TAG"; break;
+		case TAGSTRING1:		name = "TAGSTRING1"; break;
+		case TAGSTRING2:		name = "TAGSTRING2"; break;
+		case TAGATTRIBUTE:		name = "TAGATTRIBUTE"; break;
+		case SPECIAL:			name = "SPECIAL"; break;
+		case COMMENT_DTD:		name = "COMMENT_DTD"; break;
+		case COMMENT:			name = "COMMENT"; break;
+		case JAVASCRIPT:		name = "JAVASCRIPT"; break;
+		case JS_COMMENT:		name = "JS_COMMENT"; break;
+		case JS_LCOMMENT:		name = "JS_LCOMMENT"; break;
+		case JS_IDENTIFIER:		name = "JS_IDENTIFIER"; break;
+		case JS_STRING1:		name = "JS_STRING1"; break;
+		case JS_STRING2:		name = "JS_STRING2"; break;
+		case PHP_SCRIPT:		name = "PHP_SCRIPT"; break;
+		case PHP_IDENTIFIER:	name = "PHP_IDENTIFIER"; break;
+		case PHP_COMMENT:		name = "PHP_COMMENT"; break;
+		case PHP_LCOMMENT:		name = "PHP_LCOMMENT"; break;
+		case PHP_STRING1:		name = "PHP_STRING1"; break;
+		case PHP_STRING2:		name = "PHP_STRING2"; break;
+	}
+	if (name)
+	{
+		printf("### %s(%s)", name, sub);
+		printf(isprint(c) ? " [%c]" : " [0x%02X]", c);
+		printf("\n");
+	}
+}
+
+void DEB_PrintSetKw(const int state, int keyword)
+{
+	const char* name = NULL;
+	switch (state)
+	{
+		case START:				name = "START"; break;
+		case TAGSTART:			name = "TAGSTART"; break;
+		case TAGSTARTKEYWORD:	name = "TAGSTARTKEYWORD"; break;
+		case TAGENDKEYWORD:		name = "TAGENDKEYWORD"; break;
+		case TAG:				name = "TAG"; break;
+		case TAGSTRING1:		name = "TAGSTRING1"; break;
+		case TAGSTRING2:		name = "TAGSTRING2"; break;
+		case TAGATTRIBUTE:		name = "TAGATTRIBUTE"; break;
+		case SPECIAL:			name = "SPECIAL"; break;
+		case COMMENT_DTD:		name = "COMMENT_DTD"; break;
+		case COMMENT:			name = "COMMENT"; break;
+		case JAVASCRIPT:		name = "JAVASCRIPT"; break;
+		case JS_COMMENT:		name = "JS_COMMENT"; break;
+		case JS_LCOMMENT:		name = "JS_LCOMMENT"; break;
+		case JS_IDENTIFIER:		name = "JS_IDENTIFIER"; break;
+		case JS_STRING1:		name = "JS_STRING1"; break;
+		case JS_STRING2:		name = "JS_STRING2"; break;
+		case PHP_SCRIPT:		name = "PHP_SCRIPT"; break;
+		case PHP_IDENTIFIER:	name = "PHP_IDENTIFIER"; break;
+		case PHP_COMMENT:		name = "PHP_COMMENT"; break;
+		case PHP_LCOMMENT:		name = "PHP_LCOMMENT"; break;
+		case PHP_STRING1:		name = "PHP_STRING1"; break;
+		case PHP_STRING2:		name = "PHP_STRING2"; break;
+	}
+	const char* kwname = NULL;
+	switch (keyword)
+	{
+		case kKwHtmlTag:		kwname = "HtmlTag"; break;
+		case kKwHtmlAttribute:	kwname = "HtmlAttribute"; break;
+		case kKwJsLanguage:		kwname = "JsLanguage"; break;
+		case kKwJsConstants:	kwname = "JsConstants"; break;
+		case kKwPhpLanguage:	kwname = "PhpLanguage"; break;
+		case kKwPhpFunctions:	kwname = "PhpFunctions"; break;
+		case kKwPhpConstants:	kwname = "PhpConstants"; break;
+		case kKwUserset1:		kwname = "Userset1"; break;
+		case kKwUserset2:		kwname = "Userset2"; break;
+		case kKwUserset3:		kwname = "Userset3"; break;
+		case kKwUserset4:		kwname = "Userset4"; break;
+	}
+	//
+	if (name)
+	{
+		if (kwname)
+		{
+			printf("    IsKeyword: <%s>\n", kwname);
+		}
+		else
+		{
+			printf("    IsKeyword: <%i>\n", keyword);
+		}
+	}
+}
+
+const char* DEB_StateName(int state)
+{
+	switch (state)
+	{
+		case START:				return "START";
+		case TAGSTART:			return "TAGSTART";
+		case TAGSTARTKEYWORD:	return "TAGSTARTKEYWORD";
+		case TAGENDKEYWORD:		return "TAGENDKEYWORD";
+		case TAG:				return "TAG";
+		case TAGSTRING1:		return "TAGSTRING1";
+		case TAGSTRING2:		return "TAGSTRING2";
+		case TAGATTRIBUTE:		return "TAGATTRIBUTE";
+		case SPECIAL:			return "SPECIAL";
+		case COMMENT_DTD:		return "COMMENT_DTD";
+		case COMMENT:			return "COMMENT";
+		case JAVASCRIPT:		return "JAVASCRIPT";
+		case JS_COMMENT:		return "JS_COMMENT";
+		case JS_LCOMMENT:		return "JS_LCOMMENT";
+		case JS_IDENTIFIER:		return "JS_IDENTIFIER";
+		case JS_STRING1:		return "JS_STRING1";
+		case JS_STRING2:		return "JS_STRING2";
+		case PHP_SCRIPT:		return "PHP_SCRIPT";
+		case PHP_IDENTIFIER:	return "PHP_IDENTIFIER";
+		case PHP_COMMENT:		return "PHP_COMMENT";
+		case PHP_LCOMMENT:		return "PHP_LCOMMENT";
+		case PHP_STRING1:		return "PHP_STRING1";
+		case PHP_STRING2:		return "PHP_STRING2";
+		default:				return "UNKOWN";
+	}
+}
+
+#else
+
+	#define DEB_PrintState
+	#define DEB_StateName
+	#define DEB_PrintSetKw
+
+#endif
+
+
+#pragma mark ColorLine
+
+
+#define GETCHAR  (c = (i++ < size) ? text[i - 1] : 0)
+
+_EXPORT void ColorLine(CLanguageProxy& proxy, int& state)
+{
+	const char *text = proxy.Text();
+	int size = proxy.Size();
+	char c;
+	int i = 0, bo = 0, s = 0, kws = 0, forceState = START;
+	int color, kwc;
+	bool leave = false, esc = false, script = false, percent = false;
+	
+	proxy.SetColor(0, kLTextColor);

[... truncated: 1781 lines follow ...]


From hoern at mail.berlios.de  Mon Nov 20 17:24:31 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Mon, 20 Nov 2006 17:24:31 +0100
Subject: [pe-commits] r456 - in trunk: Languages/Sources Sources
Message-ID: <200611201624.kAKGOVwB022793@sheep.berlios.de>

Author: hoern
Date: 2006-11-20 17:24:27 +0100 (Mon, 20 Nov 2006)
New Revision: 456
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=456&view=rev

Modified:
   trunk/Languages/Sources/Antlr_Language.cpp
   trunk/Languages/Sources/Asm_Language.cpp
   trunk/Languages/Sources/Cpp_Language.cpp
   trunk/Languages/Sources/D_Language.cpp
   trunk/Languages/Sources/Diff_Language.cpp
   trunk/Languages/Sources/HtmlJsPhp_Language.cpp
   trunk/Languages/Sources/HtmlJsPhp_Popup.cpp
   trunk/Languages/Sources/HtmlJs_Language.cpp
   trunk/Languages/Sources/Html_Language.cpp
   trunk/Languages/Sources/Jam_Language.cpp
   trunk/Languages/Sources/Java_Language.cpp
   trunk/Languages/Sources/Lout_Language.cpp
   trunk/Languages/Sources/Lua_Language.cpp
   trunk/Languages/Sources/Mathematica_Language.cpp
   trunk/Languages/Sources/Oberon_Language.cpp
   trunk/Languages/Sources/Pascal_Language.cpp
   trunk/Languages/Sources/Perl_Language.cpp
   trunk/Languages/Sources/Python_Language.cpp
   trunk/Languages/Sources/Rez_Language.cpp
   trunk/Languages/Sources/Shell_Language.cpp
   trunk/Languages/Sources/Sql_Language.cpp
   trunk/Languages/Sources/Tex_Language.cpp
   trunk/Sources/CFilterChoiceDialog.cpp
   trunk/Sources/CKeywords.cpp
   trunk/Sources/CLangIntf.cpp
   trunk/Sources/CLangIntf.h
   trunk/Sources/CLanguageAddOn.cpp
   trunk/Sources/CLanguageAddOn.h
   trunk/Sources/CMessageItem.cpp
   trunk/Sources/CPrefsDialog.cpp
   trunk/Sources/HColorUtils.cpp
   trunk/Sources/HColorUtils.h
   trunk/Sources/PAbout.cpp
   trunk/Sources/PApp.cpp
   trunk/Sources/PText.cpp
   trunk/Sources/PText.h
Log:
* Replaced redundant language color constants with system wide constants
* Unified naming of color constants. Now all start with kColor...
* Replaced all occurences of "KeyWord" with "Keyword"


Modified: trunk/Languages/Sources/Antlr_Language.cpp
===================================================================
--- trunk/Languages/Sources/Antlr_Language.cpp	2006-11-20 01:19:52 UTC (rev 455)
+++ trunk/Languages/Sources/Antlr_Language.cpp	2006-11-20 16:24:27 UTC (rev 456)
@@ -33,8 +33,9 @@
 	Created: 12/07/97 22:01:11 by Maarten Hekkelman
 */
 
+#include <stack>
 #include "CLanguageAddOn.h"
-#include <stack>
+#include "HColorUtils.h"
 
 extern "C" {
 _EXPORT const char kLanguageName[] = "Antlr";
@@ -62,9 +63,9 @@
 	bool leave = false;
 	
 	if (state == COMMENT || state == LCOMMENT)
-		proxy.SetColor(0, kLCommentColor);
+		proxy.SetColor(0, kColorComment1);
 	else
-		proxy.SetColor(0, kLTextColor);
+		proxy.SetColor(0, kColorText);
 	
 	if (size <= 0)
 		return;
@@ -107,7 +108,7 @@
 					
 				if (leave || (state != START && s < i))
 				{
-					proxy.SetColor(s, kLTextColor);
+					proxy.SetColor(s, kColorText);
 					s = i - 1;
 				}
 				break;
@@ -115,19 +116,19 @@
 			case COMMENT:
 				if ((s == 0 || i > s + 1) && c == '*' && text[i] == '/')
 				{
-					proxy.SetColor(s - 1, kLCommentColor);
+					proxy.SetColor(s - 1, kColorComment1);
 					s = i + 1;
 					state = START;
 				}
 				else if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s - 1, kLCommentColor);
+					proxy.SetColor(s - 1, kColorComment1);
 					leave = true;
 				}
 				break;
 
 			case LCOMMENT:
-				proxy.SetColor(s - 1, kLCommentColor);
+				proxy.SetColor(s - 1, kColorComment1);
 				leave = true;
 				if (text[size - 1] == '\n')
 					state = START;
@@ -138,21 +139,21 @@
 				{
 					int kwc;
 
-					if (i > s + 1 && (kwc = proxy.IsKeyWord(kws)) != 0)
+					if (i > s + 1 && (kwc = proxy.IsKeyword(kws)) != 0)
 					{
 						switch (kwc)
 						{
-							case 1:	proxy.SetColor(s, kLKeyWordColor); break;
-							case 2:	proxy.SetColor(s, kLUser1); break;
-							case 3:	proxy.SetColor(s, kLUser2); break;
-							case 4:	proxy.SetColor(s, kLUser3); break;
-							case 5:	proxy.SetColor(s, kLUser4); break;
+							case 1:	proxy.SetColor(s, kColorKeyword1); break;
+							case 2:	proxy.SetColor(s, kColorUserSet1); break;
+							case 3:	proxy.SetColor(s, kColorUserSet2); break;
+							case 4:	proxy.SetColor(s, kColorUserSet3); break;
+							case 5:	proxy.SetColor(s, kColorUserSet4); break;
 //							default:	ASSERT(false);
 						}
 					}
 					else
 					{
-						proxy.SetColor(s, kLTextColor);
+						proxy.SetColor(s, kColorText);
 					}
 					
 					s = --i;
@@ -172,7 +173,7 @@
 				}
 				else
 				{
-					proxy.SetColor(s, kLTextColor);
+					proxy.SetColor(s, kColorText);
 					s = --i;
 					state = START;
 				}	
@@ -183,21 +184,21 @@
 				{
 					int kwc;
 
-					if (i > s + 2 && (kwc = proxy.IsKeyWord(kws)) != 0)
+					if (i > s + 2 && (kwc = proxy.IsKeyword(kws)) != 0)
 					{
 						switch (kwc)
 						{
-							case 1:	proxy.SetColor(s, kLKeyWordColor); break;
-							case 2:	proxy.SetColor(s, kLUser1); break;
-							case 3:	proxy.SetColor(s, kLUser2); break;
-							case 4:	proxy.SetColor(s, kLUser3); break;
-							case 5:	proxy.SetColor(s, kLUser4); break;
+							case 1:	proxy.SetColor(s, kColorKeyword1); break;
+							case 2:	proxy.SetColor(s, kColorUserSet1); break;
+							case 3:	proxy.SetColor(s, kColorUserSet2); break;
+							case 4:	proxy.SetColor(s, kColorUserSet3); break;
+							case 5:	proxy.SetColor(s, kColorUserSet4); break;
 //							default:	ASSERT(false);
 						}
 					}
 					else
 					{
-						proxy.SetColor(s, kLTextColor);
+						proxy.SetColor(s, kColorText);
 					}
 					
 					state = strncmp(text+i-8, "include", 7) ? START : INCL1;
@@ -222,13 +223,13 @@
 			case INCL2:
 				if (c == '"')
 				{
-					proxy.SetColor(s, kLStringColor);
+					proxy.SetColor(s, kColorString1);
 					s = i;
 					state = START;
 				}
 				else if (c == '\n' || c == 0)
 				{
-					proxy.SetColor(s, kLTextColor);
+					proxy.SetColor(s, kColorText);
 					leave = true;
 					state = START;
 				}	
@@ -237,13 +238,13 @@
 			case INCL3:
 				if (c == '>')
 				{
-					proxy.SetColor(s, kLStringColor);
+					proxy.SetColor(s, kColorString1);
 					s = i;
 					state = START;
 				}
 				else if (c == '\n' || c == 0)
 				{
-					proxy.SetColor(s, kLTextColor);
+					proxy.SetColor(s, kColorText);
 					leave = true;
 					state = START;
 				}	
@@ -252,7 +253,7 @@
 			case STRING:
 				if (c == '"' && !esc)
 				{
-					proxy.SetColor(s, kLStringColor);
+					proxy.SetColor(s, kColorString1);
 					s = i;
 					state = START;
 				}
@@ -260,11 +261,11 @@
 				{
 					if (text[i - 2] == '\\' && text[i - 3] != '\\')
 					{
-						proxy.SetColor(s, kLStringColor);
+						proxy.SetColor(s, kColorString1);
 					}
 					else
 					{
-						proxy.SetColor(s, kLTextColor);
+						proxy.SetColor(s, kColorText);
 						state = START;
 					}
 					
@@ -278,7 +279,7 @@
 			case CHAR_CONST:
 				if (c == '\t' || c == '\n' || c == 0)	// don't like this
 				{
-					proxy.SetColor(s, kLTextColor);
+					proxy.SetColor(s, kColorText);
 					s = i;
 					state = START;
 				}
@@ -286,13 +287,13 @@
 				{
 					if (cc_cnt != 1 && cc_cnt != 2 && cc_cnt != 4)
 					{
-						proxy.SetColor(s, kLTextColor);
+						proxy.SetColor(s, kColorText);
 						s = --i;
 						state = START;
 					}
 					else
 					{
-						proxy.SetColor(s, kLCharConstColor);
+						proxy.SetColor(s, kColorCharConst);
 						s = i;
 						state = START;
 					}

Modified: trunk/Languages/Sources/Asm_Language.cpp
===================================================================
--- trunk/Languages/Sources/Asm_Language.cpp	2006-11-20 01:19:52 UTC (rev 455)
+++ trunk/Languages/Sources/Asm_Language.cpp	2006-11-20 16:24:27 UTC (rev 456)
@@ -4,8 +4,9 @@
 // TODO: there are too many flavours of asm. Try to find a minimum common
 //       denominator? (#include's, #define's, //-style comments, etc)
 
+#include <stack>
 #include "CLanguageAddOn.h"
-#include <stack>
+#include "HColorUtils.h"
 
 extern "C" {
 _EXPORT const char kLanguageName[] = "ASM-x86";
@@ -65,9 +66,9 @@
 	bool hex_num = false;
 
 	if (state == COMMENT || state == LCOMMENT)
-		proxy.SetColor(0, kLCommentColor);
+		proxy.SetColor(0, kColorComment1);
 	else
-		proxy.SetColor(0, kLTextColor);
+		proxy.SetColor(0, kColorText);
 
 	if (size <= 0)
 		return;
@@ -113,7 +114,7 @@
 
 				if (leave || (state != START && s < i))
 				{
-					proxy.SetColor(s, kLTextColor);
+					proxy.SetColor(s, kColorText);
 					s = i - 1;
 				}
 			break;
@@ -121,19 +122,19 @@
 			case COMMENT:
 				if ((s == 0 || i > s + 1) && c == '*' && text[i] == '/')
 				{
-					proxy.SetColor(s - 1, kLCommentColor);
+					proxy.SetColor(s - 1, kColorComment1);
 					s = i + 1;
 					state = START;
 				}
 				else if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s - 1, kLCommentColor);
+					proxy.SetColor(s - 1, kColorComment1);
 					leave = true;
 				}
 			break;
 
 			case LCOMMENT:
-				proxy.SetColor(s - 1, kLCommentColor);
+				proxy.SetColor(s - 1, kColorComment1);
 				leave = true;
 				if (text[size - 1] == '\n')
 					state = START;
@@ -144,20 +145,20 @@
 				{
 					int kwc;
 
-					if (i > s + 1 && (kwc = proxy.IsKeyWord(kws)) != 0)
+					if (i > s + 1 && (kwc = proxy.IsKeyword(kws)) != 0)
 					{
 						switch (kwc)
 						{
-							case 1:	proxy.SetColor(s, kLKeyWordColor); break;
-							case 2:	proxy.SetColor(s, kLUser1); break;
-							case 3:	proxy.SetColor(s, kLUser2); break;
-							case 4:	proxy.SetColor(s, kLUser3); break;
-							case 5:	proxy.SetColor(s, kLUser4); break;
+							case 1:	proxy.SetColor(s, kColorKeyword1); break;
+							case 2:	proxy.SetColor(s, kColorUserSet1); break;
+							case 3:	proxy.SetColor(s, kColorUserSet2); break;
+							case 4:	proxy.SetColor(s, kColorUserSet3); break;
+							case 5:	proxy.SetColor(s, kColorUserSet4); break;
 						}
 					}
 					else
 					{
-						proxy.SetColor(s, kLTextColor);
+						proxy.SetColor(s, kColorText);
 					}
 
 					s = --i;
@@ -170,13 +171,13 @@
 			case STRING:
 				if (c == '"')
 				{
-					proxy.SetColor(s, kLStringColor);
+					proxy.SetColor(s, kColorString1);
 					s = i;
 					state = START;
 				}
 				else if (c == '\n' || c == 0)
 				{
-					proxy.SetColor(s, kLTextColor);
+					proxy.SetColor(s, kColorText);
 					state = START;
 					s = size;
 					leave = true;
@@ -185,7 +186,7 @@
 
 			case NUMERIC:
 			{
-				proxy.SetColor(s, kLNumberColor);
+				proxy.SetColor(s, kColorNumber1);
 				if (isNumeric(text[i - 1]) || (hex_num && isHexNum(text[i - 1])))
 					;
 				else
@@ -205,7 +206,7 @@
 
 			case OPERATOR:
 			{
-				proxy.SetColor(s, kLOperatorColor);
+				proxy.SetColor(s, kColorOperator1);
 				if (isOperator(text[i - 1]))
 					;
 				else
@@ -219,7 +220,7 @@
 
 			case SYMBOL:
 			{
-				proxy.SetColor(s, kLSeparatorColor);
+				proxy.SetColor(s, kColorSeparator1);
 				if (isSymbol(text[i - 1]))
 					;
 				else

Modified: trunk/Languages/Sources/Cpp_Language.cpp
===================================================================
--- trunk/Languages/Sources/Cpp_Language.cpp	2006-11-20 01:19:52 UTC (rev 455)
+++ trunk/Languages/Sources/Cpp_Language.cpp	2006-11-20 16:24:27 UTC (rev 456)
@@ -39,8 +39,9 @@
 
 */
 
+#include <stack>
 #include "CLanguageAddOn.h"
-#include <stack>
+#include "HColorUtils.h"
 
 extern "C" {
 _EXPORT const char kLanguageName[] = "C/C++";
@@ -169,9 +170,9 @@
 	state = state & STATE_MASK;
 	
 	if (state == COMMENT || state == LCOMMENT)
-		proxy.SetColor(0, kLCommentColor);
+		proxy.SetColor(0, kColorComment1);
 	else
-		proxy.SetColor(0, kLTextColor);
+		proxy.SetColor(0, kColorText);
 	
 	if (size <= 0)
 		return;
@@ -183,7 +184,7 @@
 		switch (state) {
 			case START:
 				s = i - 1;
-				proxy.SetColor(s, kLTextColor);
+				proxy.SetColor(s, kColorText);
 				if (c == '#')
 				{
 					kws = proxy.Move(c, 1);
@@ -231,19 +232,19 @@
 			case COMMENT:
 				if ((s == 0 || i > s + 1) && c == '*' && text[i] == '/')
 				{
-					proxy.SetColor(s, kLCommentColor);
+					proxy.SetColor(s, kColorComment1);
 					i++;
 					state = START;
 				}
 				else if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s, kLCommentColor);
+					proxy.SetColor(s, kColorComment1);
 					leave = true;
 				}
 				break;
 
 			case LCOMMENT:
-				proxy.SetColor(s, kLCommentColor);
+				proxy.SetColor(s, kColorComment1);
 				leave = true;
 				if (text[size - 1] == '\n')
 					state = START;
@@ -254,20 +255,20 @@
 				{
 					int kwc;
 
-					if (i > s + 1 && (kwc = proxy.IsKeyWord(kws)) != 0)
+					if (i > s + 1 && (kwc = proxy.IsKeyword(kws)) != 0)
 					{
 						switch (kwc)
 						{
-							case 1:	proxy.SetColor(s, kLKeyWordColor); break;
-							case 2:	proxy.SetColor(s, kLUser1); break;
-							case 3:	proxy.SetColor(s, kLUser2); break;
-							case 4:	proxy.SetColor(s, kLUser3); break;
-							case 5:	proxy.SetColor(s, kLUser4); break;
+							case 1:	proxy.SetColor(s, kColorKeyword1); break;
+							case 2:	proxy.SetColor(s, kColorUserSet1); break;
+							case 3:	proxy.SetColor(s, kColorUserSet2); break;
+							case 4:	proxy.SetColor(s, kColorUserSet3); break;
+							case 5:	proxy.SetColor(s, kColorUserSet4); break;
 //							default:	ASSERT(false);
 						}
 					}
 					else
-						proxy.SetColor(s, kLTextColor);
+						proxy.SetColor(s, kColorText);
 					
 					i--;
 					state = START;
@@ -286,7 +287,7 @@
 				}
 				else
 				{
-					proxy.SetColor(s, kLTextColor);
+					proxy.SetColor(s, kColorText);
 					i--;
 					state = START;
 				}	
@@ -297,15 +298,15 @@
 				{
 					int kwc;
 
-					if (i > s + 2 && (kwc = proxy.IsKeyWord(kws)) != 0)
+					if (i > s + 2 && (kwc = proxy.IsKeyword(kws)) != 0)
 					{
 						switch (kwc)
 						{
-							case 1:	proxy.SetColor(s, kLKeyWordColor); break;
-							case 2:	proxy.SetColor(s, kLUser1); break;
-							case 3:	proxy.SetColor(s, kLUser2); break;
-							case 4:	proxy.SetColor(s, kLUser3); break;
-							case 5:	proxy.SetColor(s, kLUser4); break;
+							case 1:	proxy.SetColor(s, kColorKeyword1); break;
+							case 2:	proxy.SetColor(s, kColorUserSet1); break;
+							case 3:	proxy.SetColor(s, kColorUserSet2); break;
+							case 4:	proxy.SetColor(s, kColorUserSet3); break;
+							case 5:	proxy.SetColor(s, kColorUserSet4); break;
 //							default:	ASSERT(false);
 						}
 
@@ -325,7 +326,7 @@
 								&& (k + 1 == size || text[k + 1] == 0
 									|| isspace(text[k + 1])))
 							{
-								proxy.SetColor(s, kLCommentColor);
+								proxy.SetColor(s, kColorComment1);
 								state = IF_ZERO;
 								ifZeroCounter = 1;
 								leave = true;
@@ -334,7 +335,7 @@
 					}
 					else
 					{
-						proxy.SetColor(s, kLTextColor);
+						proxy.SetColor(s, kColorText);
 					}
 					
 					if (state != IF_ZERO)
@@ -362,12 +363,12 @@
 			case INCL2:
 				if (c == '"')
 				{
-					proxy.SetColor(s, kLStringColor);
+					proxy.SetColor(s, kColorString1);
 					state = START;
 				}
 				else if (c == '\n' || c == 0)
 				{
-					proxy.SetColor(s, kLTextColor);
+					proxy.SetColor(s, kColorText);
 					leave = true;
 					state = START;
 				}	
@@ -376,12 +377,12 @@
 			case INCL3:
 				if (c == '>')
 				{
-					proxy.SetColor(s, kLStringColor);
+					proxy.SetColor(s, kColorString1);
 					state = START;
 				}
 				else if (c == '\n' || c == 0)
 				{
-					proxy.SetColor(s, kLTextColor);
+					proxy.SetColor(s, kColorText);
 					leave = true;
 					state = START;
 				}	
@@ -390,18 +391,18 @@
 			case STRING:
 				if (c == '"' && !esc)
 				{
-					proxy.SetColor(s, kLStringColor);
+					proxy.SetColor(s, kColorString1);
 					state = START;
 				}
 				else if (c == '\n' || c == 0)
 				{
 					if (text[i - 2] == '\\' && text[i - 3] != '\\')
 					{
-						proxy.SetColor(s, kLStringColor);
+						proxy.SetColor(s, kColorString1);
 					}
 					else
 					{
-						proxy.SetColor(s, kLTextColor);
+						proxy.SetColor(s, kColorText);
 						state = START;
 					}
 					leave = true;
@@ -415,12 +416,12 @@
 					|| (c == '\'' && !esc && (cc_cnt == 0 || cc_cnt > 5)))
 				{
 					// invalid char constant - either invalid char or too short/long
-					proxy.SetColor(s, kLTextColor);
+					proxy.SetColor(s, kColorText);
 					state = START;
 				}
 				else if (c == '\'' && !esc)
 				{
-					proxy.SetColor(s, kLCharConstColor);
+					proxy.SetColor(s, kColorCharConst);
 					state = START;
 				}
 				else
@@ -434,7 +435,7 @@
 
 			case NUMERIC:
 			{
-				proxy.SetColor(s, kLNumberColor);
+				proxy.SetColor(s, kColorNumber1);
 				if (isNumeric(text[i-1]) || (hex_num && isHexNum(text[i - 1])))
 					;
 				else
@@ -453,7 +454,7 @@
 
 			case OPERATOR:
 			{
-				proxy.SetColor(s, kLOperatorColor);
+				proxy.SetColor(s, kColorOperator1);
 				if (isOperator(text[i-1]))
 					;
 				else
@@ -466,7 +467,7 @@
 			
 			case SYMBOL:
 			{
-				proxy.SetColor(s, kLSeparatorColor);
+				proxy.SetColor(s, kColorSeparator1);
 				if (isSymbol(text[i-1]))
 					;
 				else
@@ -481,7 +482,7 @@
 			{
 				if (isspace(c))
 					break;
-				proxy.SetColor(i - 1, kLCommentColor);
+				proxy.SetColor(i - 1, kColorComment1);
 				if (c == '#')
 				{
 					// get the preprocessor keyword
@@ -542,7 +543,7 @@
 
 			case IF_ZERO_COMMENT:
 			{
-				proxy.SetColor(i - 1, kLCommentColor);
+				proxy.SetColor(i - 1, kColorComment1);
 				int commentEnd;
 				if (find_comment_end(text + i - 1, size - i + 1, commentEnd)) {
 					i += commentEnd + 1;

Modified: trunk/Languages/Sources/D_Language.cpp
===================================================================
--- trunk/Languages/Sources/D_Language.cpp	2006-11-20 01:19:52 UTC (rev 455)
+++ trunk/Languages/Sources/D_Language.cpp	2006-11-20 16:24:27 UTC (rev 456)
@@ -40,6 +40,7 @@
 */
 
 #include "CLanguageAddOn.h"
+#include "HColorUtils.h"
 
 
 extern "C" {
@@ -120,9 +121,9 @@
 		return;
 
 	switch (state) {
-		case COMMENT1:	proxy.SetColor(0, kLCommentColor);		break;
-		case COMMENT2:	proxy.SetColor(0, kLAltCommentColor);	break;
-		default:		proxy.SetColor(0, kLTextColor);			break;
+		case COMMENT1:	proxy.SetColor(0, kColorComment1); break;
+		case COMMENT2:	proxy.SetColor(0, kColorComment2); break;
+		default:		proxy.SetColor(0, kColorText);     break;
 	}
 
 	const char* text = proxy.Text();
@@ -141,7 +142,7 @@
 		switch (state) {
 			case START:
 				s = i - 1;
-				proxy.SetColor(s, kLTextColor);
+				proxy.SetColor(s, kColorText);
 
 				if (isalpha(c) || c == '_') {
 					kws = proxy.Move(c, 1);
@@ -188,28 +189,28 @@
 
 			case COMMENT1:
 				if ((s == 0 || i > s + 1) && c == '*' && text[i] == '/') {
-					proxy.SetColor(s, kLCommentColor);
+					proxy.SetColor(s, kColorComment1);
 					i++;
 					state = START;
 				} else if (c == 0 || c == '\n') {
-					proxy.SetColor(s, kLCommentColor);
+					proxy.SetColor(s, kColorComment1);
 					leave = true;
 				}
 			break;
 
 			case COMMENT2:
 				if ((s == 0 || i > s + 1) && c == '+' && text[i] == '/') {
-					proxy.SetColor(s, kLAltCommentColor);
+					proxy.SetColor(s, kColorComment2);
 					i++;
 					state = START;
 				} else if (c == 0 || c == '\n') {
-					proxy.SetColor(s, kLAltCommentColor);
+					proxy.SetColor(s, kColorComment2);
 					leave = true;
 				}
 			break;
 
 			case LCOMMENT:
-				proxy.SetColor(s, kLCommentColor);
+				proxy.SetColor(s, kColorComment1);
 				leave = true;
 				if (text[size - 1] == '\n')
 					state = START;
@@ -219,17 +220,17 @@
 				if (!isalnum(c) && c != '_') {
 					int kwc;
 
-					if (i > s + 1 && (kwc = proxy.IsKeyWord(kws)) != 0) {
+					if (i > s + 1 && (kwc = proxy.IsKeyword(kws)) != 0) {
 						switch (kwc) {
-							case 1:	proxy.SetColor(s, kLKeyWordColor); break;
-							case 2:	proxy.SetColor(s, kLUser1); break;
-							case 3:	proxy.SetColor(s, kLUser2); break;
-							case 4:	proxy.SetColor(s, kLUser3); break;
-							case 5:	proxy.SetColor(s, kLUser4); break;
+							case 1:	proxy.SetColor(s, kColorKeyword1);  break;
+							case 2:	proxy.SetColor(s, kColorUserSet1); break;
+							case 3:	proxy.SetColor(s, kColorUserSet2); break;
+							case 4:	proxy.SetColor(s, kColorUserSet3); break;
+							case 5:	proxy.SetColor(s, kColorUserSet4); break;
 						}
 					}
 					else
-						proxy.SetColor(s, kLTextColor);
+						proxy.SetColor(s, kColorText);
 
 					i--;
 					state = START;
@@ -240,7 +241,7 @@
 
 			case SPECIAL_TOKEN:
 				if (c == '\n' || c == 0) {
-					proxy.SetColor(s, kLPreProcessorColor);
+					proxy.SetColor(s, kColorPreprocessor1);
 					state = START;
 					leave = true;
 				}
@@ -248,13 +249,13 @@
 
 			case STRING1:
 				if (c == '"' && !esc) {
-					proxy.SetColor(s, kLStringColor);
+					proxy.SetColor(s, kColorString1);
 					state = START;
 				} else if (c == '\n' || c == 0) {
 					if (text[i - 2] == '\\' && text[i - 3] != '\\') {
-						proxy.SetColor(s, kLStringColor);
+						proxy.SetColor(s, kColorString1);
 					} else {
-						proxy.SetColor(s, kLTextColor);
+						proxy.SetColor(s, kColorText);
 						state = START;
 					}
 					leave = true;
@@ -265,13 +266,13 @@
 
 			case STRING2:
 				if (c == '`' && !esc) {
-					proxy.SetColor(s, kLAltStringColor);
+					proxy.SetColor(s, kColorString2);
 					state = START;
 				} else if (c == '\n' || c == 0) {
 					if (text[i - 2] == '\\' && text[i - 3] != '\\') {
-						proxy.SetColor(s, kLAltStringColor);
+						proxy.SetColor(s, kColorString2);
 					} else {
-						proxy.SetColor(s, kLTextColor);
+						proxy.SetColor(s, kColorText);
 						state = START;
 					}
 					leave = true;
@@ -283,10 +284,10 @@
 					(c == '\'' && !esc && (cc_cnt == 0 || cc_cnt > 8)))
 				{
 					// invalid char constant - either invalid char or too short/long
-					proxy.SetColor(s, kLTextColor);
+					proxy.SetColor(s, kColorText);
 					state = START;
 				} else if (c == '\'' && !esc) {
-					proxy.SetColor(s, kLCharConstColor);
+					proxy.SetColor(s, kColorCharConst);
 					state = START;
 				} else {
 					if (!esc)
@@ -297,7 +298,7 @@
 			break;
 
 			case NUMERIC:
-				proxy.SetColor(s, kLNumberColor);
+				proxy.SetColor(s, kColorNumber1);
 				if (!(isdigit(text[i - 1]) || (hex_num && isxdigit(text[i - 1]))))
 				{
 					if (text[i - 1] == '.' && floating_point == false && hex_num == false)
@@ -313,7 +314,7 @@
 			break;
 
 			case OPERATOR:
-				proxy.SetColor(s, kLOperatorColor);
+				proxy.SetColor(s, kColorOperator1);
 				if (!isOperator(text[i - 1])) {
 					i--;
 					state = START;
@@ -321,7 +322,7 @@
 			break;
 
 			case SYMBOL:
-				proxy.SetColor(s, kLSeparatorColor);
+				proxy.SetColor(s, kColorSeparator1);
 				if (!isSymbol(text[i - 1])) {
 					i--;
 					state = START;

Modified: trunk/Languages/Sources/Diff_Language.cpp
===================================================================
--- trunk/Languages/Sources/Diff_Language.cpp	2006-11-20 01:19:52 UTC (rev 455)
+++ trunk/Languages/Sources/Diff_Language.cpp	2006-11-20 16:24:27 UTC (rev 456)
@@ -33,8 +33,9 @@
  * each diffed file, too.
  */
 
+#include <String.h>
 #include "CLanguageAddOn.h"
-#include <String.h>
+#include "HColorUtils.h"
 
 extern "C" {
 _EXPORT const char kLanguageName[] = "Diff";
@@ -54,13 +55,13 @@
 {
 	if (strncmp(proxy.Text(), "diff", 4) == 0
 	|| strncmp(proxy.Text(), "@@", 2) == 0) {
-		proxy.SetColor(0, kLCommentColor);
+		proxy.SetColor(0, kColorComment1);
 	} else if (*proxy.Text() == '-' || *proxy.Text() == '<') {
-		proxy.SetColor(0, kLStringColor);
+		proxy.SetColor(0, kColorString1);
 	} else if (*proxy.Text() == '+' || *proxy.Text() == '>') {
-		proxy.SetColor(0, kLErrorColor);
+		proxy.SetColor(0, kColorError1);
 	} else
-		proxy.SetColor(0, kLTextColor);
+		proxy.SetColor(0, kColorText);
 }
 
 // #pragma mark - function scanning

Modified: trunk/Languages/Sources/HtmlJsPhp_Language.cpp
===================================================================
--- trunk/Languages/Sources/HtmlJsPhp_Language.cpp	2006-11-20 01:19:52 UTC (rev 455)
+++ trunk/Languages/Sources/HtmlJsPhp_Language.cpp	2006-11-20 16:24:27 UTC (rev 456)
@@ -33,10 +33,11 @@
 	Created: 12/07/97 22:01:11 by Maarten Hekkelman
 */
 
-#include "CLanguageAddOn.h"
 #include <cctype>
 #include <cstring>
 #include <stack>
+#include "CLanguageAddOn.h"
+#include "HColorUtils.h"
 
 using namespace std;
 
@@ -64,29 +65,29 @@
 _EXPORT const char kLanguageKeywordFile[] = "keywords.html-js-php";
 
 //	--- Available Colors ---
-//	kLTextColor
-//	kLKeyWordColor,				kLAltKeyWordColor,
-//	kLCommentColor,				kLAltCommentColor,
-//	kLStringColor,				kLAltStringColor,
-//	kLCharConstColor,
-//	kLTagColor,
-//	kLSystemIdentifierColor,	kLUserIdentifierColor,
-//	kLNumberColor,				kLAltNumberColor,
-//	kLPreProcessorColor,		kLAltProcessorColor,
-//	kLErrorColor,				kLAltErrorColor,
-//	kLOperatorColor,			kLAltOperatorColor,
-//	kLSeparatorColor,			kLAltSeparatorColor,
-//	kLUser1, kLUser2, kLUser3, kLUser4,
+//	kColorText
+//	kColorKeyword1,				kColorKeyword2,
+//	kColorComment1,				kColorComment2,
+//	kColorString1,				kColorString2,
+//	kColorCharConst,
+//	kColorTag,
+//	kColorIdentifierSystem,	kColorIdentifierUser,
+//	kColorNumber1,				kColorNumber2,
+//	kColorPreprocessor1,		kColorPreprocessor2,
+//	kColorError1,				kColorError2,
+//	kColorOperator1,			kColorOperator2,
+//	kColorSeparator1,			kColorSeparator2,
+//	kColorUserSet1, kColorUserSet2, kColorUserSet3, kColorUserSet4,
 
 // Translate from pepper-colors to pe-colors
 enum {
-	kLngColorHtmlKeyword	= kLAltKeyWordColor,
-	kLngColorHtmlAttribute	= kLAltKeyWordColor,
-	kLngColorJsKeyword		= kLKeyWordColor,
-	kLngColorPhpKeyword		= kLKeyWordColor,
-	kLngColorSpecialChar	= kLUser4,
-	kLngColorTagString		= kLStringColor,
-	kLngColorPhpFunction	= kLUser4
+	kLngColorHtmlKeyword	= kColorKeyword2,
+	kLngColorHtmlAttribute	= kColorKeyword2,
+	kLngColorJsKeyword		= kColorKeyword1,
+	kLngColorPhpKeyword		= kColorKeyword1,
+	kLngColorSpecialChar	= kColorUserSet4,
+	kLngColorTagString		= kColorString1,
+	kLngColorPhpFunction	= kColorUserSet4
 };
 
 enum {
@@ -286,7 +287,7 @@
 	int color, kwc;
 	bool leave = false, esc = false, script = false, percent = false;
 	
-	proxy.SetColor(0, kLTextColor);
+	proxy.SetColor(0, kColorText);
 	
 	if (size <= 0)
 		return;
@@ -315,7 +316,7 @@
 					
 				if ((leave || state != START) && s < i)
 				{
-					proxy.SetColor(s, kLTextColor);
+					proxy.SetColor(s, kColorText);
 					s = i - 1;
 				}
 				break;
@@ -331,7 +332,7 @@
 				}
 				else if (c == '?' || c == '%')
 				{
-					proxy.SetColor(s, kLTagColor);
+					proxy.SetColor(s, kColorTag);
 					s = i;
 					
 					if (strncasecmp(text + s, "php", 3) == 0)
@@ -345,14 +346,14 @@
 				}
 				else if (isalpha(c))
 				{
-					proxy.SetColor(s, kLTagColor);
+					proxy.SetColor(s, kColorTag);
 					s = i - 1;
 					kws = proxy.Move(tolower(c), 1);
 					state = TAGSTARTKEYWORD;
 				}
 				else if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s, kLTagColor);
+					proxy.SetColor(s, kColorTag);
 					leave = true;
 				}
 				else if (!isspace(c))
@@ -366,14 +367,14 @@
 				DEB_PrintState(state, c);
 				if (isalpha(c))
 				{
-					proxy.SetColor(s, kLTagColor);
+					proxy.SetColor(s, kColorTag);
 					s = i - 1;
 					kws = proxy.Move(tolower(c), 1);
 					state = TAGSTARTKEYWORD;
 				}
 				else if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s, kLTagColor);
+					proxy.SetColor(s, kColorTag);
 					leave = true;
 				}
 				else if (!isspace(c))
@@ -387,14 +388,14 @@
 				DEB_PrintState(state, c);
 				if (!isalnum(c) && c != '-')
 				{
-					switch (kwc = proxy.IsKeyWord(kws))
+					switch (kwc = proxy.IsKeyword(kws))
 					{
-						case kKwHtmlTag:   color = kLKeyWordColor; break;
-						case kKwUserset1:  color = kLUser1; break;
-						case kKwUserset2:  color = kLUser2; break;
-						case kKwUserset3:  color = kLUser3; break;
-						case kKwUserset4:  color = kLUser4; break;
-						default:           color = kLTagColor; break;
+						case kKwHtmlTag:  color = kColorKeyword1; break;
+						case kKwUserset1: color = kColorUserSet1; break;
+						case kKwUserset2: color = kColorUserSet2; break;
+						case kKwUserset3: color = kColorUserSet3; break;
+						case kKwUserset4: color = kColorUserSet4; break;
+						default:          color = kColorTag;      break;
 					}
 					proxy.SetColor(s, color);
 					DEB_PrintSetKw(state, kwc);
@@ -415,32 +416,32 @@
 				{
 					case 0:
 					case '\n':
-						proxy.SetColor(s, kLTagColor);
+						proxy.SetColor(s, kColorTag);
 						leave = true;
 						break;
 					case '>':
-						proxy.SetColor(s, kLTagColor);
+						proxy.SetColor(s, kColorTag);
 						s = i;
-						proxy.SetColor(s, kLTextColor);
+						proxy.SetColor(s, kColorText);
 						if (script)
 							state = JAVASCRIPT;
 						else
 							state = START;
 						break;
 					case '"':
-						proxy.SetColor(s, kLTagColor);
+						proxy.SetColor(s, kColorTag);
 						s = i - 1;
 						state = TAGSTRING1;
 						break;
 					case '\'':
-						proxy.SetColor(s, kLTagColor);
+						proxy.SetColor(s, kColorTag);
 						s = i - 1;
 						state = TAGSTRING2;
 						break;
 					case '!':
 						if (i == s + 2)
 						{
-							proxy.SetColor(s, kLTagColor);
+							proxy.SetColor(s, kColorTag);
 							state = COMMENT_DTD;
 							forceState = START;
 						}
@@ -448,7 +449,7 @@
 					default:
 						if (isalpha(c))
 						{
-							proxy.SetColor(s, kLTagColor);
+							proxy.SetColor(s, kColorTag);
 							s = i - 1;
 							kws = proxy.Move(tolower(c), 1);
 							state = TAGATTRIBUTE;
@@ -491,14 +492,14 @@
 				DEB_PrintState(state, c);
 				if (!isalnum(c) && c != '-')
 				{

[... truncated: 3598 lines follow ...]


From hoern at mail.berlios.de  Mon Nov 20 18:45:34 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Mon, 20 Nov 2006 18:45:34 +0100
Subject: [pe-commits] r457 - trunk/Sources
Message-ID: <200611201745.kAKHjYk5027750@sheep.berlios.de>

Author: hoern
Date: 2006-11-20 18:45:29 +0100 (Mon, 20 Nov 2006)
New Revision: 457
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=457&view=rev

Added:
   trunk/Sources/CHtmlBar.cpp
   trunk/Sources/CHtmlBar.h
   trunk/Sources/CLanguageInterface.cpp
   trunk/Sources/CLanguageInterface.h
   trunk/Sources/PIdeCompat.h
Removed:
   trunk/Sources/CHTMLBar.cpp
   trunk/Sources/CHTMLBar.h
   trunk/Sources/CLangIntf.cpp
   trunk/Sources/CLangIntf.h
   trunk/Sources/PIDECompat.h
Modified:
   trunk/Sources/CInfoDialog.cpp
   trunk/Sources/CLanguageAddOn.cpp
   trunk/Sources/CLanguageAddOn.h
   trunk/Sources/CPrefsDialog.cpp
   trunk/Sources/Jamfile
   trunk/Sources/PApp.cpp
   trunk/Sources/PFindFunctionDialog.h
   trunk/Sources/PText.cpp
   trunk/Sources/PText.h
Log:
* CLangIntf renamed to CLanguageInterface
* PIDECompat.h renamed to PIdeCompat.h
* CHTML[Bar,Button,ButtonPane,CmdButton,Dialog,Menu,SimpleButton] -> CHtml...


Deleted: trunk/Sources/CHTMLBar.cpp

Deleted: trunk/Sources/CHTMLBar.h

Copied: trunk/Sources/CHtmlBar.cpp (from rev 456, trunk/Sources/CHTMLBar.cpp)
===================================================================
--- trunk/Sources/CHTMLBar.cpp	2006-11-20 16:24:27 UTC (rev 456)
+++ trunk/Sources/CHtmlBar.cpp	2006-11-20 17:45:29 UTC (rev 457)
@@ -0,0 +1,465 @@
+/*	$Id$
+	
+	Copyright 1996, 1997, 1998, 2002
+	        Hekkelman Programmatuur B.V.  All rights reserved.
+	
+	Redistribution and use in source and binary forms, with or without
+	modification, are permitted provided that the following conditions are met:
+	1. Redistributions of source code must retain the above copyright notice,
+	   this list of conditions and the following disclaimer.
+	2. Redistributions in binary form must reproduce the above copyright notice,
+	   this list of conditions and the following disclaimer in the documentation
+	   and/or other materials provided with the distribution.
+	3. All advertising materials mentioning features or use of this software
+	   must display the following acknowledgement:
+	   
+	    This product includes software developed by Hekkelman Programmatuur B.V.
+	
+	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
+	   promote products derived from this software without specific prior
+	   written permission.
+	
+	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
+	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+	AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+	EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+	PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
+
+	Created: 03/09/98 23:14:35
+*/
+
+#include "pe.h"
+#include "CHtmlBar.h"
+#include "PApp.h"
+#include "HPreferences.h"
+#include "PDoc.h"
+#include "PText.h"
+#include "PMessages.h"
+#include "HAppResFile.h"
+#include "HStream.h"
+#include "HDefines.h"
+#include "ResourcesMisc.h"
+#include "Prefs.h"
+
+CHtmlBar *CHtmlBar::sfInstance;
+
+CHtmlBar* CHtmlBar::Instance()
+{
+	if (sfInstance == NULL)
+		sfInstance = new CHtmlBar();
+
+	return sfInstance;
+} /* CHtmlBar::Instance */
+
+void CHtmlBar::Close()
+{
+	if (sfInstance)
+	{
+		sfInstance->Lock();
+	
+		gPrefs->SetPrefRect(prf_R_HtmlPalettePos, sfInstance->Frame());
+
+		sfInstance->Quit();
+	}
+} /* CHtmlBar::Close */
+
+CHtmlBar::CHtmlBar()
+	: BWindow(gPrefs->GetPrefRect(prf_R_HtmlPalettePos, BRect(20, 20, 120, 120)),
+		"HTML Palette",
+		B_FLOATING_WINDOW,
+		B_AVOID_FRONT | B_AVOID_FOCUS | B_WILL_ACCEPT_FIRST_CLICK | B_NOT_RESIZABLE | B_NOT_ZOOMABLE)
+{
+	const void *p;
+	size_t size;
+	
+	if (gPrefsDir.Contains("HTML Palette"))
+	{
+		try
+		{
+			BEntry e;
+			BFile f;
+			BResources r;
+			
+			FailOSErr(gPrefsDir.FindEntry("HTML Palette", &e, true));
+			FailOSErr(f.SetTo(&e, B_READ_ONLY));
+			FailOSErr(r.SetTo(&f));
+			
+			size_t size;
+			p = r.FindResource(rtyp_Htmp, (int32)rid_Htmp_HtmlPalette, &size);
+			if (p == NULL) THROW(("The custom HTML Palette file does not contain a valid palette resource"));
+		}
+		catch (HErr& e)
+		{
+			e.DoError();
+			p = HResources::GetResource(rtyp_Htmp, rid_Htmp_HtmlPalette, size);
+		}
+	}
+	else
+		p = HResources::GetResource(rtyp_Htmp, rid_Htmp_HtmlPalette, size);
+	
+	if (p == NULL) THROW(("Could not find a palette resource"));
+	
+	BMemoryIO data(p, size);
+	BPositionIO& buf = data;
+	
+	char barname[256];
+	long flags, width;
+	
+	buf >> barname >> flags >> width;
+	
+	BRect frame(Bounds());
+	frame.right = width;
+	
+	AddChild(fButtonPane = new CHtmlButtonPane(frame, "buttonpane", data));
+
+	SetTitle(barname);
+	ResizeTo(width, fButtonPane->Bounds().Height() - 2);
+	
+	BRect screenR;
+	do { screenR = BScreen().Frame(); } while (false);
+	
+	frame = Frame();
+	if (frame.left < screenR.left)			frame.OffsetBy(screenR.left - frame.left, 0);
+	if (frame.top < screenR.top)			frame.OffsetBy(0, screenR.top - frame.top);
+	if (frame.right > screenR.right)			frame.OffsetBy(screenR.right - frame.right, 0);
+	if (frame.bottom > screenR.bottom)	frame.OffsetBy(0, screenR.bottom - frame.bottom);
+	
+	if (Frame() != frame)
+		MoveTo(frame.left, frame.top);
+} /* CHtmlBar::CHtmlBar */
+			
+void CHtmlBar::MessageReceived(BMessage *msg)
+{
+	BWindow::MessageReceived(msg);
+} /* CHtmlBar::MessageReceived */
+
+bool CHtmlBar::QuitRequested()
+{
+	Hide();
+	return false;
+} /* CHtmlBar::QuitRequested */
+
+#pragma mark - Pane
+
+CHtmlButtonPane::CHtmlButtonPane(BRect frame, const char *name, BPositionIO& data)
+	: BView(frame, name, 0, B_WILL_DRAW)
+{
+	long bCnt;
+	
+	data >> bCnt;
+	
+	be_plain_font->GetHeight(&fFH);
+
+	BRect r;
+	r = Bounds();
+	r.bottom = r.top + ButtonHeight();
+
+	while (bCnt--)
+	{
+		long type;
+		
+		data >> type;
+		
+		switch (type)
+		{
+			case 'btn ':
+				fButtons.push_back(new CHtmlSimpleButton(r, data, this));
+				break;
+			case 'menu':
+				fButtons.push_back(new CHtmlMenu(r, data, this));
+				break;
+			case 'cmnd':
+				fButtons.push_back(new CHtmlCmdButton(r, data, this));
+				break;
+			case 'dlog':
+				fButtons.push_back(new CHtmlDialog(r, data, this));
+				break;
+		}
+		
+		r.OffsetBy(0, ButtonHeight());
+	}
+	
+	ResizeTo(r.Width(), r.top);
+} /* CHtmlButtonPane::CHtmlButtonPane */
+			
+void CHtmlButtonPane::Draw(BRect /*update*/)
+{
+	for (int i = 0; i < fButtons.size(); i++)
+		fButtons[i]->Draw();
+} /* CHtmlButtonPane::Draw */
+
+void CHtmlButtonPane::MouseDown(BPoint where)
+{
+	for (int i = 0; i < fButtons.size(); i++)
+		if (fButtons[i]->Frame().Contains(where))
+		{
+			fButtons[i]->Click(where);
+			break;
+		}
+} /* CHtmlButtonPane::MouseDown */
+
+#pragma mark - Button
+
+CHtmlButton::CHtmlButton(BRect frame, BPositionIO& data, CHtmlButtonPane *pane)
+{
+	fFrame = frame;
+	fPane = pane;
+	
+	char label[256];
+	data >> label;
+	fLabel = strdup(label);
+} /* CHtmlButton::CHtmlButton */
+
+CHtmlButton::~CHtmlButton()
+{
+	free(fLabel);
+} /* CHtmlButton::~CHtmlButton */
+
+void CHtmlButton::Draw()
+{
+	fPane->SetLowColor(ui_color(B_PANEL_BACKGROUND_COLOR));
+	fPane->SetFont(be_plain_font);
+	
+	fPane->FillRect(fFrame, B_SOLID_LOW);
+
+	BRect r = fFrame;
+
+	r.bottom -= 1;
+	
+	fPane->BeginLineArray(9);
+	
+	fPane->AddLine(r.LeftBottom(), r.RightBottom(), tint_color(ui_color(B_PANEL_BACKGROUND_COLOR), B_DARKEN_4_TINT));
+	
+	r.bottom -= 1;
+	
+	fPane->AddLine(BPoint(r.left + 1, r.bottom), r.RightBottom(), tint_color(ui_color(B_PANEL_BACKGROUND_COLOR), B_DARKEN_2_TINT));
+	fPane->AddLine(r.RightBottom(), BPoint(r.right, r.top + 1), tint_color(ui_color(B_PANEL_BACKGROUND_COLOR), B_DARKEN_2_TINT));
+
+	r.InsetBy(1, 1);
+
+	fPane->AddLine(r.LeftBottom(), r.RightBottom(), tint_color(ui_color(B_PANEL_BACKGROUND_COLOR), B_DARKEN_1_TINT));
+	fPane->AddLine(r.RightBottom(), r.RightTop(), tint_color(ui_color(B_PANEL_BACKGROUND_COLOR), B_DARKEN_1_TINT));
+	fPane->AddLine(r.LeftTop(), r.RightTop(), kWhite);
+	fPane->AddLine(r.LeftTop(), r.LeftBottom(), kWhite);
+
+	r.InsetBy(1, 1);
+
+	fPane->AddLine(r.LeftTop(), r.RightTop(), kWhite);
+	fPane->AddLine(r.LeftTop(), r.LeftBottom(), kWhite);
+	
+	fPane->EndLineArray();	
+	
+	fPane->SetHighColor(kBlack);
+	
+	fPane->MovePenTo(r.left + 5, r.bottom - fPane->BaseLine());
+	fPane->DrawString(fLabel);
+} /* CHtmlButton::Draw */
+
+bool CHtmlButton::TrackClick()
+{
+	BPoint p;
+	unsigned long btns;
+	bool in = false;
+	
+	do
+	{
+		fPane->GetMouse(&p, &btns);
+		
+		if (fFrame.Contains(p))
+		{
+			if (! in)
+			{
+				in = true;
+				
+				BRect r(fFrame);
+				r.bottom -= 2;
+				
+				r.InsetBy(1, 1);
+
+				fPane->SetHighColor(kWhite);
+				fPane->SetLowColor(kBlack);
+
+				fPane->FillRect(r, B_SOLID_LOW);
+				
+				fPane->MovePenTo(r.left + 6, r.bottom - fPane->BaseLine() - 1);
+				fPane->DrawString(fLabel);
+			}
+		}
+		else
+		{
+			if (in)
+			{
+				in = false;
+				Draw();
+			}
+		}
+		
+		snooze(10000);
+	}
+	while (btns);
+	
+	if (in)
+		Draw();
+
+	return in;
+} /* CHtmlButton::TrackClick */
+			
+CHtmlSimpleButton::CHtmlSimpleButton(BRect frame, BPositionIO& data, CHtmlButtonPane *pane)
+	: CHtmlButton(frame, data, pane)
+{
+	char glos[256];
+	data >> glos;
+	fGlossary = strdup(glos);
+} /* CHtmlSimpleButton::CHtmlSimpleButton */
+
+CHtmlSimpleButton::~CHtmlSimpleButton()
+{
+	free(fGlossary);
+} /* CHtmlSimpleButton::~CHtmlSimpleButton */
+			
+void CHtmlSimpleButton::Draw()
+{
+	CHtmlButton::Draw();
+} /* CHtmlSimpleButton::Draw */
+
+void CHtmlSimpleButton::Click(BPoint /*where*/)
+{
+	if (TrackClick())
+	{
+		PDoc *doc = PDoc::TopWindow();
+		if (doc)
+		{
+			BMessage msg(msg_HtmlButton);
+			
+			msg.AddString("glossy", fGlossary);
+			
+			doc->PostMessage(&msg, doc->TextView());
+		}
+	}
+} /* CHtmlSimpleButton::Click */
+			
+CHtmlMenu::CHtmlMenu(BRect frame, BPositionIO& data, CHtmlButtonPane *pane)
+	: CHtmlButton(frame, data, pane)
+{
+	fMenu = new BPopUpMenu("mymenu");
+	fMenu->SetFont(be_plain_font);
+	
+	char label[256], glos[256];
+	
+	while (true)
+	{
+		data >> label;
+		
+		if (label[0] == 0)
+			break;
+		
+		data >> glos;
+		
+		fMenu->AddItem(new CItem(label, glos));
+	}
+} /* CHtmlMenu::CHtmlMenu */
+
+CHtmlMenu::~CHtmlMenu()
+{
+	delete fMenu;
+} /* CHtmlMenu::~CHtmlMenu */
+
+void CHtmlMenu::Draw()
+{
+	CHtmlButton::Draw();
+	
+	float x = fFrame.right - 10;
+	float y = fFrame.top + 7;
+	
+	fPane->BeginLineArray(3);
+	fPane->AddLine(BPoint(x, y), BPoint(x + 4, y), kBlack);
+	y += 1; x += 1;
+	fPane->AddLine(BPoint(x, y), BPoint(x + 2, y), kBlack);
+	y += 1; x += 1;
+	fPane->AddLine(BPoint(x, y), BPoint(x, y), kBlack);
+	fPane->EndLineArray();
+} /* CHtmlMenu::Draw */
+
+void CHtmlMenu::Click(BPoint /*where*/)
+{
+	BRect r(fFrame);
+	r.bottom -= 2;
+	
+	r.InsetBy(1, 1);
+
+	fPane->SetHighColor(kWhite);
+	fPane->SetLowColor(kBlack);
+
+	fPane->FillRect(r, B_SOLID_LOW);
+	
+	fPane->MovePenTo(r.left + 6, r.bottom - 3);
+	fPane->DrawString(fLabel);
+
+	CItem *item = dynamic_cast<CItem*>(fMenu->Go(fPane->ConvertToScreen(fFrame.LeftBottom()), false, true, fPane->ConvertToScreen(fFrame)));
+
+	if (item)
+	{
+		PDoc *doc = PDoc::TopWindow();
+		if (doc)
+		{
+			BMessage msg(msg_HtmlButton);
+			
+			msg.AddString("glossy", item->fGlossy);
+			
+			doc->PostMessage(&msg, doc->TextView());
+		}
+	}
+	
+	Draw();
+} /* CHtmlMenu::Click */
+
+CHtmlCmdButton::CHtmlCmdButton(BRect frame, BPositionIO& data, CHtmlButtonPane *pane)
+	: CHtmlButton(frame, data, pane)
+{
+	data >> fCmd;
+} /* CHtmlCmdButton::CHtmlCmdButton */
+			
+void CHtmlCmdButton::Click(BPoint /*where*/)
+{
+	if (TrackClick())
+	{
+		PDoc *doc = PDoc::TopWindow();
+		if (doc)
+			doc->PostMessage(fCmd, doc->TextView());
+	}
+} /* CHtmlCmdButton::Click */
+
+CHtmlDialog::CHtmlDialog(BRect frame, BPositionIO& data, CHtmlButtonPane *pane)
+	: CHtmlButton(frame, data, pane)
+{
+	char s[512];
+	data >> s;
+	
+	fExt = strdup(s);
+} /* CHtmlDialog::CHtmlDialog */
+
+CHtmlDialog::~CHtmlDialog()
+{
+	free(fExt);
+} /* CHtmlDialog::~CHtmlDialog */
+
+void CHtmlDialog::Click(BPoint /*where*/)
+{
+	if (TrackClick())
+	{
+		PDoc *doc = PDoc::TopWindow();
+		if (doc)
+		{
+			BMessage msg(msg_HtmlExtension);
+			
+			msg.AddString("ext", fExt);
+			
+			doc->PostMessage(&msg, doc->TextView());
+		}
+	}
+} /* CHtmlDialog::Click */

Copied: trunk/Sources/CHtmlBar.h (from rev 456, trunk/Sources/CHTMLBar.h)
===================================================================
--- trunk/Sources/CHTMLBar.h	2006-11-20 16:24:27 UTC (rev 456)
+++ trunk/Sources/CHtmlBar.h	2006-11-20 17:45:29 UTC (rev 457)
@@ -0,0 +1,173 @@
+/*	$Id$
+	
+	Copyright 1996, 1997, 1998, 2002
+	        Hekkelman Programmatuur B.V.  All rights reserved.
+	
+	Redistribution and use in source and binary forms, with or without
+	modification, are permitted provided that the following conditions are met:
+	1. Redistributions of source code must retain the above copyright notice,
+	   this list of conditions and the following disclaimer.
+	2. Redistributions in binary form must reproduce the above copyright notice,
+	   this list of conditions and the following disclaimer in the documentation
+	   and/or other materials provided with the distribution.
+	3. All advertising materials mentioning features or use of this software
+	   must display the following acknowledgement:
+	   
+	    This product includes software developed by Hekkelman Programmatuur B.V.
+	
+	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
+	   promote products derived from this software without specific prior
+	   written permission.
+	
+	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
+	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+	AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+	EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+	PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
+
+	Created: 03/09/98 22:53:28
+*/
+
+#ifndef CHTMLBAR_H
+#define CHTMLBAR_H
+
+
+class CHtmlBar;
+class CHtmlButtonPane;
+class CHtmlButton;
+
+class CHtmlBar : public BWindow {
+public:
+
+virtual	void MessageReceived(BMessage *msg);
+
+static		CHtmlBar* Instance();
+static		void Close();
+			
+private:
+			CHtmlBar();
+virtual	bool QuitRequested();
+
+static		CHtmlBar *sfInstance;
+			CHtmlButtonPane *fButtonPane;
+};
+
+#pragma mark - Pane
+
+class CHtmlButtonPane : public BView {
+public:
+			CHtmlButtonPane(BRect frame, const char *name, BPositionIO& data);
+			
+virtual	void Draw(BRect update);
+virtual	void MouseDown(BPoint where);
+
+			float BaseLine() const;
+			float ButtonHeight() const;
+			
+private:
+			vector<CHtmlButton*> fButtons;
+			font_height fFH;
+};
+
+inline float CHtmlButtonPane::BaseLine() const
+{
+	return fFH.descent;
+} /* CHtmlButtonPane::BaseLine */
+
+inline float CHtmlButtonPane::ButtonHeight() const
+{
+	return fFH.ascent + fFH.descent + fFH.leading + 7;
+} /* CHtmlButtonPane::ButtonHeight */
+
+#pragma mark - Button
+
+class CHtmlButton {
+public:
+			CHtmlButton(BRect frame, BPositionIO& data, CHtmlButtonPane *pane);
+virtual	~CHtmlButton();
+			
+			BRect Frame() const;
+			
+virtual	void Draw();
+virtual	void Click(BPoint where) = 0;
+			
+protected:
+			
+			bool TrackClick();
+			
+			BRect fFrame;
+			CHtmlButtonPane *fPane;
+			char *fLabel;
+};
+
+class CHtmlSimpleButton : public CHtmlButton {
+public:
+			CHtmlSimpleButton(BRect frame, BPositionIO& data, CHtmlButtonPane *pane);
+			~CHtmlSimpleButton();
+			
+virtual	void Draw();
+virtual	void Click(BPoint where);
+			
+private:
+			char *fGlossary;
+};
+
+class CHtmlMenu : public CHtmlButton {
+public:
+			CHtmlMenu(BRect frame, BPositionIO& data, CHtmlButtonPane *pane);
+			~CHtmlMenu();
+
+virtual	void Draw();
+virtual	void Click(BPoint where);
+
+private:
+			class CItem : public BMenuItem {
+			public:
+				CItem(const char *label, const char *glossy)
+					: BMenuItem(label, NULL)
+				{
+					fGlossy = strdup(glossy);
+				};
+				~CItem()
+				{
+					free(fGlossy);
+				};
+					
+				char *fGlossy;
+			};
+			
+			BPopUpMenu *fMenu;
+};
+
+class CHtmlCmdButton : public CHtmlButton {
+public:
+			CHtmlCmdButton(BRect frame, BPositionIO& data, CHtmlButtonPane *pane);
+			
+virtual	void Click(BPoint where);
+			
+private:
+			unsigned long fCmd;
+};
+
+class CHtmlDialog : public CHtmlButton {
+public:
+			CHtmlDialog(BRect frame, BPositionIO& data, CHtmlButtonPane *pane);
+			~CHtmlDialog();
+
+virtual	void Click(BPoint where);
+
+private:
+			char *fExt;
+};
+
+inline BRect CHtmlButton::Frame() const
+{
+	return fFrame;
+} /* CHtmlButton::Frame */
+
+#endif // CHTMLBAR_H

Modified: trunk/Sources/CInfoDialog.cpp
===================================================================
--- trunk/Sources/CInfoDialog.cpp	2006-11-20 16:24:27 UTC (rev 456)
+++ trunk/Sources/CInfoDialog.cpp	2006-11-20 17:45:29 UTC (rev 457)
@@ -40,7 +40,7 @@
 #include "PText.h"
 #include "PMessages.h"
 #include "PToolBar.h"
-#include "CLangIntf.h"
+#include "CLanguageInterface.h"
 #include "HPreferences.h"
 #include "HDefines.h"
 #include "HTabSheet.h"
@@ -180,9 +180,9 @@
 	FailNil(mf);
 	lang = mf->Menu();
 	
-	CLangIntf *intf;
+	CLanguageInterface *intf;
 	int cookie = 0;
-	while ((intf = CLangIntf::NextIntf(cookie)) != NULL)
+	while ((intf = CLanguageInterface::NextIntf(cookie)) != NULL)
 		lang->AddItem(new BMenuItem(intf->Name(), new BMessage(msg_FieldChanged)));
 
 	lang->SetRadioMode(true);

Deleted: trunk/Sources/CLangIntf.cpp

Deleted: trunk/Sources/CLangIntf.h

Modified: trunk/Sources/CLanguageAddOn.cpp
===================================================================
--- trunk/Sources/CLanguageAddOn.cpp	2006-11-20 16:24:27 UTC (rev 456)
+++ trunk/Sources/CLanguageAddOn.cpp	2006-11-20 17:45:29 UTC (rev 457)
@@ -37,7 +37,7 @@
 #include "PText.h"
 #include "PApp.h"
 #include "CLanguageAddOn.h"
-#include "CLangIntf.h"
+#include "CLanguageInterface.h"
 #include "PMessages.h"
 #include "PItalicMenuItem.h"
 #include "utf-support.h"
@@ -46,7 +46,7 @@
 #include "HError.h"
 #include "HColorUtils.h"
 
-CLanguageProxy::CLanguageProxy(CLangIntf& intf, const char *text, int size,
+CLanguageProxy::CLanguageProxy(CLanguageInterface& intf, const char *text, int size,
 	int *starts, rgb_color *colors)
 	: fText(text)
 	, fSize(size)
@@ -60,7 +60,7 @@
 {
 } /* CLanguageProxy::CLanguageProxy */
 
-CLanguageProxy::CLanguageProxy(CLangIntf& intf, PText& text,
+CLanguageProxy::CLanguageProxy(CLanguageInterface& intf, PText& text,
 	CFunctionScanHandler* handler)
 	: fText(text.Text())
 	, fSize(text.Size())

Modified: trunk/Sources/CLanguageAddOn.h
===================================================================
--- trunk/Sources/CLanguageAddOn.h	2006-11-20 16:24:27 UTC (rev 456)
+++ trunk/Sources/CLanguageAddOn.h	2006-11-20 17:45:29 UTC (rev 457)
@@ -47,7 +47,7 @@
 };
 
 class CFunctionScanHandler;
-class CLangIntf;
+class CLanguageInterface;
 class PText;
 
 /*
@@ -60,8 +60,8 @@
 
 class CLanguageProxy {
 public:
-		CLanguageProxy(CLangIntf& intf, const char *text, int size, int *starts = NULL, rgb_color *colors = NULL);
-		CLanguageProxy(CLangIntf& intf, PText& text, CFunctionScanHandler* handler = NULL);
+		CLanguageProxy(CLanguageInterface& intf, const char *text, int size, int *starts = NULL, rgb_color *colors = NULL);
+		CLanguageProxy(CLanguageInterface& intf, PText& text, CFunctionScanHandler* handler = NULL);
 		
 /*
 	Use the next two methods to recognize keywords in the text.
@@ -134,7 +134,7 @@
 		const char *fText;
 		int fSize;
 		int fDeprecated_was_Encoding;		// deprecated, is always set to 0
-		CLangIntf& fInterface;
+		CLanguageInterface& fInterface;
 		int fCIndx;
 		int *fStarts;
 		rgb_color *fColors;

Copied: trunk/Sources/CLanguageInterface.cpp (from rev 456, trunk/Sources/CLangIntf.cpp)
===================================================================
--- trunk/Sources/CLangIntf.cpp	2006-11-20 16:24:27 UTC (rev 456)
+++ trunk/Sources/CLanguageInterface.cpp	2006-11-20 17:45:29 UTC (rev 457)
@@ -0,0 +1,683 @@
+/*	$Id$
+	
+	Copyright 1996, 1997, 1998, 2002
+	        Hekkelman Programmatuur B.V.  All rights reserved.
+	
+	Redistribution and use in source and binary forms, with or without
+	modification, are permitted provided that the following conditions are met:
+	1. Redistributions of source code must retain the above copyright notice,
+	   this list of conditions and the following disclaimer.
+	2. Redistributions in binary form must reproduce the above copyright notice,
+	   this list of conditions and the following disclaimer in the documentation
+	   and/or other materials provided with the distribution.
+	3. All advertising materials mentioning features or use of this software
+	   must display the following acknowledgement:
+	   
+	    This product includes software developed by Hekkelman Programmatuur B.V.
+	
+	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
+	   promote products derived from this software without specific prior
+	   written permission.
+	
+	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
+	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+	AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+	EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+	PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
+	
+	Created: 09/19/97 10:49:36
+*/
+
+#include "pe.h"
+#include "PText.h"
+#include "CLanguageInterface.h"
+#include "CKeywords.h"
+#include "PApp.h"
+#include "CLanguageAddOn.h"
+#include "CAlloca.h"
+#include "Utils.h"
+#include "HError.h"
+#include "HAppResFile.h"
+#include "HPreferences.h"
+#include "HColorUtils.h"
+#include "ResourcesMisc.h"
+#include "Prefs.h"
+#include <algorithm>
+
+unsigned char *CLanguageInterface::sfWordBreakTable = NULL;
+
+class ext {
+public:
+	ext();
+	ext(const char *e);
+	
+	bool operator<(const ext& e) const;
+	bool operator==(const ext& e) const;
+	
+	char t[12];
+};
+		
+static map<ext, CLanguageInterface*> sInterfaces;
+static CLanguageInterface *sDefault;
+vector<CLanguageInterface*> CLanguageInterface::fInterfaces;
+
+ext::ext()
+{
+	t[0] = 0;
+} /* CLanguageInterface::ext::ext */
+
+ext::ext(const char *e)
+{
+	if (strlen(e) > 11) THROW(("Extension `%s' is too long", e));
+	
+	strcpy(t, e);
+} /* CLanguageInterface::ext::ext */
+
+bool ext::operator<(const ext& e) const
+{
+	return strcmp(t, e.t) < 0;
+} /* CLanguageInterface::ext::operator< */
+
+bool ext::operator==(const ext& e) const
+{
+	return strcmp(t, e.t) == 0;
+} /* CLanguageInterface::ext::operator== */
+
+#pragma mark -
+
+CLanguageInterface::CLanguageInterface()
+	:	fHaveParsedKeywords(false)
+{
+	if (sfWordBreakTable == NULL)
+	{
+		sfWordBreakTable = (unsigned char *)HResources::GetResource(rtyp_Wbrt, rid_Wbrt_WordbreakTable);
+		if (sfWordBreakTable == NULL) THROW(("Missing Resource!"));
+	}
+	
+//	fImage = -1;
+
+	fBalance = NULL;
+	fScanForFunctions = NULL;
+	fColorLine = NULL;
+	fFindNextWord = NULL;
+	fLanguage = "None";
+	fExtensions = "";
+	fKeywordFile = NULL;
+	fLineCommentStart = fLineCommentEnd = "";
+	fInterfaceVersion = 1;
+} /* CLanguageInterface::CLanguageInterface */
+
+CLanguageInterface::CLanguageInterface(const char *path, image_id image)
+	:	fHaveParsedKeywords(false)
+{
+	if (sfWordBreakTable == NULL)
+	{
+		sfWordBreakTable = (unsigned char *)HResources::GetResource(rtyp_Wbrt, rid_Wbrt_WordbreakTable);
+		if (sfWordBreakTable == NULL) THROW(("Missing Resource!"));
+	}
+	
+	fImage = image;
+	if (fImage < 0) THROW(("Error loading language extension: %s", strerror(fImage)));
+
+	if (get_image_symbol(fImage, "Balance", B_SYMBOL_TYPE_TEXT, (void**)&fBalance) != B_OK)
+		fBalance = NULL;
+	if (get_image_symbol(fImage, "ScanForFunctions", B_SYMBOL_TYPE_TEXT, (void**)&fScanForFunctions) != B_OK)
+		fScanForFunctions = NULL;
+	if (get_image_symbol(fImage, "ColorLine", B_SYMBOL_TYPE_TEXT, (void**)&fColorLine) != B_OK)
+		fColorLine = NULL;
+	if (get_image_symbol(fImage, "FindNextWord", B_SYMBOL_TYPE_TEXT, (void**)&fFindNextWord) != B_OK)
+		fFindNextWord = NULL;
+	FailOSErr(get_image_symbol(fImage, "kLanguageName", B_SYMBOL_TYPE_DATA, (void**)&fLanguage));
+	FailOSErr(get_image_symbol(fImage, "kLanguageExtensions", B_SYMBOL_TYPE_DATA, (void**)&fExtensions));
+	FailOSErr(get_image_symbol(fImage, "kLanguageCommentStart", B_SYMBOL_TYPE_DATA, (void**)&fLineCommentStart));
+	FailOSErr(get_image_symbol(fImage, "kLanguageCommentEnd", B_SYMBOL_TYPE_DATA, (void**)&fLineCommentEnd));
+	FailOSErr(get_image_symbol(fImage, "kLanguageKeywordFile", B_SYMBOL_TYPE_DATA, (void**)&fKeywordFile));
+	int16* versionPtr = NULL;
+	get_image_symbol(fImage, "kInterfaceVersion", B_SYMBOL_TYPE_DATA, (void**)&versionPtr);
+	fInterfaceVersion = versionPtr ? *versionPtr : 1;
+	if (fInterfaceVersion == 1) {
+		if (strlen(fKeywordFile))
+			GenerateKWTables(fKeywordFile, path, ec, accept, base, nxt, chk);
+	}
+} /* CLanguageInterface::CLanguageInterface */
+
+CLanguageInterface::~CLanguageInterface()
+{
+} /* CLanguageInterface::~CLanguageInterface */
+
+template <class T>
+void AddInterface(char *s, T* i)
+{
+	char *e = strtok(s, ";");
+	
+	while (e)
+	{
+		sInterfaces[e] = i;
+		e = strtok(NULL, ";");
+	}
+	
+	free(s);
+} /* AddInterface */
+
+void CLanguageInterface::SetupLanguageInterfaces()
+{
+	sDefault = new CLanguageInterface();
+	AddInterface(strdup(""), sDefault);
+
+	char path[PATH_MAX];
+	
+	BPath p;
+	BEntry e;
+	gAppDir.GetEntry(&e);
+	e.GetPath(&p);
+	strcpy(path, p.Path());
+
+	strcat(path, "/Languages/");
+	
+	char plug[PATH_MAX];
+	DIR *dir = opendir(path);
+
+	if (!dir)
+		return;
+	
+	struct dirent *dent;
+	struct stat stbuf;
+
+	while ((dent = readdir(dir)) != NULL)
+	{
+		strcpy(plug, path);
+		strcat(plug, dent->d_name);
+		status_t err = stat(plug, &stbuf);
+		if (!err && S_ISREG(stbuf.st_mode) &&
+			strcmp(dent->d_name, ".") && strcmp(dent->d_name, ".."))
+		{
+			image_id next;
+			char *l;
+
+			next = load_add_on(plug);
+			if (next > B_ERROR &&
+				(err = get_image_symbol(next, "kLanguageName", B_SYMBOL_TYPE_DATA, (void**)&l)) == B_OK)
+			{
+				if (strlen(l) > 28) THROW(("Language name too long"));
+				CLanguageInterface *intf = new CLanguageInterface(plug, next);
+				fInterfaces.push_back(intf);
+				
+				const char *s = intf->Extensions();
+				AddInterface(strdup(s), intf);
+			}
+		}
+	}
+
+	ChooseDefault();
+} /* CLanguageInterface::SetupLanguageInterfaces */
+
+CLanguageInterface* CLanguageInterface::FindByExtension(const char *filename)
+{
+	char *e;
+	
+	if (filename)
+	{
+		try
+		{
+			if ((e = strrchr(filename, '.')) != NULL && sInterfaces.count(e + 1))
+				return sInterfaces[e + 1];
+			
+			if (strlen(filename) < 11 && sInterfaces.count(filename))
+				return sInterfaces[filename];
+		}
+		catch (...) {}
+	}
+
+	return sDefault;
+} /* CLanguageInterface::FindIntf */
+
+static const char *skip(const char *txt)
+{
+	while (*txt)
+	{
+		switch (*txt)
+		{
+			case '\'':

[... truncated: 839 lines follow ...]


From hoern at mail.berlios.de  Mon Nov 20 19:10:52 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Mon, 20 Nov 2006 19:10:52 +0100
Subject: [pe-commits] r458 - in trunk: Languages/Sources Sources
Message-ID: <200611201810.kAKIAqAj026807@sheep.berlios.de>

Author: hoern
Date: 2006-11-20 19:10:52 +0100 (Mon, 20 Nov 2006)
New Revision: 458
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=458&view=rev

Modified:
   trunk/Languages/Sources/HtmlJsPhp_Language.cpp
   trunk/Sources/CKeywords.cpp
Log:
* A little patch that allows a leading '-' line a keyword file and 
  still have the first set have the keyword id 1


Modified: trunk/Languages/Sources/HtmlJsPhp_Language.cpp
===================================================================
--- trunk/Languages/Sources/HtmlJsPhp_Language.cpp	2006-11-20 17:45:29 UTC (rev 457)
+++ trunk/Languages/Sources/HtmlJsPhp_Language.cpp	2006-11-20 18:10:52 UTC (rev 458)
@@ -117,23 +117,23 @@
 };
 
 enum {
-	kKwHtmlTag			= 2,
-	kKwHtmlAttribute	= 3,
-	kKwJsLanguage		= 4,
-	kKwJsConstants		= 5,	// TODO
-	kKwPhpLanguage		= 6,
-	kKwPhpFunctions		= 7,
-	kKwPhpConstants		= 8,	// TODO
-	kKwUserset1			= 9,
-	kKwUserset2			= 10,
-	kKwUserset3			= 11,
-	kKwUserset4			= 12
+	kKwHtmlTag			= 1,
+	kKwHtmlAttribute	= 2,
+	kKwJsLanguage		= 3,
+	kKwJsConstants		= 4,	// TODO
+	kKwPhpLanguage		= 5,
+	kKwPhpFunctions		= 6,
+	kKwPhpConstants		= 7,	// TODO
+	kKwUserset1			= 8,
+	kKwUserset2			= 9,
+	kKwUserset3			= 10,
+	kKwUserset4			= 11
 };
 
 
-
 #pragma mark Debug-Functions
 
+
 #define DEBUG_PHP 0
 
 #if DEBUG_PHP

Modified: trunk/Sources/CKeywords.cpp
===================================================================
--- trunk/Sources/CKeywords.cpp	2006-11-20 17:45:29 UTC (rev 457)
+++ trunk/Sources/CKeywords.cpp	2006-11-20 18:10:52 UTC (rev 458)
@@ -137,8 +137,9 @@
 						currType = kKeywordUser4;
 					else {
 						// be compatible with old style, meaning that an unknown
-						// '-' entry bumps the type...
-						currType++;
+						// '-' entry bumps the type... Ignore a leading '-' entry
+						if (!kwMap.empty())
+							currType++;
 						// ...and skips to end of line:
 						end = start + strcspn(start, "\n");
 					}



From hoern at mail.berlios.de  Tue Nov 21 19:12:50 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Tue, 21 Nov 2006 19:12:50 +0100
Subject: [pe-commits] r459 - in trunk: Languages/Sources Sources
Message-ID: <200611211812.kALICoaB006299@sheep.berlios.de>

Author: hoern
Date: 2006-11-21 19:12:48 +0100 (Tue, 21 Nov 2006)
New Revision: 459
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=459&view=rev

Modified:
   trunk/Languages/Sources/HtmlJsPhp_Language.cpp
   trunk/Sources/CKeywords.cpp
   trunk/Sources/CKeywords.h
   trunk/Sources/CLanguageAddOn.cpp
   trunk/Sources/CLanguageAddOn.h
   trunk/Sources/CLanguageInterface.cpp
   trunk/Sources/CLanguageInterface.h
Log:
* We now support keywords with the same name in different keyword sets
* It is now possible to restrict CLanguageProxy::IsKeyword() to search
  only in specified sets. See HtmlJsPhp_Language.cpp for example code.
* Several changes and bugfixes in the HTML-JS-PHP addon


Modified: trunk/Languages/Sources/HtmlJsPhp_Language.cpp
===================================================================
--- trunk/Languages/Sources/HtmlJsPhp_Language.cpp	2006-11-20 18:10:52 UTC (rev 458)
+++ trunk/Languages/Sources/HtmlJsPhp_Language.cpp	2006-11-21 18:12:48 UTC (rev 459)
@@ -39,103 +39,95 @@
 #include "CLanguageAddOn.h"
 #include "HColorUtils.h"
 
-using namespace std;
+#define DEBUG_PHP 0
+const bool CASE_SENSITIVE_PHP  = true;
+const bool CASE_SENSITIVE_JS   = true;
+const bool CASE_SENSITIVE_TAG  = true;
+const bool CASE_SENSITIVE_ATTR = true;
 
+
 enum Language {
-	lang_HTML,
-	lang_JavaScript,
-	lang_PHP
+	kLanguageHtml,
+	kLanguageJs,
+	kLanguagePhp
 };
 
-//template <class I1, class I2>
-//inline int strncasecmp(I1 a, I2 b, int l)
-//{
-//	int d = 0;
-//
-//	while (l-- > 0 && d == 0)
-//		d = tolower(*a++) - tolower(*b++);
-//	
-//	return d;
-//}
-
-_EXPORT const char kLanguageName[] = "HTML-JS-PHP";
-_EXPORT const char kLanguageExtensions[] = "html;htm;php";
+_EXPORT const char kLanguageName[]         = "HTML-JS-PHP";
+_EXPORT const char kLanguageExtensions[]   = "html;htm;php";
 _EXPORT const char kLanguageCommentStart[] = "<!";
-_EXPORT const char kLanguageCommentEnd[] = ">";
-_EXPORT const char kLanguageKeywordFile[] = "keywords.html-js-php";
+_EXPORT const char kLanguageCommentEnd[]   = ">";
+_EXPORT const char kLanguageKeywordFile[]  = "keywords.html-js-php";
 
-//	--- Available Colors ---
-//	kColorText
-//	kColorKeyword1,				kColorKeyword2,
-//	kColorComment1,				kColorComment2,
-//	kColorString1,				kColorString2,
-//	kColorCharConst,
-//	kColorTag,
-//	kColorIdentifierSystem,	kColorIdentifierUser,
-//	kColorNumber1,				kColorNumber2,
-//	kColorPreprocessor1,		kColorPreprocessor2,
-//	kColorError1,				kColorError2,
-//	kColorOperator1,			kColorOperator2,
-//	kColorSeparator1,			kColorSeparator2,
-//	kColorUserSet1, kColorUserSet2, kColorUserSet3, kColorUserSet4,
-
-// Translate from pepper-colors to pe-colors
 enum {
-	kLngColorHtmlKeyword	= kColorKeyword2,
-	kLngColorHtmlAttribute	= kColorKeyword2,
-	kLngColorJsKeyword		= kColorKeyword1,
-	kLngColorPhpKeyword		= kColorKeyword1,
-	kLngColorSpecialChar	= kColorUserSet4,
-	kLngColorTagString		= kColorString1,
-	kLngColorPhpFunction	= kColorUserSet4
-};
-
-enum {
 	START = 0,
-		TAGSTART,
-		TAGSTARTKEYWORD,
-		TAGENDKEYWORD,
+		TAG_START,
+		TAG_KEYWORD_START,
+		TAG_KEYWORD_END,
 		TAG,
-		TAGSTRING1,
-		TAGSTRING2,
-		TAGATTRIBUTE,
+		TAG_STRING_DOUBLE_QUOTES,
+		TAG_STRING_SINGLE_QUOTES,
+		TAG_ATTRIBUTE,
 		SPECIAL,
 		COMMENT_DTD,
 		COMMENT,
 	JAVASCRIPT,
-		JS_COMMENT,
-		JS_LCOMMENT,
+		JS_COMMENT_MULTI_LINE,
+		JS_COMMENT_SINGLE_LINE,
 		JS_IDENTIFIER,
-		JS_STRING1,
-		JS_STRING2,
+		JS_STRING_SINGLE_QUOTES,
+		JS_STRING_DOUBLE_QUOTES,
 	PHP_SCRIPT,
 		PHP_IDENTIFIER,
-		PHP_COMMENT,
-		PHP_LCOMMENT,
-		PHP_STRING1,
-		PHP_STRING2
+		PHP_COMMENT_MULTI_LINE,
+		PHP_COMMENT_SINGLE_LINE,
+		PHP_STRING_DOUBLE_QUOTES,
+		PHP_STRING_SINGLE_QUOTES
 };
 
 enum {
-	kKwHtmlTag			= 1,
-	kKwHtmlAttribute	= 2,
-	kKwJsLanguage		= 3,
-	kKwJsConstants		= 4,	// TODO
-	kKwPhpLanguage		= 5,
-	kKwPhpFunctions		= 6,
-	kKwPhpConstants		= 7,	// TODO
-	kKwUserset1			= 8,
-	kKwUserset2			= 9,
-	kKwUserset3			= 10,
-	kKwUserset4			= 11
+	kKwHtmlTag			= 1,	// Set 1
+	kKwHtmlAttribute	= 2,	// Set 2
+	kKwJsLanguage		= 4,	// Set 3
+	kKwJsConstants		= 8,	// Set 4
+	kKwPhpLanguage		= 16,	// Set 5
+	kKwPhpFunctions		= 32,	// Set 6
+	kKwPhpConstants		= 64,	// Set 7
+	kKwUserset1			= 128,	// Set 8
+	kKwUserset2			= 256,	// Set 9
+	kKwUserset3			= 512,	// Set 10
+	kKwUserset4			= 1024,	// Set 11
+	//
+	kKwUsersets			= kKwUserset1|kKwUserset2|kKwUserset3|kKwUserset4,
+	kKwJs				= kKwJsLanguage|kKwJsConstants,
+	kKwPhp				= kKwPhpLanguage|kKwPhpFunctions|kKwPhpConstants
 };
 
+// Color configuration
+enum {
+	kColHtmlComment					= kColorComment1,
+	kColHtmlDtd						= kColorComment2,
+	kColHtmlEntity					= kColorCharConst,
+	kColHtmlAttribute				= kColorKeyword2,
+	kColHtmlTagStringDoubleQuotes	= kColorString1,
+	kColHtmlTagStringSingleQuotes	= kColorString2,
+	//
+	kColJsStringDoubleQuotes		= kColorString1,
+	kColJsStringSingleQuotes		= kColorString2,
+	kColJsComment					= kColorComment2,
+	kColJsCommentL					= kColorComment1,
+	//
+	kColPhpLanguage					= kColorKeyword1,
+	kColPhpFunction					= kColorKeyword2,
+	kColPhpConstants				= kColorCharConst,
+	kColPhpStringDoubleQuotes		= kColorString1,
+	kColPhpStringSingleQuotes		= kColorString2,
+	kColPhpComment					= kColorComment2,
+	kColPhpCommentL					= kColorComment1,
+};
 
 #pragma mark Debug-Functions
 
 
-#define DEBUG_PHP 0
-
 #if DEBUG_PHP
 
 void DEB_PrintState(const int state, const char c, const char *sub="")
@@ -143,29 +135,29 @@
 	const char* name = NULL;
 	switch (state)
 	{
-		case START:				name = "START"; break;
-		case TAGSTART:			name = "TAGSTART"; break;
-		case TAGSTARTKEYWORD:	name = "TAGSTARTKEYWORD"; break;
-		case TAGENDKEYWORD:		name = "TAGENDKEYWORD"; break;
-		case TAG:				name = "TAG"; break;
-		case TAGSTRING1:		name = "TAGSTRING1"; break;
-		case TAGSTRING2:		name = "TAGSTRING2"; break;
-		case TAGATTRIBUTE:		name = "TAGATTRIBUTE"; break;
-		case SPECIAL:			name = "SPECIAL"; break;
-		case COMMENT_DTD:		name = "COMMENT_DTD"; break;
-		case COMMENT:			name = "COMMENT"; break;
-		case JAVASCRIPT:		name = "JAVASCRIPT"; break;
-		case JS_COMMENT:		name = "JS_COMMENT"; break;
-		case JS_LCOMMENT:		name = "JS_LCOMMENT"; break;
-		case JS_IDENTIFIER:		name = "JS_IDENTIFIER"; break;
-		case JS_STRING1:		name = "JS_STRING1"; break;
-		case JS_STRING2:		name = "JS_STRING2"; break;
-		case PHP_SCRIPT:		name = "PHP_SCRIPT"; break;
-		case PHP_IDENTIFIER:	name = "PHP_IDENTIFIER"; break;
-		case PHP_COMMENT:		name = "PHP_COMMENT"; break;
-		case PHP_LCOMMENT:		name = "PHP_LCOMMENT"; break;
-		case PHP_STRING1:		name = "PHP_STRING1"; break;
-		case PHP_STRING2:		name = "PHP_STRING2"; break;
+		case START:						name = "START"; break;
+		case TAG_START:					name = "TAG_START"; break;
+		case TAG_KEYWORD_START:			name = "TAG_KEYWORD_START"; break;
+		case TAG_KEYWORD_END:			name = "TAG_KEYWORD_END"; break;
+		case TAG:						name = "TAG"; break;
+		case TAG_STRING_DOUBLE_QUOTES:	name = "TAG_STRING_DOUBLE_QUOTES"; break;
+		case TAG_STRING_SINGLE_QUOTES:	name = "TAG_STRING_SINGLE_QUOTES"; break;
+		case TAG_ATTRIBUTE:				name = "TAG_ATTRIBUTE"; break;
+		case SPECIAL:					name = "SPECIAL"; break;
+		case COMMENT_DTD:				name = "COMMENT_DTD"; break;
+		case COMMENT:					name = "COMMENT"; break;
+		case JAVASCRIPT:				name = "JAVASCRIPT"; break;
+		case JS_COMMENT_MULTI_LINE:		name = "JS_COMMENT_MULTI_LINE"; break;
+		case JS_COMMENT_SINGLE_LINE:	name = "JS_COMMENT_SINGLE_LINE"; break;
+		case JS_IDENTIFIER:				name = "JS_IDENTIFIER"; break;
+		case JS_STRING_SINGLE_QUOTES:	name = "JS_STRING_SINGLE_QUOTES"; break;
+		case JS_STRING_DOUBLE_QUOTES:	name = "JS_STRING_DOUBLE_QUOTES"; break;
+		case PHP_SCRIPT:				name = "PHP_SCRIPT"; break;
+		case PHP_IDENTIFIER:			name = "PHP_IDENTIFIER"; break;
+		case PHP_COMMENT_MULTI_LINE:	name = "PHP_COMMENT_MULTI_LINE"; break;
+		case PHP_COMMENT_SINGLE_LINE:	name = "PHP_COMMENT_SINGLE_LINE"; break;
+		case PHP_STRING_DOUBLE_QUOTES:	name = "PHP_STRING_DOUBLE_QUOTES"; break;
+		case PHP_STRING_SINGLE_QUOTES:	name = "PHP_STRING_SINGLE_QUOTES"; break;
 	}
 	if (name)
 	{
@@ -180,29 +172,29 @@
 	const char* name = NULL;
 	switch (state)
 	{
-		case START:				name = "START"; break;
-		case TAGSTART:			name = "TAGSTART"; break;
-		case TAGSTARTKEYWORD:	name = "TAGSTARTKEYWORD"; break;
-		case TAGENDKEYWORD:		name = "TAGENDKEYWORD"; break;
-		case TAG:				name = "TAG"; break;
-		case TAGSTRING1:		name = "TAGSTRING1"; break;
-		case TAGSTRING2:		name = "TAGSTRING2"; break;
-		case TAGATTRIBUTE:		name = "TAGATTRIBUTE"; break;
-		case SPECIAL:			name = "SPECIAL"; break;
-		case COMMENT_DTD:		name = "COMMENT_DTD"; break;
-		case COMMENT:			name = "COMMENT"; break;
-		case JAVASCRIPT:		name = "JAVASCRIPT"; break;
-		case JS_COMMENT:		name = "JS_COMMENT"; break;
-		case JS_LCOMMENT:		name = "JS_LCOMMENT"; break;
-		case JS_IDENTIFIER:		name = "JS_IDENTIFIER"; break;
-		case JS_STRING1:		name = "JS_STRING1"; break;
-		case JS_STRING2:		name = "JS_STRING2"; break;
-		case PHP_SCRIPT:		name = "PHP_SCRIPT"; break;
-		case PHP_IDENTIFIER:	name = "PHP_IDENTIFIER"; break;
-		case PHP_COMMENT:		name = "PHP_COMMENT"; break;
-		case PHP_LCOMMENT:		name = "PHP_LCOMMENT"; break;
-		case PHP_STRING1:		name = "PHP_STRING1"; break;
-		case PHP_STRING2:		name = "PHP_STRING2"; break;
+		case START:						name = "START"; break;
+		case TAG_START:					name = "TAG_START"; break;
+		case TAG_KEYWORD_START:			name = "TAG_KEYWORD_START"; break;
+		case TAG_KEYWORD_END:			name = "TAG_KEYWORD_END"; break;
+		case TAG:						name = "TAG"; break;
+		case TAG_STRING_DOUBLE_QUOTES:	name = "TAG_STRING_DOUBLE_QUOTES"; break;
+		case TAG_STRING_SINGLE_QUOTES:	name = "TAG_STRING_SINGLE_QUOTES"; break;
+		case TAG_ATTRIBUTE:				name = "TAG_ATTRIBUTE"; break;
+		case SPECIAL:					name = "SPECIAL"; break;
+		case COMMENT_DTD:				name = "COMMENT_DTD"; break;
+		case COMMENT:					name = "COMMENT"; break;
+		case JAVASCRIPT:				name = "JAVASCRIPT"; break;
+		case JS_COMMENT_MULTI_LINE:		name = "JS_COMMENT_MULTI_LINE"; break;
+		case JS_COMMENT_SINGLE_LINE:	name = "JS_COMMENT_SINGLE_LINE"; break;
+		case JS_IDENTIFIER:				name = "JS_IDENTIFIER"; break;
+		case JS_STRING_SINGLE_QUOTES:	name = "JS_STRING_SINGLE_QUOTES"; break;
+		case JS_STRING_DOUBLE_QUOTES:	name = "JS_STRING_DOUBLE_QUOTES"; break;
+		case PHP_SCRIPT:				name = "PHP_SCRIPT"; break;
+		case PHP_IDENTIFIER:			name = "PHP_IDENTIFIER"; break;
+		case PHP_COMMENT_MULTI_LINE:	name = "PHP_COMMENT_MULTI_LINE"; break;
+		case PHP_COMMENT_SINGLE_LINE:	name = "PHP_COMMENT_SINGLE_LINE"; break;
+		case PHP_STRING_DOUBLE_QUOTES:	name = "PHP_STRING_DOUBLE_QUOTES"; break;
+		case PHP_STRING_SINGLE_QUOTES:	name = "PHP_STRING_SINGLE_QUOTES"; break;
 	}
 	const char* kwname = NULL;
 	switch (keyword)
@@ -237,30 +229,30 @@
 {
 	switch (state)
 	{
-		case START:				return "START";
-		case TAGSTART:			return "TAGSTART";
-		case TAGSTARTKEYWORD:	return "TAGSTARTKEYWORD";
-		case TAGENDKEYWORD:		return "TAGENDKEYWORD";
-		case TAG:				return "TAG";
-		case TAGSTRING1:		return "TAGSTRING1";
-		case TAGSTRING2:		return "TAGSTRING2";
-		case TAGATTRIBUTE:		return "TAGATTRIBUTE";
-		case SPECIAL:			return "SPECIAL";
-		case COMMENT_DTD:		return "COMMENT_DTD";
-		case COMMENT:			return "COMMENT";
-		case JAVASCRIPT:		return "JAVASCRIPT";
-		case JS_COMMENT:		return "JS_COMMENT";
-		case JS_LCOMMENT:		return "JS_LCOMMENT";
-		case JS_IDENTIFIER:		return "JS_IDENTIFIER";
-		case JS_STRING1:		return "JS_STRING1";
-		case JS_STRING2:		return "JS_STRING2";
-		case PHP_SCRIPT:		return "PHP_SCRIPT";
-		case PHP_IDENTIFIER:	return "PHP_IDENTIFIER";
-		case PHP_COMMENT:		return "PHP_COMMENT";
-		case PHP_LCOMMENT:		return "PHP_LCOMMENT";
-		case PHP_STRING1:		return "PHP_STRING1";
-		case PHP_STRING2:		return "PHP_STRING2";
-		default:				return "UNKOWN";
+		case START:						return "START";
+		case TAG_START:					return "TAG_START";
+		case TAG_KEYWORD_START:			return "TAG_KEYWORD_START";
+		case TAG_KEYWORD_END:			return "TAG_KEYWORD_END";
+		case TAG:						return "TAG";
+		case TAG_STRING_DOUBLE_QUOTES:	return "TAG_STRING_DOUBLE_QUOTES";
+		case TAG_STRING_SINGLE_QUOTES:	return "TAG_STRING_SINGLE_QUOTES";
+		case TAG_ATTRIBUTE:				return "TAG_ATTRIBUTE";
+		case SPECIAL:					return "SPECIAL";
+		case COMMENT_DTD:				return "COMMENT_DTD";
+		case COMMENT:					return "COMMENT";
+		case JAVASCRIPT:				return "JAVASCRIPT";
+		case JS_COMMENT_MULTI_LINE:		return "JS_COMMENT_MULTI_LINE";
+		case JS_COMMENT_SINGLE_LINE:	return "JS_COMMENT_SINGLE_LINE";
+		case JS_IDENTIFIER:				return "JS_IDENTIFIER";
+		case JS_STRING_SINGLE_QUOTES:	return "JS_STRING_SINGLE_QUOTES";
+		case JS_STRING_DOUBLE_QUOTES:	return "JS_STRING_DOUBLE_QUOTES";
+		case PHP_SCRIPT:				return "PHP_SCRIPT";
+		case PHP_IDENTIFIER:			return "PHP_IDENTIFIER";
+		case PHP_COMMENT_MULTI_LINE:	return "PHP_COMMENT_MULTI_LINE";
+		case PHP_COMMENT_SINGLE_LINE:	return "PHP_COMMENT_SINGLE_LINE";
+		case PHP_STRING_DOUBLE_QUOTES:	return "PHP_STRING_DOUBLE_QUOTES";
+		case PHP_STRING_SINGLE_QUOTES:	return "PHP_STRING_SINGLE_QUOTES";
+		default:						return "UNKOWN";
 	}
 }
 
@@ -308,7 +300,7 @@
 			case START:
 				DEB_PrintState(state, c);
 				if (c == '<')
-					state = TAGSTART;
+					state = TAG_START;
 				else if (c == '&')
 					state = SPECIAL;
 				else if (c == 0 || c == '\n')
@@ -321,10 +313,10 @@
 				}
 				break;
 			
-			case TAGSTART:
+			case TAG_START:
 				DEB_PrintState(state, c);
 				if (c == '/')
-					state = TAGENDKEYWORD;
+					state = TAG_KEYWORD_END;
 				else if (c == '!')
 				{
 					state = COMMENT_DTD;
@@ -337,7 +329,7 @@
 					
 					if (strncasecmp(text + s, "php", 3) == 0)
 					{
-						proxy.SetColor(s, kLngColorHtmlKeyword);
+						proxy.SetColor(s, kColorTag);
 						s = (i += 3);
 					}
 					
@@ -348,8 +340,8 @@
 				{
 					proxy.SetColor(s, kColorTag);
 					s = i - 1;
-					kws = proxy.Move(tolower(c), 1);
-					state = TAGSTARTKEYWORD;
+					kws = proxy.Move(CASE_SENSITIVE_TAG ? c : tolower(c), 1);
+					state = TAG_KEYWORD_START;
 				}
 				else if (c == 0 || c == '\n')
 				{
@@ -363,14 +355,14 @@
 				}
 				break;
 			
-			case TAGENDKEYWORD:
+			case TAG_KEYWORD_END:
 				DEB_PrintState(state, c);
 				if (isalpha(c))
 				{
 					proxy.SetColor(s, kColorTag);
 					s = i - 1;
-					kws = proxy.Move(tolower(c), 1);
-					state = TAGSTARTKEYWORD;
+					kws = proxy.Move(CASE_SENSITIVE_TAG ? c : tolower(c), 1);
+					state = TAG_KEYWORD_START;
 				}
 				else if (c == 0 || c == '\n')
 				{
@@ -384,18 +376,18 @@
 				}
 				break;
 			
-			case TAGSTARTKEYWORD:
+			case TAG_KEYWORD_START:
 				DEB_PrintState(state, c);
 				if (!isalnum(c) && c != '-')
 				{
-					switch (kwc = proxy.IsKeyword(kws))
+					switch (kwc = proxy.IsKeyword(kws, kKwHtmlTag|kKwUsersets))
 					{
-						case kKwHtmlTag:  color = kColorKeyword1; break;
+						case kKwHtmlTag:  color = kColorTag;      break;
 						case kKwUserset1: color = kColorUserSet1; break;
 						case kKwUserset2: color = kColorUserSet2; break;
 						case kKwUserset3: color = kColorUserSet3; break;
 						case kKwUserset4: color = kColorUserSet4; break;
-						default:          color = kColorTag;      break;
+						default:          color = kColorText;     break;
 					}
 					proxy.SetColor(s, color);
 					DEB_PrintSetKw(state, kwc);
@@ -407,7 +399,7 @@
 					s = --i;
 				}
 				else if (kws)
-					kws = proxy.Move(tolower(c), kws);
+					kws = proxy.Move(CASE_SENSITIVE_TAG ? c : tolower(c), kws);
 				break;
 			
 			case TAG:
@@ -431,12 +423,12 @@
 					case '"':
 						proxy.SetColor(s, kColorTag);
 						s = i - 1;
-						state = TAGSTRING1;
+						state = TAG_STRING_DOUBLE_QUOTES;
 						break;
 					case '\'':
 						proxy.SetColor(s, kColorTag);
 						s = i - 1;
-						state = TAGSTRING2;
+						state = TAG_STRING_SINGLE_QUOTES;
 						break;
 					case '!':
 						if (i == s + 2)
@@ -451,55 +443,55 @@
 						{
 							proxy.SetColor(s, kColorTag);
 							s = i - 1;
-							kws = proxy.Move(tolower(c), 1);
-							state = TAGATTRIBUTE;
+							kws = proxy.Move(CASE_SENSITIVE_ATTR ? c : tolower(c), 1);
+							state = TAG_ATTRIBUTE;
 						}
 						break;
 				}
 				break;
 			
-			case TAGSTRING1:
+			case TAG_STRING_DOUBLE_QUOTES:
 				DEB_PrintState(state, c);
 				if (c == '"')
 				{
-					proxy.SetColor(s, kLngColorTagString);
+					proxy.SetColor(s, kColHtmlTagStringDoubleQuotes);
 					s = i;
 					state = TAG;
 				}
 				else if (c == '\n' || c == 0)
 				{
-					proxy.SetColor(s, kLngColorTagString);
+					proxy.SetColor(s, kColHtmlTagStringDoubleQuotes);
 					leave = true;
 				}
 				break;
 			
-			case TAGSTRING2:
+			case TAG_STRING_SINGLE_QUOTES:
 				DEB_PrintState(state, c);
 				if (c == '\'')
 				{
-					proxy.SetColor(s, kLngColorTagString);
+					proxy.SetColor(s, kColHtmlTagStringSingleQuotes);
 					s = i;
 					state = TAG;
 				}
 				else if (c == '\n' || c == 0)
 				{
-					proxy.SetColor(s, kLngColorTagString);
+					proxy.SetColor(s, kColHtmlTagStringSingleQuotes);
 					leave = true;
 				}
 				break;
 			
-			case TAGATTRIBUTE:
+			case TAG_ATTRIBUTE:
 				DEB_PrintState(state, c);
 				if (!isalnum(c) && c != '-')
 				{
-					switch (kwc = proxy.IsKeyword(kws))
+					switch (kwc = proxy.IsKeyword(kws, kKwHtmlAttribute|kKwUsersets))
 					{
-						case kKwHtmlAttribute: color = kLngColorHtmlAttribute; break;
-						case kKwUserset1:      color = kColorUserSet1;         break;
-						case kKwUserset2:      color = kColorUserSet2;         break;
-						case kKwUserset3:      color = kColorUserSet3;         break;
-						case kKwUserset4:      color = kColorUserSet4;         break;
-						default:               color = kColorText;             break;
+						case kKwHtmlAttribute: color = kColHtmlAttribute; break;
+						case kKwUserset1:      color = kColorUserSet1;    break;
+						case kKwUserset2:      color = kColorUserSet2;    break;
+						case kKwUserset3:      color = kColorUserSet3;    break;
+						case kKwUserset4:      color = kColorUserSet4;    break;
+						default:               color = kColorText;        break;
 					}
 					proxy.SetColor(s, color);
 					DEB_PrintSetKw(state, kwc);
@@ -508,7 +500,7 @@
 					state = TAG;
 				}
 				else if (kws)
-					kws = proxy.Move(tolower(c), kws);
+					kws = proxy.Move(CASE_SENSITIVE_ATTR ? c : tolower(c), kws);
 				break;
 			
 			case SPECIAL:
@@ -521,7 +513,7 @@
 				}
 				else if (c == ';')
 				{
-					proxy.SetColor(s, kLngColorSpecialChar);
+					proxy.SetColor(s, kColHtmlEntity);
 					s = i;
 					state = START;
 				}
@@ -533,19 +525,19 @@
 				DEB_PrintState(state, c);
 				if (c == '-' && text[i] == '-' && i == s + 3 && text[i - 2] == '!' && text[i - 3] == '<')
 				{
-					proxy.SetColor(s, kColorTag);
+					proxy.SetColor(s, kColHtmlDtd);
 					s = i - 1;
 					state = COMMENT;
 				}
 				else if (c == '>')
 				{
-					proxy.SetColor(s, kColorTag);
+					proxy.SetColor(s, kColHtmlDtd);
 					s = i;
 					state = forceState;
 				}
 				else if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s, kColorTag);
+					proxy.SetColor(s, kColHtmlDtd);
 					leave = true;
 				}
 				break;
@@ -561,13 +553,13 @@
 				}
 				else if (c == '-' && text[i] == '-')
 				{
-					proxy.SetColor(s, kColorComment1);
+					proxy.SetColor(s, kColHtmlComment);
 					s = ++i;
 					state = COMMENT_DTD;
 				}
 				else if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s, kColorComment1);
+					proxy.SetColor(s, kColHtmlComment);
 					leave = true;
 				}
 				break;
@@ -588,22 +580,22 @@
 					if (strncasecmp(text + i + 1, "script", 6) == 0)
 					{
 						++i;
-						state = TAGSTART;
+						state = TAG_START;
 					}
 				}
 				else if (c == '/' && text[i] == '*')
-					state = JS_COMMENT;
+					state = JS_COMMENT_MULTI_LINE;
 				else if (c == '/' && text[i] == '/')
-					state = JS_LCOMMENT;
+					state = JS_COMMENT_SINGLE_LINE;
 				else if (isalpha(c))
 				{
-					kws = proxy.Move(tolower(c), 1);
+					kws = proxy.Move(CASE_SENSITIVE_JS ? c : tolower(c), 1);
 					state = JS_IDENTIFIER;
 				}
 				else if (c == '\'')
-					state = JS_STRING1;
+					state = JS_STRING_SINGLE_QUOTES;
 				else if (c == '"')
-					state = JS_STRING2;
+					state = JS_STRING_DOUBLE_QUOTES;
 				else if (c == 0 || c == '\n')
 					leave = true;
 					
@@ -614,32 +606,32 @@
 				}
 				break;
 				
-			case JS_COMMENT:
+			case JS_COMMENT_MULTI_LINE:
 				DEB_PrintState(state, c);
 				if ((s == 0 || i > s + 1) && c == '*' && text[i] == '/')
 				{
-					proxy.SetColor(s, kColorComment1);
+					proxy.SetColor(s, kColJsComment);
 					s = i + 1;
 					state = JAVASCRIPT;
 				}
 				else if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s, kColorComment1);
+					proxy.SetColor(s, kColJsComment);
 					leave = true;
 				}
 				break;
 
-			case JS_LCOMMENT:
+			case JS_COMMENT_SINGLE_LINE:
 				DEB_PrintState(state, c);
 				if (c == '-' && text[i] == '-')
 				{
-					proxy.SetColor(s, kColorComment1);
+					proxy.SetColor(s, kColJsCommentL);
 					s = i + 1;
 					state = TAG;
 				}
 				else if (c == '\n' || c == 0)
 				{
-					proxy.SetColor(s, kColorComment1);
+					proxy.SetColor(s, kColJsCommentL);
 					state = JAVASCRIPT;
 					leave = true;
 				}
@@ -649,16 +641,17 @@
 				DEB_PrintState(state, c);
 				if (!isalnum(c) && c != '_')
 				{
-					if (i > s + 1 && (kwc = proxy.IsKeyword(kws)) != 0)
+					if (i > s + 1 && (kwc = proxy.IsKeyword(kws, kKwJs|kKwUsersets)) != 0)
 					{
 						switch (kwc)
 						{
-							case kKwJsLanguage:  color = kLngColorJsKeyword; break;
-							case kKwUserset1:    color = kColorUserSet1; break;
-							case kKwUserset2:    color = kColorUserSet2; break;
-							case kKwUserset3:    color = kColorUserSet3; break;
-							case kKwUserset4:    color = kColorUserSet4; break;
-							default:             color = kColorText; break;
+							case kKwJsLanguage:  color = kColorKeyword1;  break;
+							case kKwJsConstants: color = kColorCharConst; break;
+							case kKwUserset1:    color = kColorUserSet1;  break;
+							case kKwUserset2:    color = kColorUserSet2;  break;
+							case kKwUserset3:    color = kColorUserSet3;  break;
+							case kKwUserset4:    color = kColorUserSet4;  break;
+							default:             color = kColorText;      break;
 						}
 						proxy.SetColor(s, color);
 						DEB_PrintSetKw(state, kwc);
@@ -672,17 +665,17 @@
 					state = JAVASCRIPT;
 				}
 				else if (kws)
-					kws = proxy.Move((int)(unsigned char)c, kws);
+					kws = proxy.Move(CASE_SENSITIVE_JS ? c : tolower(c), kws);
 				break;
 			
-			case JS_STRING1:
-			case JS_STRING2:
+			case JS_STRING_SINGLE_QUOTES:
+			case JS_STRING_DOUBLE_QUOTES:
 				DEB_PrintState(state, c);
 				if (!esc &&
-					((state == JS_STRING1 && c == '\'') ||
-					(state == JS_STRING2 && c == '"')))
+					((state == JS_STRING_SINGLE_QUOTES && c == '\'') ||
+					(state == JS_STRING_DOUBLE_QUOTES && c == '"')))
 				{
-					proxy.SetColor(s, kColorString1);
+					proxy.SetColor(s, (state == JS_STRING_SINGLE_QUOTES) ? kColJsStringSingleQuotes : kColJsStringDoubleQuotes);
 					s = i;
 					state = JAVASCRIPT;
 				}
@@ -690,7 +683,7 @@
 				{
 					if (text[i - 2] == '\\' && text[i - 3] != '\\')
 					{
-						proxy.SetColor(s, kColorString1);
+						proxy.SetColor(s, (state == JS_STRING_SINGLE_QUOTES) ? kColJsStringSingleQuotes : kColJsStringDoubleQuotes);
 					}
 					else
 					{
@@ -715,17 +708,17 @@
 				}
 				else if (isalpha(c))
 				{
-					kws = proxy.Move(tolower(c), 1);
+					kws = proxy.Move(CASE_SENSITIVE_PHP ? c : tolower(c), 1);
 					state = PHP_IDENTIFIER;
 				}
 				else if (c == '"')
-					state = PHP_STRING1;
+					state = PHP_STRING_DOUBLE_QUOTES;
 				else if (c == '\'')
-					state = PHP_STRING2;
+					state = PHP_STRING_SINGLE_QUOTES;
 				else if (c == '#' || (c == '/' && text[i] == '/'))
-					state = PHP_LCOMMENT;
+					state = PHP_COMMENT_SINGLE_LINE;
 				else if (c == '/' && text[i] == '*')
-					state = PHP_COMMENT;
+					state = PHP_COMMENT_MULTI_LINE;
 				else if (c == 0 || c == '\n')
 					leave = true;
 
@@ -739,18 +732,19 @@
 			case PHP_IDENTIFIER:
 				if (!isalnum(c) && c != '_')
 				{
-					if (i > s + 1 && (kwc = proxy.IsKeyword(kws)) != 0)
+					if (i > s + 1 && (kwc = proxy.IsKeyword(kws, kKwPhp|kKwUsersets)))
 					{
 						DEB_PrintState(state, c, "KWD");
 						switch (kwc)
 						{
-							case kKwPhpLanguage:   color = kColorKeyword1; break;
-							case kKwPhpFunctions:  color = kColorKeyword2; break;
-							case kKwUserset1:      color = kColorUserSet1; break;
-							case kKwUserset2:      color = kColorUserSet2; break;
-							case kKwUserset3:      color = kColorUserSet3; break;
-							case kKwUserset4:      color = kColorUserSet4; break;
-							default:               color = kColorText;     break;
+							case kKwPhpLanguage:   color = kColPhpLanguage;  break;
+							case kKwPhpFunctions:  color = kColPhpFunction;  break;
+							case kKwPhpConstants:  color = kColPhpConstants; break;
+							case kKwUserset1:      color = kColorUserSet1;   break;
+							case kKwUserset2:      color = kColorUserSet2;   break;
+							case kKwUserset3:      color = kColorUserSet3;   break;
+							case kKwUserset4:      color = kColorUserSet4;   break;
+							default:               color = kColorText;       break;
 						}
 						proxy.SetColor(s, color);
 						DEB_PrintSetKw(state, kwc);
@@ -766,20 +760,20 @@
 				}
 				else if (kws)
 					DEB_PrintState(state, c, "MOV");
-					kws = proxy.Move(tolower(c), kws);
+					kws = proxy.Move(CASE_SENSITIVE_PHP ? c : tolower(c), kws);
 				break;
 
-			case PHP_STRING1:
+			case PHP_STRING_DOUBLE_QUOTES:
 				DEB_PrintState(state, c);
 				if (!esc && c == '"')
 				{
-					proxy.SetColor(s, kColorString1);
+					proxy.SetColor(s, kColPhpStringDoubleQuotes);
 					s = i;
 					state = PHP_SCRIPT;
 				}
 				else if (c == '\n' || c == 0)
 				{
-					proxy.SetColor(s, kColorString1);
+					proxy.SetColor(s, kColPhpStringDoubleQuotes);
 					s = size;
 					leave = true;
 				}
@@ -787,17 +781,17 @@
 					esc = !esc && (c == '\\');
 				break;
 
-			case PHP_STRING2:
+			case PHP_STRING_SINGLE_QUOTES:
 				DEB_PrintState(state, c);
 				if (!esc && c == '\'')
 				{
-					proxy.SetColor(s, kColorString2);
+					proxy.SetColor(s, kColPhpStringSingleQuotes);
 					s = i;
 					state = PHP_SCRIPT;
 				}
 				else if (c == '\n' || c == 0)
 				{
-					proxy.SetColor(s, kColorString2);
+					proxy.SetColor(s, kColPhpStringSingleQuotes);
 					s = size;
 					leave = true;
 				}
@@ -805,23 +799,23 @@
 					esc = !esc && (c == '\\');
 				break;
 
-			case PHP_COMMENT:
+			case PHP_COMMENT_MULTI_LINE:
 				DEB_PrintState(state, c);
 				if ((s == 0 || i > s + 1) && c == '*' && text[i] == '/')
 				{
-					proxy.SetColor(s, kColorComment2);
+					proxy.SetColor(s, kColPhpComment);
 					s = i + 1;
 					state = PHP_SCRIPT;
 				}
 				else if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s, kColorComment2);
+					proxy.SetColor(s, kColPhpComment);
 					leave = true;
 				}
 				else if (((percent && c == '%') || (!percent && c == '?')) &&
 					text[i] == '>')
 				{
-					proxy.SetColor(s, kColorComment2);
+					proxy.SetColor(s, kColPhpComment);
 					s = i - 1;
 					proxy.SetColor(s, kColorTag);
 					s = ++i;
@@ -829,18 +823,18 @@
 				}
 				break;
 
-			case PHP_LCOMMENT:
+			case PHP_COMMENT_SINGLE_LINE:
 				DEB_PrintState(state, c);
 				if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s, kColorComment1);
+					proxy.SetColor(s, kColPhpCommentL);
 					state = PHP_SCRIPT;
 					leave = true;
 				}
 				else if (((percent && c == '%') || (!percent && c == '?')) &&
 					text[i] == '>')
 				{
-					proxy.SetColor(s, kColorComment1);
+					proxy.SetColor(s, kColPhpCommentL);
 					s = i - 1;
 					proxy.SetColor(s, kColorTag);
 					s = ++i;
@@ -961,7 +955,7 @@
 		{
 			case START:
 				if (c == '<')
-					state = TAGSTART;
+					state = TAG_START;
 				else if (c == '&')
 					state = SPECIAL;
 				else if (c == 0 || c == '\n')
@@ -971,9 +965,9 @@
 					s = i - 1;
 				break;
 			
-			case TAGSTART:
+			case TAG_START:
 				if (c == '/')
-					state = TAGENDKEYWORD;
+					state = TAG_KEYWORD_END;
 				else if (c == '!')
 				{
 					state = COMMENT_DTD;
@@ -993,7 +987,7 @@
 				else if (isalpha(c))
 				{
 					s = i - 1;
-					state = TAGSTARTKEYWORD;
+					state = TAG_KEYWORD_START;
 				}
 				else if (c == 0 || c == '\n')
 				{
@@ -1006,11 +1000,11 @@
 				}
 				break;
 			
-			case TAGENDKEYWORD:
+			case TAG_KEYWORD_END:
 				if (isalpha(c))
 				{
 					s = i - 1;
-					state = TAGSTARTKEYWORD;
+					state = TAG_KEYWORD_START;
 				}
 				else if (c == 0 || c == '\n')
 				{
@@ -1023,7 +1017,7 @@
 				}
 				break;
 			
-			case TAGSTARTKEYWORD:
+			case TAG_KEYWORD_START:
 				if (!isalnum(c) && c != '-')
 				{
 					if (strncasecmp(text + s, "script", 6) == 0 && text[s - 1] != '/')
@@ -1053,11 +1047,11 @@
 						break;
 					case '"':
 						s = i - 1;
-						state = TAGSTRING1;
+						state = TAG_STRING_DOUBLE_QUOTES;
 						break;
 					case '\'':
 						s = i - 1;
-						state = TAGSTRING2;
+						state = TAG_STRING_SINGLE_QUOTES;
 						break;
 					case '!':
 						if (i == s + 2)
@@ -1070,13 +1064,13 @@
 						if (isalpha(c))
 						{
 							s = i - 1;
-							state = TAGATTRIBUTE;
+							state = TAG_ATTRIBUTE;
 						}
 						break;
 				}
 				break;
 			
-			case TAGSTRING1:
+			case TAG_STRING_DOUBLE_QUOTES:
 				if (c == '"')
 				{
 					s = i;
@@ -1086,7 +1080,7 @@
 					leave = true;
 				break;
 			
-			case TAGSTRING2:
+			case TAG_STRING_SINGLE_QUOTES:
 				if (c == '\'')
 				{
 					s = i;
@@ -1096,7 +1090,7 @@
 					leave = true;
 				break;
 			
-			case TAGATTRIBUTE:
+			case TAG_ATTRIBUTE:
 				if (!isalnum(c) && c != '-')
 				{
 					s = --i;
@@ -1169,20 +1163,20 @@
 					if (strncasecmp(text + i + 1, "script", 6) == 0)
 					{
 						++i;
-						state = TAGSTART;
+						state = TAG_START;
 						outLangStart = i - 1;
 					}
 				}
 				else if (c == '/' && text[i] == '*')
-					state = JS_COMMENT;
+					state = JS_COMMENT_MULTI_LINE;
 				else if (c == '/' && text[i] == '/')
-					state = JS_LCOMMENT;
+					state = JS_COMMENT_SINGLE_LINE;
 				else if (isalpha(c))
 					state = JS_IDENTIFIER;
 				else if (c == '\'')
-					state = JS_STRING1;
+					state = JS_STRING_SINGLE_QUOTES;
 				else if (c == '"')
-					state = JS_STRING2;
+					state = JS_STRING_DOUBLE_QUOTES;
 				else if (c == 0 || c == '\n')
 					leave = true;
 					
@@ -1190,7 +1184,7 @@
 					s = i - 1;
 				break;
 				
-			case JS_COMMENT:
+			case JS_COMMENT_MULTI_LINE:
 				if ((s == 0 || i > s + 1) && c == '*' && text[i] == '/')
 				{
 					s = i + 1;
@@ -1200,7 +1194,7 @@
 					leave = true;
 				break;
 
-			case JS_LCOMMENT:
+			case JS_COMMENT_SINGLE_LINE:
 				if (c == '-' && text[i] == '-')
 				{
 					s = i + 1;
@@ -1222,11 +1216,11 @@
 				}
 				break;
 			
-			case JS_STRING1:
-			case JS_STRING2:
+			case JS_STRING_SINGLE_QUOTES:
+			case JS_STRING_DOUBLE_QUOTES:
 				if (!esc &&
-					((state == JS_STRING1 && c == '\'') ||
-					(state == JS_STRING2 && c == '"')))
+					((state == JS_STRING_SINGLE_QUOTES && c == '\'') ||
+					(state == JS_STRING_DOUBLE_QUOTES && c == '"')))

[... truncated: 288 lines follow ...]


From hoern at mail.berlios.de  Tue Nov 21 21:24:35 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Tue, 21 Nov 2006 21:24:35 +0100
Subject: [pe-commits] r460 - in trunk: Languages/Sources Resources Sources
Message-ID: <200611212024.kALKOZgI006971@sheep.berlios.de>

Author: hoern
Date: 2006-11-21 21:24:34 +0100 (Tue, 21 Nov 2006)
New Revision: 460
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=460&view=rev

Modified:
   trunk/Languages/Sources/HtmlJsPhp_Language.cpp
   trunk/Resources/Dialog-Preferences.r
   trunk/Sources/CPrefsDialog.cpp
   trunk/Sources/CPrefsDialog.h
   trunk/Sources/HColorUtils.h
   trunk/Sources/PApp.cpp
   trunk/Sources/PApp.h
   trunk/Sources/Prefs.h
Log:
* Added new prefs color "Attribute" that complements "Tag" color
* Added SetColor() to PApp to make code more readible
* Added SetColor() and GetColor() to CPrefsDialog to make code more readible


Modified: trunk/Languages/Sources/HtmlJsPhp_Language.cpp
===================================================================
--- trunk/Languages/Sources/HtmlJsPhp_Language.cpp	2006-11-21 18:12:48 UTC (rev 459)
+++ trunk/Languages/Sources/HtmlJsPhp_Language.cpp	2006-11-21 20:24:34 UTC (rev 460)
@@ -107,7 +107,7 @@
 	kColHtmlComment					= kColorComment1,
 	kColHtmlDtd						= kColorComment2,
 	kColHtmlEntity					= kColorCharConst,
-	kColHtmlAttribute				= kColorKeyword2,
+	kColHtmlAttribute				= kColorAttribute,
 	kColHtmlTagStringDoubleQuotes	= kColorString1,
 	kColHtmlTagStringSingleQuotes	= kColorString2,
 	//

Modified: trunk/Resources/Dialog-Preferences.r
===================================================================
--- trunk/Resources/Dialog-Preferences.r	2006-11-21 18:12:48 UTC (rev 459)
+++ trunk/Resources/Dialog-Preferences.r	2006-11-21 20:24:34 UTC (rev 460)
@@ -100,7 +100,8 @@
 				ColorControl	{{   0, 112, 145, 128 }, "sidc",		"System Identifiers"								},
 				ColorControl	{{ 155, 112, 290, 128 }, "chcc",		"Char Constants"									},
 				ColorControl	{{   0, 128, 145, 144 }, "uidc",		"User Identifiers"									},
-				ColorControl	{{ 155, 128, 290, 144 }, "tagc",		"HTML Tags"											},
+				ColorControl	{{ 155, 128, 255, 144 }, "tagc",		"Tags/Attribut."									},
+				ColorControl	{{ 255, 128, 290, 144 }, "attr",		""													},
 				
 				Line			{{   0, 148, 290, 149 }																		},
 

Modified: trunk/Sources/CPrefsDialog.cpp
===================================================================
--- trunk/Sources/CPrefsDialog.cpp	2006-11-21 18:12:48 UTC (rev 459)
+++ trunk/Sources/CPrefsDialog.cpp	2006-11-21 20:24:34 UTC (rev 460)
@@ -1,8 +1,8 @@
 /*	$Id$
-	
+
 	Copyright 1996, 1997, 1998, 2002
 	        Hekkelman Programmatuur B.V.  All rights reserved.
-	
+
 	Redistribution and use in source and binary forms, with or without
 	modification, are permitted provided that the following conditions are met:
 	1. Redistributions of source code must retain the above copyright notice,
@@ -12,13 +12,13 @@
 	   and/or other materials provided with the distribution.
 	3. All advertising materials mentioning features or use of this software
 	   must display the following acknowledgement:
-	   
+
 	    This product includes software developed by Hekkelman Programmatuur B.V.
-	
+
 	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
 	   promote products derived from this software without specific prior
 	   written permission.
-	
+
 	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
@@ -28,7 +28,7 @@
 	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 	Created: 10/20/97 20:28:28
 */
@@ -72,17 +72,17 @@
 	msg_ChangeTarget = 'ChTr',
 	msg_DefPageSetup = 'Page',
 	msg_StoreSuffix = 'sufx',
-	
+
 	msg_SelectSearchFolder = 'SlsF',
 	msg_AddSearchFolder = 'AdsF',
 	msg_ChangeSearchFolder = 'CnsF',
 	msg_DeleteSearchFolder = 'DlsF',
-	
+
 	msg_SelectedKBCommand = 'KBCm',
 	msg_SelectedKBBinding = 'KBBn',
 	msg_AddKB = 'AddK',
 	msg_DeleteKB = 'DelK',
-	
+
 	msg_SelectToolServer = 'seto',
 	msg_LanguageSelected = 'lang';
 
@@ -106,7 +106,7 @@
 
 	BMenuField *mf = dynamic_cast<BMenuField*>(FindView("font"));
 	FailNil(mf);
-	
+
 	fFont = mf->Menu();
 	FailNil(fFont);
 
@@ -117,18 +117,18 @@
 		FailNil(fontItem);
 		fFont->AddItem(new BMenuItem(fontItem, new BMessage(msg_FieldChanged)));
 		fontItem->SetFont(be_plain_font);
-		
+
 		for (int j = 0; j < count_font_styles(ff); j++)
 		{
 			get_font_style(ff, j, &fs);
-			
+
 			BMessage *msg = new BMessage(msg_FieldChanged);
 			msg->AddString("family", ff);
 			msg->AddString("style", fs);
 			fontItem->AddItem(new BMenuItem(fs, msg));
 		}
 	}
-	
+
 	fFont->SetRadioMode(true);
 
 	be_fixed_font->GetFamilyAndStyle(&ff, &fs);
@@ -139,7 +139,7 @@
 
 	mf = dynamic_cast<BMenuField*>(FindView("alfo"));
 	FailNil(mf);
-	
+
 	fAltFont = mf->Menu();
 	FailNil(fAltFont);
 
@@ -150,18 +150,18 @@
 		FailNil(fontItem);
 		fAltFont->AddItem(new BMenuItem(fontItem, new BMessage(msg_FieldChanged)));
 		fontItem->SetFont(be_plain_font);
-		
+
 		for (int j = 0; j < count_font_styles(ff); j++)
 		{
 			get_font_style(ff, j, &fs);
-			
+
 			BMessage *msg = new BMessage(msg_FieldChanged);
 			msg->AddString("altfamily", ff);
 			msg->AddString("altstyle", fs);
 			fontItem->AddItem(new BMenuItem(fs, msg));
 		}
 	}
-	
+
 	fAltFont->SetRadioMode(true);
 
 	fLanguage = static_cast<BMenuField*>(FindView("lang"))->Menu();
@@ -182,39 +182,39 @@
 
 	fLang = -1; // mark as unitialized, will be initialized when "lang" is set
 	SetValue("lang", 1);
-	
+
 	BTextControl *c = static_cast<BTextControl*>(FindView("sufx"));
 	c->SetModificationMessage(new BMessage(msg_StoreSuffix));
-	
+
 	fState = static_cast<BMenuField*>(FindView("sast"))->Menu();
 	fState->SetRadioMode(true);
 	fState->ItemAt(gSavedState)->SetMarked(true);
-	
+
 	fSearchPaths = dynamic_cast<CPathsBox*>(FindView("srcP"));
 	FailNil(fSearchPaths);
 	fSearchPaths->SetPrefName(prf_X_SearchPath);
-	
+
 	fIncludePaths = dynamic_cast<CPathsBox*>(FindView("incP"));
 	FailNil(fIncludePaths);
 	fIncludePaths->SetPrefName(prf_X_IncludePath);
-	
+
 	fStdErrBox = dynamic_cast<CStdErrBox*>(FindView("StEb"));
 	FailNil(fStdErrBox);
-	
+
 	fMimetypes = dynamic_cast<CMimeBox*>(FindView("mimetypes"));
-	
+
 	fKBCommands = dynamic_cast<BOutlineListView*>(FindView("kact"));
 	fKBKeys = dynamic_cast<BListView*>(FindView("keys"));
 
 	FailNil(fKBCommands);
 	FailNil(fKBKeys);
-	
+
 	fCap = dynamic_cast<CKeyCapturer*>(FindView("kebi"));
 	FailNil(fCap);
-	
+
 	fGrepBox = dynamic_cast<CGrepBox*>(FindView("grls"));
 	FailNil(fGrepBox);
-	
+
 	InitKeybindingPage();
 
 	CancelClicked();
@@ -223,7 +223,7 @@
 CPrefsDialog::~CPrefsDialog()
 {
 //	if (fPageSetup) free(fPageSetup);
-	
+
 	fKeymap.erase(fKeymap.begin(), fKeymap.end());
 } /* CPrefsDialog::~CPrefsDialog */
 
@@ -234,7 +234,7 @@
 	{
 		MWarningAlert a("The preferences have changed. Save changes before closing?", "Save", "Discard");
 		if (a == 1)
-			OKClicked();
+			OkClicked();
 		else
 			CancelClicked();
 	}
@@ -243,7 +243,7 @@
 	return CDoc::CountDocs() == 0;
 } /* CPrefsDialog::QuitRequested */
 
-bool CPrefsDialog::OKClicked()
+bool CPrefsDialog::OkClicked()
 {
 	BMenuItem *item = fFont->FindMarked();
 	if (item)
@@ -252,7 +252,7 @@
 		item = item->Submenu()->FindMarked();
 		if (item) strcpy(fFontStyle, item->Label());
 	}
-	
+
 	fFontSize = atof(GetText("fons"));
 
 	item = fAltFont->FindMarked();
@@ -262,83 +262,46 @@
 		item = item->Submenu()->FindMarked();
 		if (item) strcpy(fAltFontStyle, item->Label());
 	}
-	
+
 	fAltFontSize = atof(GetText("alfs"));
 
-	HColorControl *cc = dynamic_cast<HColorControl*>(FindView("lowc"));
-	if (cc) { gColor[kColorLow] = cc->Color(); gPrefs->SetPrefColor(prf_C_Low, gColor[kColorLow]); }
-	cc = dynamic_cast<HColorControl*>(FindView("txtc"));
-	if (cc) { gColor[kColorText] = cc->Color(); gPrefs->SetPrefColor(prf_C_Text, gColor[kColorText]); }
+	GetColor("lowc", kColorLow,				prf_C_Low);
+	GetColor("txtc", kColorText,			prf_C_Text);
+	GetColor("selc", kColorSelection,		prf_C_Selection);
+	GetColor("mrkc", kColorMark,			prf_C_Mark);
+	GetColor("keyc", kColorKeyword1,		prf_C_Keyword);
+	GetColor("ke2c", kColorKeyword2,		prf_C_AltKeyword);
+	GetColor("cmtc", kColorComment1,		prf_C_Comment);
+	GetColor("cm2c", kColorComment2,		prf_C_AltComment);
+	GetColor("strc", kColorString1,			prf_C_String);
+	GetColor("tgsc", kColorString2,			prf_C_Tagstring);
+	GetColor("numc", kColorNumber1,			prf_C_Number);
+	GetColor("nu2c", kColorNumber2,			prf_C_AltNumber);
+	GetColor("opec", kColorOperator1,		prf_C_Operator);
+	GetColor("op2c", kColorOperator2,		prf_C_AltOperator);
+	GetColor("sepc", kColorSeparator1,		prf_C_Separator);
+	GetColor("se2c", kColorSeparator2,		prf_C_AltSeparator);
+	GetColor("proc", kColorPreprocessor1,	prf_C_Preprocessor);
+	GetColor("pr2c", kColorPreprocessor2,	prf_C_AltProcessor);
+	GetColor("errc", kColorError1,			prf_C_Error);
+	GetColor("er2c", kColorError2,			prf_C_AltError);
+	GetColor("sidc", kColorIdentifierSystem,prf_C_SystemIdentifier);
+	GetColor("chcc", kColorCharConst,		prf_C_CharConstant);
+	GetColor("uidc", kColorIdentifierUser,	prf_C_UserIdentifier);
+	GetColor("tagc", kColorTag,				prf_C_Tag);
+	GetColor("attr", kColorAttribute,		prf_C_Attribute);
+	GetColor("us1c", kColorUserSet1,		prf_C_User1);
+	GetColor("us2c", kColorUserSet2,		prf_C_User2);
+	GetColor("us3c", kColorUserSet3,		prf_C_User3);
+	GetColor("us4c", kColorUserSet4,		prf_C_User4);
+	GetColor("invc", kColorInvisibles,		prf_C_Invisibles);
 
-	cc = dynamic_cast<HColorControl*>(FindView("selc"));
-	if (cc) { gColor[kColorSelection] = cc->Color(); gPrefs->SetPrefColor(prf_C_Selection, gColor[kColorSelection]); }
-	cc = dynamic_cast<HColorControl*>(FindView("mrkc"));
-	if (cc) { gColor[kColorMark] = cc->Color(); gPrefs->SetPrefColor(prf_C_Mark, gColor[kColorMark]); }
-	
-	cc = dynamic_cast<HColorControl*>(FindView("keyc"));
-	if (cc) { gColor[kColorKeyword1] = cc->Color(); gPrefs->SetPrefColor(prf_C_Keyword, gColor[kColorKeyword1]); }
-	cc = dynamic_cast<HColorControl*>(FindView("ke2c"));
-	if (cc) { gColor[kColorKeyword2] = cc->Color(); gPrefs->SetPrefColor(prf_C_AltKeyword, gColor[kColorKeyword2]); }
-	cc = dynamic_cast<HColorControl*>(FindView("cmtc"));
-	if (cc) { gColor[kColorComment1] = cc->Color(); gPrefs->SetPrefColor(prf_C_Comment, gColor[kColorComment1]); }
-	cc = dynamic_cast<HColorControl*>(FindView("cm2c"));
-	if (cc) { gColor[kColorComment2] = cc->Color(); gPrefs->SetPrefColor(prf_C_AltComment, gColor[kColorComment2]); }
-	
-	cc = dynamic_cast<HColorControl*>(FindView("strc"));
-	if (cc) { gColor[kColorString1] = cc->Color(); gPrefs->SetPrefColor(prf_C_String, gColor[kColorString1]); }
-	cc = dynamic_cast<HColorControl*>(FindView("tgsc"));
-	if (cc) { gColor[kColorString2] = cc->Color(); gPrefs->SetPrefColor(prf_C_Tagstring, gColor[kColorString2]); }
-	cc = dynamic_cast<HColorControl*>(FindView("numc"));
-	if (cc) { gColor[kColorNumber1] = cc->Color(); gPrefs->SetPrefColor(prf_C_Number, gColor[kColorNumber1]); }
-	cc = dynamic_cast<HColorControl*>(FindView("nu2c"));
-	if (cc) { gColor[kColorNumber2] = cc->Color(); gPrefs->SetPrefColor(prf_C_AltNumber, gColor[kColorNumber2]); }
-
-	cc = dynamic_cast<HColorControl*>(FindView("opec"));
-	if (cc) { gColor[kColorOperator1] = cc->Color(); gPrefs->SetPrefColor(prf_C_Operator, gColor[kColorOperator1]); }
-	cc = dynamic_cast<HColorControl*>(FindView("op2c"));
-	if (cc) { gColor[kColorOperator2] = cc->Color(); gPrefs->SetPrefColor(prf_C_AltOperator, gColor[kColorOperator2]); }
-	cc = dynamic_cast<HColorControl*>(FindView("sepc"));
-	if (cc) { gColor[kColorSeparator1] = cc->Color(); gPrefs->SetPrefColor(prf_C_Separator, gColor[kColorSeparator1]); }
-	cc = dynamic_cast<HColorControl*>(FindView("se2c"));
-	if (cc) { gColor[kColorSeparator2] = cc->Color(); gPrefs->SetPrefColor(prf_C_AltSeparator, gColor[kColorSeparator2]); }
-
-	cc = dynamic_cast<HColorControl*>(FindView("proc"));
-	if (cc) { gColor[kColorPreprocessor1] = cc->Color(); gPrefs->SetPrefColor(prf_C_Preprocessor, gColor[kColorPreprocessor1]); }
-	cc = dynamic_cast<HColorControl*>(FindView("pr2c"));
-	if (cc) { gColor[kColorPreprocessor2] = cc->Color(); gPrefs->SetPrefColor(prf_C_AltProcessor, gColor[kColorPreprocessor2]); }
-	cc = dynamic_cast<HColorControl*>(FindView("errc"));
-	if (cc) { gColor[kColorError1] = cc->Color(); gPrefs->SetPrefColor(prf_C_Error, gColor[kColorError1]); }
-	cc = dynamic_cast<HColorControl*>(FindView("er2c"));
-	if (cc) { gColor[kColorError2] = cc->Color(); gPrefs->SetPrefColor(prf_C_AltError, gColor[kColorError2]); }
-
-	cc = dynamic_cast<HColorControl*>(FindView("sidc"));
-	if (cc) { gColor[kColorIdentifierSystem] = cc->Color(); gPrefs->SetPrefColor(prf_C_SystemIdentifier, gColor[kColorIdentifierSystem]); }
-	cc = dynamic_cast<HColorControl*>(FindView("chcc"));
-	if (cc) { gColor[kColorCharConst] = cc->Color(); gPrefs->SetPrefColor(prf_C_CharConstant, gColor[kColorCharConst]); }
-
-	cc = dynamic_cast<HColorControl*>(FindView("uidc"));
-	if (cc) { gColor[kColorIdentifierUser] = cc->Color(); gPrefs->SetPrefColor(prf_C_UserIdentifier, gColor[kColorIdentifierUser]); }
-	cc = dynamic_cast<HColorControl*>(FindView("tagc"));
-	if (cc) { gColor[kColorTag] = cc->Color(); gPrefs->SetPrefColor(prf_C_Tag, gColor[kColorTag]); }
-
-	cc = dynamic_cast<HColorControl*>(FindView("us1c"));
-	if (cc) { gColor[kColorUserSet1] = cc->Color(); gPrefs->SetPrefColor(prf_C_User1, gColor[kColorUserSet1]); }
-	cc = dynamic_cast<HColorControl*>(FindView("us2c"));
-	if (cc) { gColor[kColorUserSet2] = cc->Color(); gPrefs->SetPrefColor(prf_C_User2, gColor[kColorUserSet2]); }
-	cc = dynamic_cast<HColorControl*>(FindView("us3c"));
-	if (cc) { gColor[kColorUserSet3] = cc->Color(); gPrefs->SetPrefColor(prf_C_User3, gColor[kColorUserSet3]); }
-	cc = dynamic_cast<HColorControl*>(FindView("us4c"));
-	if (cc) { gColor[kColorUserSet4] = cc->Color(); gPrefs->SetPrefColor(prf_C_User4, gColor[kColorUserSet4]); }
-
-	cc = dynamic_cast<HColorControl*>(FindView("invc"));
-	if (cc) { gColor[kColorInvisibles] = cc->Color(); gPrefs->SetPrefColor(prf_C_Invisibles, gColor[kColorInvisibles]); }
-
 	DefineInvColors(gColor[kColorSelection]);
 
 	gPrefs->SetPrefString(prf_S_FontFamily, fFontFamily);
 	gPrefs->SetPrefString(prf_S_FontStyle, fFontStyle);
 	gPrefs->SetPrefDouble(prf_D_FontSize, fFontSize);
-	
+
 	gPrefs->SetPrefString(prf_S_AltFontFamily, fAltFontFamily);
 	gPrefs->SetPrefString(prf_S_AltFontStyle, fAltFontStyle);
 	gPrefs->SetPrefDouble(prf_D_AltFontSize, fAltFontSize);
@@ -351,7 +314,7 @@
 	gPrefs->SetPrefString(prf_S_ReturnChar, gReturnChar);
 	strcpy(gControlChar, GetText("scca"));
 	gPrefs->SetPrefString(prf_S_ControlChar, gControlChar);
-	
+
 	gPrefs->SetPrefInt(prf_I_AutoIndent, gAutoIndent = IsOn("auin"));
 	gPrefs->SetPrefInt(prf_I_SyntaxColoring, gSyntaxColoring = IsOn("syco"));
 	gPrefs->SetPrefInt(prf_I_SpacesPerTab, gSpacesPerTab = atoi(GetText("tabs")));
@@ -367,7 +330,7 @@
 	gPrefs->SetPrefInt(prf_I_DiffWhite, IsOn("diwh"));
 
 	gPrefs->SetPrefInt(prf_I_SoftWrap, IsOn("sowr"));
-	
+
 	if (IsOn("wrwi"))
 		gPrefs->SetPrefInt(prf_I_WrapType, 1);
 	else if (IsOn("wrpa"))
@@ -381,7 +344,7 @@
 	gPrefs->SetPrefInt(prf_I_Protos, gPopupProtos = IsOn("shpr"));
 	gPrefs->SetPrefInt(prf_I_Types, gPopupFuncs = IsOn("shty"));
 	gPrefs->SetPrefInt(prf_I_SortPopup, IsOn("sopo"));
-	
+
 	if (IsOn("swne"))
 		gPrefs->SetPrefInt(prf_I_Startup, 1);
 	else if (IsOn("swop"))
@@ -391,16 +354,16 @@
 
 	gPrefs->SetPrefInt(prf_I_RedirectStdErr, gRedirectStdErr = IsOn("rdse"));
 	gPrefs->SetPrefInt(prf_I_Worksheet, gUseWorksheet = IsOn("wosh"));
-	
+
 	int cookie = 0;
 	CLanguageInterface *intf;
 	while ((intf = CLanguageInterface::NextIntf(cookie)) != NULL)
 		intf->SetExtensions(fSuffixes[cookie - 1].c_str());
-	
+
 	item = fDefLanguage->FindMarked();
 	gPrefs->SetPrefString(prf_S_DefLang, item ? item->Label() : "None");
 	CLanguageInterface::ChooseDefault();
-	
+
 	gPrefs->SetPrefInt(prf_I_RestorePosition, gRestorePosition = IsOn("repo"));
 	gPrefs->SetPrefInt(prf_I_RestoreFont, gRestoreFont = IsOn("refo"));
 	gPrefs->SetPrefInt(prf_I_RestoreSelection, gRestoreSelection = IsOn("rese"));
@@ -408,45 +371,45 @@
 	gPrefs->SetPrefInt(prf_I_RestoreCwd, gRestoreCWD = IsOn("recw"));
 
 	gPrefs->SetPrefInt(prf_I_SavedState, gSavedState = fState->IndexOf(fState->FindMarked()));
-	
+
 	gPrefs->SetPrefInt(prf_I_RecentSize, gRecentBufferSize = atoi(GetText("resi")));
 	gPrefs->SetPrefInt(prf_I_SkipTmp, IsOn("sktm"));
 	gPrefs->SetPrefInt(prf_I_ZoomOpen, IsOn("zoop"));
 	gPrefs->SetPrefInt(prf_I_FullPath, IsOn("fupa"));
-	
+
 	gPrefs->SetPrefInt(prf_I_Parent, IsOn("sepa"));
 	gPrefs->SetPrefInt(prf_I_BeIncludes, IsOn("incl"));
 
 	gPrefs->SetPrefInt(prf_I_Backup, IsOn("maba"));
 	gPrefs->SetPrefInt(prf_I_NlAtEof, IsOn("fonl"));
 	gPrefs->SetPrefInt(prf_I_Verify, IsOn("vofm"));
-	
+
 	gPrefs->SetPrefInt(prf_I_IdeMenu, IsOn("idmn"));
 	gPrefs->SetPrefInt(prf_I_MwPlugins, IsOn("mwpl"));
 
 	gPrefs->SetPrefInt(prf_I_PassiveFtp, IsOn("pftp"));
-	
+
 	gPrefs->SetPrefInt(prf_I_ShowGlossary, IsOn("shgl"));
 	gPrefs->SetPrefInt(prf_I_SingleClickGlossary, IsOn("sigl"));
 
 	gPrefs->SetPrefInt(prf_I_ShowHtmlPalette, IsOn("shtp"));
 	gPrefs->SetPrefInt(prf_I_ShowHtmlpaletteForHtml, IsOn("shtP"));
-	
+
 	gPrefs->SetPrefInt(prf_I_IsearchIgncase, IsOn("isic"));
 	gPrefs->SetPrefInt(prf_I_CenterFound, IsOn("cesf"));
-	
+
 	gPrefs->SetPrefInt(prf_I_RelativeGroupPaths, IsOn("rlgp"));
 	gPrefs->SetPrefInt(prf_I_SortGroup, IsOn("sogr"));
 
 	gPrefs->SetPrefInt(prf_I_SortProject, IsOn("prso"));
 	gPrefs->SetPrefInt(prf_I_AutodetectProjects, IsOn("prad"));
-	
+
 	fSearchPaths->DoOK();
 	fIncludePaths->DoOK();
 	fMimetypes->DoOK();
 	fGrepBox->DoOK();
 	fStdErrBox->DoOK();
-	
+
 	SetEnabled("ok  ", false);
 	SetEnabled("cncl", false);
 
@@ -456,8 +419,25 @@
 	CKeyMapper::Instance().WriteKeymap(fKeymap);
 
 	return false;
-} /* CPrefsDialog::OKClicked */
+} /* CPrefsDialog::OkClicked */
 
+void CPrefsDialog::SetColor(const char* const viewName, int colorId)
+{
+	HColorControl *cc;
+	if ((cc = dynamic_cast<HColorControl*>(FindView(viewName))))
+		cc->SetColor(gColor[colorId]);
+} /* CPrefsDialog::SetColor */
+
+void CPrefsDialog::GetColor(const char* const viewName, int colorId, const char* const prefName)
+{
+	HColorControl *cc;
+	if ((cc = dynamic_cast<HColorControl*>(FindView(viewName))))
+	{
+		gColor[colorId] = cc->Color();
+		gPrefs->SetPrefColor(prefName, gColor[colorId]);
+	}
+} /* CPrefsDialog::GetColor */
+
 bool CPrefsDialog::CancelClicked()
 {
 	BMenuItem *item = fFont->FindMarked();
@@ -467,7 +447,7 @@
 		if (item) item->SetMarked(false);
 		fFont->FindMarked()->SetMarked(false);
 	}
-	
+
 	item = fFont->FindItem(fFontFamily);
 	if (item)
 	{
@@ -483,7 +463,7 @@
 		if (item) item->SetMarked(false);
 		fAltFont->FindMarked()->SetMarked(false);
 	}
-	
+
 	item = fAltFont->FindItem(fAltFontFamily);
 	if (item)
 	{
@@ -501,74 +481,38 @@
 
 //	if (fPageSetup) free(fPageSetup);
 //	fPageSetup = (char *)Hex2Bin(gPrefs->GetPrefString(prf_S_DefaultPageSetup, ""), fPageSetupSize);
-	
-	HColorControl *cc = dynamic_cast<HColorControl*>(FindView("lowc"));
-	if (cc) cc->SetColor(gColor[kColorLow]);
-	cc = dynamic_cast<HColorControl*>(FindView("txtc"));
-	if (cc) cc->SetColor(gColor[kColorText]);
-	
-	cc = dynamic_cast<HColorControl*>(FindView("selc"));
-	if (cc) cc->SetColor(gColor[kColorSelection]);
-	cc = dynamic_cast<HColorControl*>(FindView("mrkc"));
-	if (cc) cc->SetColor(gColor[kColorMark]);
 
-	cc = dynamic_cast<HColorControl*>(FindView("keyc"));
-	if (cc) cc->SetColor(gColor[kColorKeyword1]);
-	cc = dynamic_cast<HColorControl*>(FindView("ke2c"));
-	if (cc) cc->SetColor(gColor[kColorKeyword2]);
-	cc = dynamic_cast<HColorControl*>(FindView("cmtc"));
-	if (cc) cc->SetColor(gColor[kColorComment1]);
-	cc = dynamic_cast<HColorControl*>(FindView("cm2c"));
-	if (cc) cc->SetColor(gColor[kColorComment2]);
-	
-	cc = dynamic_cast<HColorControl*>(FindView("strc"));
-	if (cc) cc->SetColor(gColor[kColorString1]);
-	cc = dynamic_cast<HColorControl*>(FindView("tgsc"));
-	if (cc) cc->SetColor(gColor[kColorString2]);
-	cc = dynamic_cast<HColorControl*>(FindView("numc"));
-	if (cc) cc->SetColor(gColor[kColorNumber1]);
-	cc = dynamic_cast<HColorControl*>(FindView("nu2c"));
-	if (cc) cc->SetColor(gColor[kColorNumber2]);
+	SetColor("lowc", kColorLow);
+	SetColor("txtc", kColorText);
+	SetColor("selc", kColorSelection);
+	SetColor("mrkc", kColorMark);
+	SetColor("keyc", kColorKeyword1);
+	SetColor("ke2c", kColorKeyword2);
+	SetColor("cmtc", kColorComment1);
+	SetColor("cm2c", kColorComment2);
+	SetColor("strc", kColorString1);
+	SetColor("tgsc", kColorString2);
+	SetColor("numc", kColorNumber1);
+	SetColor("nu2c", kColorNumber2);
+	SetColor("opec", kColorOperator1);
+	SetColor("op2c", kColorOperator2);
+	SetColor("sepc", kColorSeparator1);
+	SetColor("se2c", kColorSeparator2);
+	SetColor("proc", kColorPreprocessor1);
+	SetColor("pr2c", kColorPreprocessor2);
+	SetColor("errc", kColorError1);
+	SetColor("er2c", kColorError2);
+	SetColor("sidc", kColorIdentifierSystem);
+	SetColor("chcc", kColorCharConst);
+	SetColor("uidc", kColorIdentifierUser);
+	SetColor("tagc", kColorTag);
+	SetColor("attr", kColorAttribute);
+	SetColor("us1c", kColorUserSet1);
+	SetColor("us2c", kColorUserSet2);
+	SetColor("us3c", kColorUserSet3);
+	SetColor("us4c", kColorUserSet4);
+	SetColor("invc", kColorInvisibles);
 
-	cc = dynamic_cast<HColorControl*>(FindView("opec"));
-	if (cc) cc->SetColor(gColor[kColorOperator1]);
-	cc = dynamic_cast<HColorControl*>(FindView("op2c"));
-	if (cc) cc->SetColor(gColor[kColorOperator2]);
-	cc = dynamic_cast<HColorControl*>(FindView("sepc"));
-	if (cc) cc->SetColor(gColor[kColorSeparator1]);
-	cc = dynamic_cast<HColorControl*>(FindView("se2c"));
-	if (cc) cc->SetColor(gColor[kColorSeparator2]);
-
-	cc = dynamic_cast<HColorControl*>(FindView("proc"));
-	if (cc) cc->SetColor(gColor[kColorPreprocessor1]);
-	cc = dynamic_cast<HColorControl*>(FindView("pr2c"));
-	if (cc) cc->SetColor(gColor[kColorPreprocessor2]);
-	cc = dynamic_cast<HColorControl*>(FindView("errc"));
-	if (cc) cc->SetColor(gColor[kColorError1]);
-	cc = dynamic_cast<HColorControl*>(FindView("er2c"));
-	if (cc) cc->SetColor(gColor[kColorError2]);
-
-	cc = dynamic_cast<HColorControl*>(FindView("sidc"));
-	if (cc) cc->SetColor(gColor[kColorIdentifierSystem]);
-	cc = dynamic_cast<HColorControl*>(FindView("chcc"));
-	if (cc) cc->SetColor(gColor[kColorCharConst]);
-
-	cc = dynamic_cast<HColorControl*>(FindView("uidc"));
-	if (cc) cc->SetColor(gColor[kColorIdentifierUser]);
-	cc = dynamic_cast<HColorControl*>(FindView("tagc"));
-	if (cc) cc->SetColor(gColor[kColorTag]);
-	
-	cc = dynamic_cast<HColorControl*>(FindView("us1c"));
-	if (cc) cc->SetColor(gColor[kColorUserSet1]);
-	cc = dynamic_cast<HColorControl*>(FindView("us2c"));
-	if (cc) cc->SetColor(gColor[kColorUserSet2]);
-	cc = dynamic_cast<HColorControl*>(FindView("us3c"));
-	if (cc) cc->SetColor(gColor[kColorUserSet3]);
-	cc = dynamic_cast<HColorControl*>(FindView("us4c"));
-	if (cc) cc->SetColor(gColor[kColorUserSet4]);
-	cc = dynamic_cast<HColorControl*>(FindView("invc"));
-	if (cc) cc->SetColor(gColor[kColorInvisibles]);
-	
 	SetOn("auin", gPrefs->GetPrefInt(prf_I_AutoIndent, 1));
 	SetOn("syco", gPrefs->GetPrefInt(prf_I_SyntaxColoring, 1));
 	SetOn("baty", gPrefs->GetPrefInt(prf_I_Balance, 1));
@@ -584,10 +528,10 @@
 
 	SetOn("dica", gPrefs->GetPrefInt(prf_I_DiffCase, false));
 	SetOn("diwh", gPrefs->GetPrefInt(prf_I_DiffWhite, false));
-	
+
 	bool sw;
 	SetOn("sowr", sw = gPrefs->GetPrefInt(prf_I_SoftWrap, false));
-	
+
 	int wrap = gPrefs->GetPrefInt(prf_I_WrapType, 3);
 	switch (wrap)
 	{
@@ -600,7 +544,7 @@
 	SetText("wrft", s);
 
 	SetEnabled("wrft", /*sw && */wrap == 3);
-	
+
 	SetText("stca", gTabChar);
 	SetText("ssca", gSpaceChar);
 	SetText("srca", gReturnChar);
@@ -617,12 +561,12 @@
 		case 2: SetOn("swop", true); break;
 		case 3: SetOn("swno", true); break;
 	}
-	
+
 	SetOn("rdse", gPrefs->GetPrefInt(prf_I_RedirectStdErr, 1));
 	SetOn("wosh", gPrefs->GetPrefInt(prf_I_Worksheet, 1));
 
 	fSuffixes.erase(fSuffixes.begin(), fSuffixes.end());
-	
+
 	CLanguageInterface *intf;
 	int cookie = 0, i = 0;
 	const char *defLang = gPrefs->GetPrefString(prf_S_DefLang, "None");
@@ -648,17 +592,17 @@
 	SetOn("sktm", gPrefs->GetPrefInt(prf_I_SkipTmp, 1));
 	SetOn("zoop", gPrefs->GetPrefInt(prf_I_ZoomOpen, 0));
 	SetOn("fupa", gPrefs->GetPrefInt(prf_I_FullPath, 1));
-	
+
 	SetOn("sepa", gPrefs->GetPrefInt(prf_I_Parent, 1));
 	SetOn("incl", gPrefs->GetPrefInt(prf_I_BeIncludes, 1));
 
 	SetOn("maba", gPrefs->GetPrefInt(prf_I_Backup, 0));
 	SetOn("fonl", gPrefs->GetPrefInt(prf_I_NlAtEof, 1));
 	SetOn("vofm", gPrefs->GetPrefInt(prf_I_Verify, 1));
-	
+
 	SetOn("idmn", gPrefs->GetPrefInt(prf_I_IdeMenu, 1));
 	SetOn("mwpl", gPrefs->GetPrefInt(prf_I_MwPlugins, 1));
-	
+
 	SetOn("pftp", gPrefs->GetPrefInt(prf_I_PassiveFtp, 1));
 
 	SetOn("shgl", gPrefs->GetPrefInt(prf_I_ShowGlossary, 0));
@@ -666,12 +610,12 @@
 
 	SetOn("shtp", gPrefs->GetPrefInt(prf_I_ShowHtmlPalette, 1));
 	SetOn("shtP", gPrefs->GetPrefInt(prf_I_ShowHtmlpaletteForHtml, 1));
-	
+
 	SetEnabled("shtP", IsOn("shtp"));
 
 	SetOn("isic", gPrefs->GetPrefInt(prf_I_IsearchIgncase, 1));
 	SetOn("cesf", gPrefs->GetPrefInt(prf_I_CenterFound, 0));
-	
+
 	SetOn("sogr", gPrefs->GetPrefInt(prf_I_SortGroup, 1));
 	SetOn("rlgp", gPrefs->GetPrefInt(prf_I_RelativeGroupPaths, 0));
 
@@ -686,10 +630,10 @@
 
 	SetEnabled("ok  ", false);
 	SetEnabled("cncl", false);
-	
+
 	CKeyMapper::Instance().ReadKeymap(fKeymap);
 	fKBCommands->DeselectAll();
-	
+
 	return false;
 } /* CPrefsDialog::CancelClicked */
 
@@ -708,7 +652,7 @@
 			if (item) item->SetMarked(false);
 			fFont->FindMarked()->SetMarked(false);
 		}
-		
+
 		item = fFont->FindItem(ff);
 		if (item)
 		{
@@ -730,7 +674,7 @@
 			if (item) item->SetMarked(false);
 			fAltFont->FindMarked()->SetMarked(false);
 		}
-		
+
 		item = fAltFont->FindItem(ff);
 		if (item)
 		{
@@ -739,32 +683,32 @@
 			if (item) item->SetMarked(true);
 		}
 	}
-	
+
 	bool statePe = (fState->IndexOf(fState->FindMarked()) == 0);
 	SetEnabled("restore scrollbar", statePe);
 	SetEnabled("restore cwd", statePe);
-	
+
 	SetEnabled("wrft", IsOn("wrfi"));
 
 	SetEnabled("shtP", IsOn("shtp"));
 
 	UpdateKBPage();
-	
+
 } /* CPrefsDialog::UpdateFields */
 
 void CPrefsDialog::GetDefPageSetup()
 {
 //	BPrintJob prJob("a page setup job");
-//	
+//
 //	if (fPageSetup)
 //	{
 //		BMessage *s = new BMessage;
 //		if (s && s->Unflatten(fPageSetup) == B_NO_ERROR)
 //			prJob.SetSettings(s);
 //	}
-//	
+//
 //	int result = prJob.ConfigPage();
-//	
+//
 //	if (result == B_NO_ERROR)
 //	{
 //		BMessage s(prJob.Settings());
@@ -775,15 +719,15 @@
 //		FailNil(fPageSetup);
 //		result = s.Flatten(fPageSetup, fPageSetupSize);
 //		FailOSErrMsg(result, "error flattening (%d)");
-//		
+//
 //		UpdateFields();
 //	}
 } /* CPrefsDialog::GetDefPageSetup */
-	
+
 void CPrefsDialog::MessageReceived(BMessage *msg)
 {
 	long what = msg->what;
-	
+
 	switch (what)
 	{
 		case msg_ReloadGlossary:
@@ -792,33 +736,33 @@
 			if (gGlossyWindow)
 				gGlossyWindow->PostMessage(msg_ReloadGlossary);
 			break;
-	
+
 		case msg_SelectedKBCommand:
 			UpdateKBPage();
 			break;
-	
+
 		case msg_SelectedKBBinding:
 			UpdateKBCapturer();
 			break;
-		
+
 		case msg_AddKB:
 			AddKeybinding();
 			SetEnabled("ok  ", true);
 			SetEnabled("cncl", true);
 			break;
-	
+
 		case msg_DeleteKB:
 			DeleteKeybinding();
 			SetEnabled("ok  ", true);
 			SetEnabled("cncl", true);
 			break;
-		
+
 		case 'addP':
 			fGrepBox->DoCancel();
 			SetEnabled("ok  ", true);
 			SetEnabled("cncl", true);
 			break;
-		
+
 		case msg_StoreSuffix:
 			if (fSuffixes.size()) {
 				fSuffixes[GetValue("lang") - 1] = GetText("sufx");
@@ -830,7 +774,7 @@
 				}
 			}
 			break;
-		
+
 		case msg_LanguageSelected:
 			fLang = GetValue("lang") - 1;
 			{
@@ -848,7 +792,7 @@
 				SetText("sufx", fSuffixes[fLang].c_str());
 			}
 			break;
-	
+
 		case msg_FieldChanged:
 			SetEnabled("ok  ", true);
 			SetEnabled("cncl", true);
@@ -863,7 +807,7 @@
 	dRect r;
 	char name[256];
 	BView *v;
-	
+
 	switch (kind)
 	{
 		case 'pbox':
@@ -902,7 +846,7 @@
 void CPrefsDialog::InitKeybindingPage()
 {
 	int resID = rid_Cmnd_Editing;
-	
+
 	while (true)
 	{
 		long cnt, cmd;
@@ -916,16 +860,16 @@
 
 		BMemoryIO buf(p, size);
 		buf >> cnt;
-		
+
 		MyItem *mom = new MyItem(name, 0);
 		fKBCommands->AddItem(mom);
-		
+
 		if (resID == rid_Cmnd_Extensions)
 		{
 			BPopUpMenu menu("hoi");
 			PDoc::BuildExtensionsMenu(&menu);
 			cmd = 'ex\0\0';
-		
+
 			for (int i = 0; i < menu.CountItems(); i++) {
 				uint16 extHash = HashString16(menu.ItemAt(i)->Label());
 				fKBCommands->AddUnder(new MyItem(menu.ItemAt(i)->Label(), cmd|extHash), mom);
@@ -936,18 +880,18 @@
 			while (cnt--)
 			{
 				buf >> cmd;
-		
+
 				int i = 0;
 				do	buf >> s[i];
 				while (s[i++]);
-				
+
 				fKBCommands->AddUnder(new MyItem(s, cmd), mom);
 			}
 		}
 		fKBCommands->Collapse(mom);
 		resID++;
 	}
-	
+
 	fKBCommands->SetSelectionMessage(new BMessage(msg_SelectedKBCommand));
 	fKBKeys->SetSelectionMessage(new BMessage(msg_SelectedKBBinding));
 } /* CPrefsDialog::InitKeybindingsPage */
@@ -956,28 +900,28 @@
 {
 	if (fKBKeys == NULL)
 		return;
-	
+
 	MyItem *mi;
-	
+
 	while (fKBKeys->CountItems() > 0)
 		delete fKBKeys->RemoveItem((int32)0);
-	
+
 	fCap->SetShortcut(KeyShortcut());
-	
+
 	mi = static_cast<MyItem *>(fKBCommands->ItemAt(fKBCommands->CurrentSelection()));
-	
+
 	if (mi && mi->fOne)
 	{
 		keymap::iterator ki;
-		
+
 		for (ki = fKeymap.begin(); ki != fKeymap.end(); ki++)
 		{
 			if ((*ki).second == mi->fOne)
 			{
 				char s[256];
-	
+
 				CKeyCapturer::DescribeKeys((*ki).first, s);
-				
+
 				fKBKeys->AddItem(new MyItem(s, (*ki).first.prefix, (*ki).first.combo));
 			}
 		}
@@ -987,7 +931,7 @@
 void CPrefsDialog::UpdateKBCapturer()
 {
 	MyItem *mi = static_cast<MyItem*>(fKBKeys->ItemAt(fKBKeys->CurrentSelection()));
-	
+
 	KeyShortcut ks;
 
 	if (mi)
@@ -996,15 +940,15 @@
 		ks.combo = mi->fTwo;
 	}
 
-	fCap->SetShortcut(ks);	
+	fCap->SetShortcut(ks);
 } /* CPrefsDialog::UpdateKBCapturer */
 
 void CPrefsDialog::AddKeybinding()
 {
 	MyItem *mi;
-	
+
 	mi = static_cast<MyItem *>(fKBCommands->ItemAt(fKBCommands->CurrentSelection()));
-	
+
 	if (mi && mi->fOne)
 	{
 		KeyShortcut ks = fCap->Shortcut();
@@ -1020,9 +964,9 @@
 			if (a.Go() != 1)
 				return;
 		}
-	
+
 		fKeymap[ks] = mi->fOne;
-		
+
 		UpdateFields();
 	}
 } /* CPrefsDialog::AddKeybinding */
@@ -1030,16 +974,16 @@
 void CPrefsDialog::DeleteKeybinding()
 {
 	MyItem *mi;
-	
+
 	mi = static_cast<MyItem *>(fKBKeys->ItemAt(fKBKeys->CurrentSelection()));
-	
+
 	if (mi)
 	{
 		KeyShortcut ks;
-		
+
 		ks.prefix = mi->fOne & BINDINGMASK;
 		ks.combo = mi->fTwo & BINDINGMASK;
-		
+
 		if (fKeymap.find(ks) != fKeymap.end())
 		{
 			fKeymap.erase(fKeymap.find(ks));
@@ -1048,7 +992,7 @@
 	}
 } /* CPrefsDialog::DeleteKeybinding */
 
-void CPrefsDialog::Show() 
+void CPrefsDialog::Show()
 {
 	HDialog::Show();
 	if (LockLooper())
@@ -1065,4 +1009,4 @@
 		}
 		UnlockLooper();
 	}
-}
+} /* CPrefsDialog::Show */


[... truncated: 1143 lines follow ...]


From hoern at mail.berlios.de  Wed Nov 22 12:56:27 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Wed, 22 Nov 2006 12:56:27 +0100
Subject: [pe-commits] r461 - in trunk: Extensions Sources
Message-ID: <200611221156.kAMBuRgb025103@sheep.berlios.de>

Author: hoern
Date: 2006-11-22 12:56:16 +0100 (Wed, 22 Nov 2006)
New Revision: 461
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=461&view=rev

Modified:
   trunk/Extensions/CopyContaining.cpp
   trunk/Extensions/CutContaining.cpp
   trunk/Extensions/HTMLAnchor.cpp
   trunk/Extensions/HTMLImage.cpp
   trunk/Extensions/Pipe.cpp
   trunk/Extensions/PrefixLines.cpp
   trunk/Sources/CFtpDialog.cpp
   trunk/Sources/CFtpDialog.h
   trunk/Sources/CGoToLine.cpp
   trunk/Sources/CGoToLine.h
   trunk/Sources/CInfoDialog.cpp
   trunk/Sources/CInfoDialog.h
   trunk/Sources/CLogin.cpp
   trunk/Sources/CLogin.h
   trunk/Sources/COpenSelection.cpp
   trunk/Sources/COpenSelection.h
   trunk/Sources/HColorPicker2.cpp
   trunk/Sources/HColorPicker2.h
   trunk/Sources/HColorUtils.h
   trunk/Sources/HDialog.cpp
   trunk/Sources/HDialog.h
Log:
* (Hopefully) fixed a bug intruduced with the last commit:
  Saving prefs should work now again
* While touching those files removed some unnecessary white space


Modified: trunk/Extensions/CopyContaining.cpp
===================================================================
--- trunk/Extensions/CopyContaining.cpp	2006-11-21 20:24:34 UTC (rev 460)
+++ trunk/Extensions/CopyContaining.cpp	2006-11-22 11:56:16 UTC (rev 461)
@@ -1,8 +1,8 @@
 /*	$Id$
-	
+
 	Copyright 1996, 1997, 1998, 2002
 	        Hekkelman Programmatuur B.V.  All rights reserved.
-	
+
 	Redistribution and use in source and binary forms, with or without
 	modification, are permitted provided that the following conditions are met:
 	1. Redistributions of source code must retain the above copyright notice,
@@ -12,13 +12,13 @@
 	   and/or other materials provided with the distribution.
 	3. All advertising materials mentioning features or use of this software
 	   must display the following acknowledgement:
-	   
+
 	    This product includes software developed by Hekkelman Programmatuur B.V.
-	
+
 	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
 	   promote products derived from this software without specific prior
 	   written permission.
-	
+
 	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
@@ -28,8 +28,8 @@
 	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
-	
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
 	Created: 09/15/97 02:33:13
 */
 
@@ -67,11 +67,11 @@
 class CCopyContainingDialog : public HDialog {
 public:
 		enum { sResID = 1 };
-		
+
 		CCopyContainingDialog(BRect frame, const char *name, window_type type, int flags,
 			BWindow *owner, BPositionIO* data);
 
-virtual bool OKClicked();
+virtual bool OkClicked();
 virtual bool CancelClicked();
 };
 
@@ -83,13 +83,13 @@
 	FindView("text")->MakeFocus(true);
 } /* CCopyContainingDialog::CCopyContainingDialog */
 
-bool CCopyContainingDialog::OKClicked()
+bool CCopyContainingDialog::OkClicked()
 {
 	sOK = true;
 	sText = strdup(GetText("text"));
 	sSelectionOnly = IsOn("sel");
 	return true;
-} /* CCopyContainingDialog::OKClicked */
+} /* CCopyContainingDialog::OkClicked */
 
 bool CCopyContainingDialog::CancelClicked()
 {
@@ -100,21 +100,21 @@
 long perform_edit(MTextAddOn *addon)
 {
 	long result = B_NO_ERROR;
-	
+
 	try
 	{
 		long s, e, l;
 		addon->GetSelection(&s, &e);
 		sSelectionOnly = (s != e);
-		
+
 		BMemoryIO tmpl(kDLOG1, kDLOG1Size);
 		CCopyContainingDialog *p = DialogCreator<CCopyContainingDialog>::CreateDialog(addon->Window(), tmpl);
 		p->Show();
-		
+
 		wait_for_thread(p->Thread(), &l);
 		if (sOK)
 			result = CopyContaining(addon);
-		
+
 		if (sText)
 			free(sText);
 	}
@@ -123,14 +123,14 @@
 		e.DoError();
 		result = B_ERROR;
 	}
-	
+
 	return result;
 } /* perform_edit */
 
 long CopyContaining(MTextAddOn *addon)
 {
 	//  error checking
-	
+
 	long	selStart;
 	long	selEnd;
 
@@ -145,9 +145,9 @@
 		selStart = 0;
 		selEnd = addon->TextLength();
 	}
-	
+
 	//  set-up
-	
+
 	const char *txt = addon->Text(), *ptr = txt + selStart;
 	int size = selEnd - selStart;
 
@@ -156,20 +156,20 @@
 	int r = regcomp(&pb, sText, REG_EXTENDED);
 
 	if (r == REG_NOERROR)
-	{	
+	{
 		//  perform operation into temporary buffer
-		
+
 		char *new_text = new char[size + 1];
 		int ls = 0, li = 0, i = 0;
-		
+
 		while (li <= size)
 		{
 			if (li == size || ptr[li] == '\n')
 			{
 				new_text[i] = 0;
-				
+
 				r = regexec(&pb, new_text + ls, 0, NULL, 0);
-				
+
 				if (r == 0)
 				{
 					new_text[i] = '\n';
@@ -182,11 +182,11 @@
 			}
 			else
 				new_text[i] = ptr[li];
-			
+
 			i++;
 			li++;
 		}
-		
+
 		if (r < 2)
 		{
 			if (be_clipboard->Lock())
@@ -200,7 +200,7 @@
 
 		delete[] new_text;
 	}
-	
+
 	if (r != REG_NOERROR && r != REG_NOMATCH)
 	{
 		char err[100];
@@ -210,8 +210,8 @@
 		MAlert *a = new MWarningAlert(err);
 		a->Go();
 	}
-	
+
 	regfree(&pb);
-	
+
 	return B_NO_ERROR;
 } /* CopyContaining */

Modified: trunk/Extensions/CutContaining.cpp
===================================================================
--- trunk/Extensions/CutContaining.cpp	2006-11-21 20:24:34 UTC (rev 460)
+++ trunk/Extensions/CutContaining.cpp	2006-11-22 11:56:16 UTC (rev 461)
@@ -1,8 +1,8 @@
 /*	$Id$
-	
+
 	Copyright 1996, 1997, 1998, 2002
 	        Hekkelman Programmatuur B.V.  All rights reserved.
-	
+
 	Redistribution and use in source and binary forms, with or without
 	modification, are permitted provided that the following conditions are met:
 	1. Redistributions of source code must retain the above copyright notice,
@@ -12,13 +12,13 @@
 	   and/or other materials provided with the distribution.
 	3. All advertising materials mentioning features or use of this software
 	   must display the following acknowledgement:
-	   
+
 	    This product includes software developed by Hekkelman Programmatuur B.V.
-	
+
 	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
 	   promote products derived from this software without specific prior
 	   written permission.
-	
+
 	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
@@ -28,8 +28,8 @@
 	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
-	
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
 	Created: 09/15/97 02:33:13
 */
 
@@ -67,11 +67,11 @@
 class CCutContainingDialog : public HDialog {
 public:
 		enum { sResID = 1 };
-		
+
 		CCutContainingDialog(BRect frame, const char *name, window_type type, int flags,
 			BWindow *owner, BPositionIO* data);
 
-virtual bool OKClicked();
+virtual bool OkClicked();
 virtual bool CancelClicked();
 };
 
@@ -83,13 +83,13 @@
 	FindView("text")->MakeFocus(true);
 } /* CCutContainingDialog::CCutContainingDialog */
 
-bool CCutContainingDialog::OKClicked()
+bool CCutContainingDialog::OkClicked()
 {
 	sOK = true;
 	sText = strdup(GetText("text"));
 	sSelectionOnly = IsOn("sel");
 	return true;
-} /* CCutContainingDialog::OKClicked */
+} /* CCutContainingDialog::OkClicked */
 
 bool CCutContainingDialog::CancelClicked()
 {
@@ -100,21 +100,21 @@
 long perform_edit(MTextAddOn *addon)
 {
 	long result = B_NO_ERROR;
-	
+
 	try
 	{
 		long s, e, l;
 		addon->GetSelection(&s, &e);
 		sSelectionOnly = (s != e);
-		
+
 		BMemoryIO tmpl(kDLOG1, kDLOG1Size);
 		CCutContainingDialog *p = DialogCreator<CCutContainingDialog>::CreateDialog(addon->Window(), tmpl);
 		p->Show();
-		
+
 		wait_for_thread(p->Thread(), &l);
 		if (sOK)
 			result = CutContaining(addon);
-		
+
 		if (sText)
 			free(sText);
 	}
@@ -123,14 +123,14 @@
 		e.DoError();
 		result = B_ERROR;
 	}
-	
+
 	return result;
 } /* perform_edit */
 
 long CutContaining(MTextAddOn *addon)
 {
 	//  error checking
-	
+
 	long	selStart;
 	long	selEnd;
 
@@ -145,9 +145,9 @@
 		selStart = 0;
 		selEnd = addon->TextLength();
 	}
-	
+
 	//  set-up
-	
+
 	const char *txt = addon->Text();
 	int size = selEnd - selStart;
 
@@ -156,12 +156,12 @@
 	int r = regcomp(&pb, sText, REG_EXTENDED);
 
 	if (r == REG_NOERROR)
-	{	
+	{
 		char *new_text = new char[size + 1];
 		int ns, ni, ts, ti;
-		
+
 		ns = ni = ts = ti = 0;
-		
+
 		while (ti <= size)
 		{
 			if (ti == size || txt[ti] == '\n')
@@ -169,9 +169,9 @@
 				int sl = ni - ns + 1;
 
 				new_text[ni] = 0;
-				
+
 				r = regexec(&pb, new_text + ns, 0, NULL, 0);
-				
+
 				if (r == 0)
 				{
 					addon->Select(ts, ti + 1);
@@ -198,7 +198,7 @@
 			ni++;
 			ti++;
 		}
-		
+
 		if (r < 2)
 		{
 			if (be_clipboard->Lock())
@@ -212,7 +212,7 @@
 
 		delete[] new_text;
 	}
-	
+
 	if (r != REG_NOERROR && r != REG_NOMATCH)
 	{
 		char err[100];
@@ -222,8 +222,8 @@
 		MAlert *a = new MWarningAlert(err);
 		a->Go();
 	}
-	
+
 	regfree(&pb);
-	
+
 	return B_NO_ERROR;
 } /* CutContaining */

Modified: trunk/Extensions/HTMLAnchor.cpp
===================================================================
--- trunk/Extensions/HTMLAnchor.cpp	2006-11-21 20:24:34 UTC (rev 460)
+++ trunk/Extensions/HTMLAnchor.cpp	2006-11-22 11:56:16 UTC (rev 461)
@@ -1,8 +1,8 @@
 /*	$Id$
-	
+
 	Copyright 1996, 1997, 1998, 2002
 	        Hekkelman Programmatuur B.V.  All rights reserved.
-	
+
 	Redistribution and use in source and binary forms, with or without
 	modification, are permitted provided that the following conditions are met:
 	1. Redistributions of source code must retain the above copyright notice,
@@ -12,13 +12,13 @@
 	   and/or other materials provided with the distribution.
 	3. All advertising materials mentioning features or use of this software
 	   must display the following acknowledgement:
-	   
+
 	    This product includes software developed by Hekkelman Programmatuur B.V.
-	
+
 	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
 	   promote products derived from this software without specific prior
 	   written permission.
-	
+
 	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
@@ -28,8 +28,8 @@
 	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
-	
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
 	Created: 09/15/97 02:33:13
 */
 
@@ -67,11 +67,11 @@
 class CAnchorDialog : public HDialog {
 public:
 		enum { sResID = 1 };
-		
+
 		CAnchorDialog(BRect frame, const char *name, window_type type, int flags,
 			BWindow *owner, BPositionIO* data);
 
-virtual bool OKClicked();
+virtual bool OkClicked();
 virtual bool CancelClicked();
 virtual void MessageReceived(BMessage *msg);
 };
@@ -83,13 +83,13 @@
 	FindView("path")->MakeFocus(true);
 } /* CAnchorDialog::CAnchorDialog */
 
-bool CAnchorDialog::OKClicked()
+bool CAnchorDialog::OkClicked()
 {
 	sOK = true;
 	sPath = strdup(GetText("path"));
 
 	return true;
-} /* CAnchorDialog::OKClicked */
+} /* CAnchorDialog::OkClicked */
 
 bool CAnchorDialog::CancelClicked()
 {
@@ -104,9 +104,9 @@
 		try
 		{
 			entry_ref ref, doc;
-			
+
 			FailOSErr(msg->FindRef("refs", &ref));
-			
+
 			if (sAddon->GetRef(doc) == B_OK)
 			{
 				char *sp = RelativePath(doc, ref);
@@ -128,15 +128,15 @@
 long perform_edit(MTextAddOn *addon)
 {
 	long result = B_NO_ERROR;
-	
+
 	try
 	{
 		sAddon = addon;
-		
+
 		BMemoryIO tmpl(kDLOG1, kDLOG1Size);
 		CAnchorDialog *p = DialogCreator<CAnchorDialog>::CreateDialog(addon->Window(), tmpl);
 		p->Show();
-		
+
 		long l;
 		wait_for_thread(p->Thread(), &l);
 
@@ -151,23 +151,23 @@
 		e.DoError();
 		result = B_ERROR;
 	}
-	
+
 	return result;
 } /* perform_edit */
 
 long Anchor(MTextAddOn *addon)
 {
 	char s[2048];
-	
+
 	long st, end, len;
 	addon->GetSelection(&st, &end);
 	len = end - st;
-	
+
 	if (*sPath)
 		sprintf(s, "<a href=\"%s\">", sPath);
 	else
 		strcpy(s, "<a href=\"\">");
-	
+
 	addon->Select(st, st);
 	addon->Insert(s);
 
@@ -180,32 +180,32 @@
 char *RelativePath(entry_ref& a, entry_ref& b)
 {
 	BEntry e;
-	
+
 	BPath pa, pb;
-	
+
 	FailOSErr(e.SetTo(&a));
 	FailOSErr(e.GetPath(&pa));
-	
+
 	FailOSErr(e.SetTo(&b));
 	FailOSErr(e.GetPath(&pb));
-	
+
 	char result[PATH_MAX];
 	const char *s, *sa, *sb;
-	
+
 	s = sa = pa.Path();
 	sb = pb.Path();
-	
+
 	int ma, mb;
-	
+
 	ma = strrchr(sa, '/') - sa;
 	mb = strrchr(sb, '/') - sb;
-	
+
 	while (*sa == *sb)
 	{
 		sa++;
 		sb++;
 	}
-	
+
 	if (sa > s && (sa[-1] != '/' || sb[-1] != '/'))
 	{
 		while (sa > s && sa[-1] != '/')
@@ -214,7 +214,7 @@
 			sb--;
 		}
 	}
-	
+
 	if (strchr(sa, '/') == NULL)
 	{
 		strcpy(result, "./");
@@ -224,15 +224,15 @@
 	{
 		result[0] = 0;
 		char *t;
-		
+
 		while ((t = strchr(sa, '/')) != NULL)
 		{
 			strcat(result, "../");
 			sa = t + 1;
 		}
-		
+
 		strcat(result, sb);
 	}
-	
+
 	return strdup(result);
 } /* RelativePath */

Modified: trunk/Extensions/HTMLImage.cpp
===================================================================
--- trunk/Extensions/HTMLImage.cpp	2006-11-21 20:24:34 UTC (rev 460)
+++ trunk/Extensions/HTMLImage.cpp	2006-11-22 11:56:16 UTC (rev 461)
@@ -1,8 +1,8 @@
 /*	$Id$
-	
+
 	Copyright 1996, 1997, 1998, 2002
 	        Hekkelman Programmatuur B.V.  All rights reserved.
-	
+
 	Redistribution and use in source and binary forms, with or without
 	modification, are permitted provided that the following conditions are met:
 	1. Redistributions of source code must retain the above copyright notice,
@@ -12,13 +12,13 @@
 	   and/or other materials provided with the distribution.
 	3. All advertising materials mentioning features or use of this software
 	   must display the following acknowledgement:
-	   
+
 	    This product includes software developed by Hekkelman Programmatuur B.V.
-	
+
 	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
 	   promote products derived from this software without specific prior
 	   written permission.
-	
+
 	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
@@ -28,7 +28,7 @@
 	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 	Created: 09/15/97 02:33:13
 */
@@ -67,11 +67,11 @@
 class CImageDialog : public HDialog {
 public:
 		enum { sResID = 1 };
-		
+
 		CImageDialog(BRect frame, const char *name, window_type type, int flags,
 			BWindow *owner, BPositionIO* data);
 
-virtual bool OKClicked();
+virtual bool OkClicked();
 virtual bool CancelClicked();
 virtual void MessageReceived(BMessage *msg);
 };
@@ -83,7 +83,7 @@
 	FindView("path")->MakeFocus(true);
 } /* CImageDialog::CImageDialog */
 
-bool CImageDialog::OKClicked()
+bool CImageDialog::OkClicked()
 {
 	sOK = true;
 	sPath = strdup(GetText("path"));
@@ -95,7 +95,7 @@
 	sAlign = strdup(GetText("align"));
 
 	return true;
-} /* CImageDialog::OKClicked */
+} /* CImageDialog::OkClicked */
 
 bool CImageDialog::CancelClicked()
 {
@@ -110,20 +110,20 @@
 		try
 		{
 			short width, height;
-			
+
 			entry_ref ref;
-			
+
 			FailOSErr(msg->FindRef("refs", &ref));
-			
+
 			try
 			{
 				GetGIFSize(ref, width, height);
 
 				char s[32];
-				
+
 				sprintf(s, "%d", width);
 				SetText("width", s);
-				
+
 				sprintf(s, "%d", height);
 				SetText("height", s);
 			}
@@ -131,25 +131,25 @@
 			{
 				e.DoError();
 			}
-			
+
 			entry_ref doc;
 			sAddon->GetRef(doc);
-			
+
 			char *sp = RelativePath(doc, ref);
-			
+
 			SetText("path", sp);
-			
+
 			char *np = strrchr(sp, '/');
-			
+
 			if (np == NULL) np = sp;
 			else np++;
-			
+
 			int l = max_c(strlen(np) - 4, 0);
 			if (strcasecmp(np + l, ".gif") == 0)
 				np[l] = 0;
-			
+
 			SetText("alt", np);
-			
+
 			free(sp);
 		}
 		catch (HErr& err)
@@ -164,15 +164,15 @@
 long perform_edit(MTextAddOn *addon)
 {
 	long result = B_NO_ERROR;
-	
+
 	try
 	{
 		sAddon = addon;
-		
+
 		BMemoryIO tmpl(kDLOG1, kDLOG1Size);
 		CImageDialog *p = DialogCreator<CImageDialog>::CreateDialog(addon->Window(), tmpl);
 		p->Show();
-		
+
 		long l;
 		wait_for_thread(p->Thread(), &l);
 
@@ -184,41 +184,41 @@
 		e.DoError();
 		result = B_ERROR;
 	}
-	
+
 	return result;
 } /* perform_edit */
 
 long Image(MTextAddOn *addon)
 {
 	char s[2048], *sp;
-	
+
 	strcpy(s, "<img");
 	sp = s + strlen(s);
-	
+
 	if (*sPath)
 	{
 		sprintf(sp, " src=\"%s\"", sPath);
 		sp += strlen(sp);
 	}
-	
+
 	if (*sWidth)
 	{
 		sprintf(sp, " width=%s", sWidth);
 		sp += strlen(sp);
 	}
-	
+
 	if (*sHeight)
 	{
 		sprintf(sp, " height=%s", sHeight);
 		sp += strlen(sp);
 	}
-	
+
 	if (*sBorder)
 	{
 		sprintf(sp, " border=%s", sBorder);
 		sp += strlen(sp);
 	}
-	
+
 	if (*sAlign)
 	{
 		sprintf(sp, " align=%s", sAlign);
@@ -230,15 +230,15 @@
 		sprintf(sp, " alt=\"%s\"", sAlt);
 		sp += strlen(sp);
 	}
-	
+
 	if (*sMap)
 	{
 		sprintf(sp, " ismap map=%s", sMap);
 		sp += strlen(sp);
 	}
-	
+
 	strcat(sp, ">");
-	
+
 	long st, end;
 	addon->GetSelection(&st, &end);
 	addon->Insert(s);
@@ -252,39 +252,39 @@
 {
 	BFile file;
 	BPositionIO& data = file;
-	
+
 	FailOSErr(file.SetTo(&ref, B_READ_ONLY));
-	
+
 	char buf[256];
-	
+
 	CheckedRead(file, buf, 3);
 	buf[3] = 0;
 
 	if (strcmp(buf, "GIF"))
 		throw HErr("Not a gif file");
-	
+
 	CheckedRead(file, buf, 3);
-	
+
 	if (strcmp(buf, "87a") && strcmp(buf, "89a"))
 		throw HErr("Not a known gif file");
 
 	CheckedRead(file, buf, 7);
-	
+
 	int bitPixel = 2 << (buf[4] & 0x07);
 	file.Seek(bitPixel * 3, SEEK_CUR);
 
 	while (true)
 	{
 		unsigned char c;
-		
+
 		data >> c;
-		
+
 		if (c == ';')
 		{
 			// huh?
 			throw HErr("Not a valid GIF file");
 		}
-		
+
 		if (c == '!')
 		{
 			data >> c;
@@ -292,12 +292,12 @@
 				;
 			continue;
 		}
-		
+
 		if (c != ',')
 			continue;
-		
+
 		CheckedRead(file, buf, 9);
-		
+
 		width = B_LENDIAN_TO_HOST_INT16(*(short *)(buf + 4));
 		height = B_LENDIAN_TO_HOST_INT16(*(short *)(buf + 6));
 		return;
@@ -315,39 +315,39 @@
 		char buf[256];
 		CheckedRead(data, buf, count);
 	}
-	
+
 	return count;
 } /* GetGIFDataBlock */
 
 char *RelativePath(entry_ref& a, entry_ref& b)
 {
 	BEntry e;
-	
+
 	BPath pa, pb;
-	
+
 	FailOSErr(e.SetTo(&a));
 	FailOSErr(e.GetPath(&pa));
-	
+
 	FailOSErr(e.SetTo(&b));
 	FailOSErr(e.GetPath(&pb));
-	
+
 	char result[PATH_MAX];
 	const char *s, *sa, *sb;
-	
+
 	s = sa = pa.Path();
 	sb = pb.Path();
-	
+
 	int ma, mb;
-	
+
 	ma = strrchr(sa, '/') - sa;
 	mb = strrchr(sb, '/') - sb;
-	
+
 	while (*sa == *sb)
 	{
 		sa++;
 		sb++;
 	}
-	
+
 	if (sa > s && (sa[-1] != '/' || sb[-1] != '/'))
 	{
 		while (sa > s && sa[-1] != '/')
@@ -356,7 +356,7 @@
 			sb--;
 		}
 	}
-	
+
 	if (strchr(sa, '/') == NULL)
 	{
 		strcpy(result, "./");
@@ -367,15 +367,15 @@
 		result[0] = 0;
 
 		char *t;
-		
+
 		while ((t = strchr(sa, '/')) != NULL)
 		{
 			strcat(result, "../");
 			sa = t + 1;
 		}
-		
+
 		strcat(result, sb);
 	}
-	
+
 	return strdup(result);
 } /* RelativePath */

Modified: trunk/Extensions/Pipe.cpp
===================================================================
--- trunk/Extensions/Pipe.cpp	2006-11-21 20:24:34 UTC (rev 460)
+++ trunk/Extensions/Pipe.cpp	2006-11-22 11:56:16 UTC (rev 461)
@@ -1,8 +1,8 @@
 /*	$Id$
-	
+
 	Copyright 1996, 1997, 1998, 2002
 	        Hekkelman Programmatuur B.V.  All rights reserved.
-	
+
 	Redistribution and use in source and binary forms, with or without
 	modification, are permitted provided that the following conditions are met:
 	1. Redistributions of source code must retain the above copyright notice,
@@ -12,13 +12,13 @@
 	   and/or other materials provided with the distribution.
 	3. All advertising materials mentioning features or use of this software
 	   must display the following acknowledgement:
-	   
+
 	    This product includes software developed by Hekkelman Programmatuur B.V.
-	
+
 	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
 	   promote products derived from this software without specific prior
 	   written permission.
-	
+
 	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
@@ -28,7 +28,7 @@
 	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 	Created: 09/15/97 02:33:13
 */
@@ -66,11 +66,11 @@
 class CPipeDialog : public HDialog {
 public:
 		enum { sResID = 1 };
-		
+
 		CPipeDialog(BRect frame, const char *name, window_type type, int flags,
 			BWindow *owner, BPositionIO* data);
 
-virtual bool OKClicked();
+virtual bool OkClicked();
 virtual bool CancelClicked();
 };
 
@@ -81,12 +81,12 @@
 	FindView("command")->MakeFocus(true);
 } /* CPipeDialog::CPipeDialog */

[... truncated: 2702 lines follow ...]


From hoern at mail.berlios.de  Wed Nov 22 19:50:00 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Wed, 22 Nov 2006 19:50:00 +0100
Subject: [pe-commits] r462 - trunk/Languages/Sources
Message-ID: <200611221850.kAMIo0C0013088@sheep.berlios.de>

Author: hoern
Date: 2006-11-22 19:49:59 +0100 (Wed, 22 Nov 2006)
New Revision: 462
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=462&view=rev

Modified:
   trunk/Languages/Sources/HtmlJsPhp_Popup.cpp
Log:
* HTML-JS-PHP function popup is now able to handle:
- headings over multiple lines
- headings with attributes
- tags inside the heading
- attributes enclosed with single-quotes
- attributes without quotes


Modified: trunk/Languages/Sources/HtmlJsPhp_Popup.cpp
===================================================================
--- trunk/Languages/Sources/HtmlJsPhp_Popup.cpp	2006-11-22 11:56:16 UTC (rev 461)
+++ trunk/Languages/Sources/HtmlJsPhp_Popup.cpp	2006-11-22 18:49:59 UTC (rev 462)
@@ -129,140 +129,138 @@
 	return txt;
 } /* skip_white */
 
-const char *Anchor(const char *txt, CLanguageProxy& ao)
+bool get_attribute(const char *&ptr, const char *&namBeg, int& namLen, const char *&valBeg, int& valLen)
 {
-	char name[PATH_MAX];
+	const char *namEnd=0, *valEnd=0;
 
-	txt = skip_white(txt);
-
-	while (*txt != 0)
+	namBeg = valBeg = 0;
+	ptr = skip_white(ptr);
+	if (*ptr != 0 && *ptr != '>')
 	{
-		if (strncasecmp(txt, "HREF", 4) == 0)
-		{
-
-			txt = skip_white(txt + 4);
-
-			if (*txt != '=')
-				break;
-
-			txt = skip_white(txt + 1);
-
-			if (*txt != '"')
-				break;
-
-			const char *file = ++txt;
-
-			while (*txt && *txt != '"' && *txt != '#')
-				++txt;
-
-			if (*txt == 0)
-				break;
-
-			int l = min((long)PATH_MAX - 1, txt - file - 1);
-			if (l > 0)
+		// Search for attribue name
+		namBeg = namEnd = ptr;
+		// Gracefully also accept non alphanumeric characters
+		while (*namEnd != 0 && *namEnd != '=' && !isspace(*namEnd))
+			namEnd++;
+		ptr = skip_white(namEnd);
+		// Search for attribue value
+		if (*ptr == '=') {
+			ptr = skip_white(ptr+1);
+			if (*ptr == '"' || *ptr == '\'')
 			{
-				strncpy(name, file, l);
-				name[l] = 0;
-				ao.AddInclude(name, name);
+				// Value is enclosed
+				const char *encl = ptr;
+				valBeg = valEnd = (ptr + 1);
+				while (*valEnd != 0 && *valEnd != *encl)
+					valEnd++;
+				ptr = valEnd+1;
 			}
-			break;
+			else
+			{
+				// Value is not enclosed
+				valBeg = valEnd = ptr;
+				while (isalnum(*valEnd) || *valEnd == '_')
+					valEnd++;
+				ptr = valEnd;
+			}
 		}
-		else if (strncasecmp(txt, "NAME", 4) == 0)
-		{
-			txt = skip_white(txt + 4);
-			
-			if (*txt != '=')
-				break;
-			
-			txt = skip_white(txt + 1);
-			
-			if (*txt != '"')
-				break;
+		//
+		namLen = namEnd - namBeg;
+		valLen = valEnd - valBeg;
+		return true;
+	} else {
+		return false;
+	}
+}
 
-			int offset = txt - ao.Text();
-			const char *anchor = txt + 1;
-			
-			txt = skip(txt + 1, '"');
-			
-			if (*txt == 0)
-				break;
-			char *p = name + kMaxNameSize;
-			int l = min(kMaxNameSize - 1, txt - anchor - 1);
-			strncpy(name, anchor, l);
-			name[l] = 0;
+void skip_attributes(const char *&ptr)
+{
+	const char *nam, *val;
+	int namLen, valLen, len;
 
-			sprintf(p, "A: %s", name);
+	// Skip tagname
+	if (*(++ptr) != 0 && *ptr == '/')
+		ptr++;
+	while (*ptr != 0 && isalnum(*ptr))
+		ptr++;
+	// Skip attributes
+	while (get_attribute(ptr, nam, namLen, val, valLen)) ;
+	// skip ">"
+	ptr++;
+}
 
-			ao.AddFunction(p, name, offset);
+const char *Anchor(const char *txt, CLanguageProxy& ao)
+{
+	const char *nam, *val;
+	int namLen, valLen, len;
 
-			break;
-		}
-		else
+	while (get_attribute(txt, nam, namLen, val, valLen))
+	{
+		if (valLen > 0)
 		{
-			while (isalnum(*txt))
-				++txt;
-
-			txt = skip_white(txt);
-			
-			if (*txt == '=')
+			if (strncasecmp(nam, "HREF", 4) == 0)
 			{
-				txt = skip_white(txt + 1);
-				if (*txt == '"')
-					txt = skip(txt + 1, '"');
+				if (*val != '#')
+				{
+					BString label("HREF:  "), include(val, valLen);
+					label << include;
+					ao.AddInclude(label.String(), include.String());
+				}
 			}
-			
-			txt = skip_white(txt);
-			
-			if (*txt == '>')
-				return txt + 1;
-
-			continue;
+			else if (strncasecmp(nam, "NAME", 4) == 0)
+			{
+				BString label("A:  "), function(val, valLen);
+				label << function;
+				ao.AddFunction(label.String(), function.String(), txt - ao.Text());
+			}
 		}
-	}
-	
-	return skip(txt, '>');
+
+	};
+	return txt;
 } /* Anchor */
 
 const char *Heading(const char *txt, CLanguageProxy& ao)
 {
-	const char *hName;
-	int level = *txt - '0';
-	
-	txt = skip(txt + 1, '>');
-	
-	while (*txt == '<')
-		txt = skip(txt + 1, '>');
-	
-	if (*txt == 0)
-		return txt;
-	
-	hName = txt;
-	
-	txt = skip(txt + 1, '<');
-	
-	char name[kMaxNameSize];
-	int l = min(txt - hName - 1, kMaxNameSize - 1);
-	int offset = hName - ao.Text();
-	
-	strncpy(name, hName, l);
-	name[l] = 0;
-	
-	char* p = strtok(name, "\n\t\r");
-	
-	while (p)
-	{
-		int l = std::min((int)strlen(p), (int)kMaxNameSize);
-		if (l > 0)
-		{
-			char label[kMaxNameSize + 10];
-			std::snprintf(label, kMaxNameSize + 10, "H%d: %s", level, p);
-			ao.AddFunction(label, p, offset);
-			break;
+	char endTag[6];
+	bool wasSpace = false;
+	const char *ptr = txt;
+	BString label("H"), heading;
+
+	label << (*txt - '0') << ":  ";
+	skip_attributes(ptr);
+	sprintf(endTag, "</h%c>", *txt);
+	txt = ptr;
+	while (*ptr != 0) {
+		if (*ptr == '<') {
+			if (strncasecmp(ptr, endTag, 5) == 0)
+			{
+				break;
+			}
+			skip_attributes(ptr);
+		} else {
+			if (isspace(*ptr))
+			{
+				if (!wasSpace)
+					label << *ptr;
+				wasSpace = true;
+			}
+			else
+			{
+				label << *ptr;
+				wasSpace = false;
+			}
+			ptr++;
 		}
-		p = strtok(NULL, "\n\r\t");
 	}
-	
-	return txt;
+	if (label.Length() > 100)
+	{
+		label.Truncate(100);
+		label << "?";
+	}
+	heading.SetTo(txt, ptr-txt);
+	ao.AddFunction(label.String(), heading.String(), txt - ao.Text());
+
+	return ptr;
 } /* Heading */
 
 const char *JavaScript(const char *txt, CLanguageProxy& ao)
@@ -325,7 +323,7 @@
 					*n = 0;
 					
 					char label[kMaxNameSize + 3];
-					strcpy(label, "JS: ");
+					strcpy(label, "JS:  ");
 					strcat(label, name);
 
 					ao.AddFunction(label, name, offset);
@@ -403,7 +401,7 @@
 					*n = 0;
 					
 					char label[kMaxNameSize + 6];
-					strcpy(label, "PHP: ");
+					strcpy(label, "PHP:  ");
 					strcat(label, name);
 
 					ao.AddFunction(label, name, offset);



From stippi at mail.berlios.de  Wed Nov 22 21:03:20 2006
From: stippi at mail.berlios.de (stippi at BerliOS)
Date: Wed, 22 Nov 2006 21:03:20 +0100
Subject: [pe-commits] r463 - trunk/Sources
Message-ID: <200611222003.kAMK3Kpm020754@sheep.berlios.de>

Author: stippi
Date: 2006-11-22 21:03:19 +0100 (Wed, 22 Nov 2006)
New Revision: 463
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=463&view=rev

Modified:
   trunk/Sources/PApp.cpp
Log:
* proper locking before using the already running dialog when
  msg_Preferences is received


Modified: trunk/Sources/PApp.cpp
===================================================================
--- trunk/Sources/PApp.cpp	2006-11-22 18:49:59 UTC (rev 462)
+++ trunk/Sources/PApp.cpp	2006-11-22 20:03:19 UTC (rev 463)
@@ -932,8 +932,7 @@
 				long l;
 				if (fPrefOpener) wait_for_thread(fPrefOpener, &l);
 				fPrefOpener = (thread_id)NULL;
-				if (fPrefsDialog)
-				{
+				if (fPrefsDialog) {
 					BAutolock lock(fPrefsDialog);
 
 					int c = 1 << current_workspace();
@@ -941,10 +940,18 @@
 					if (gPrefs->GetPrefInt(prf_I_WindowToWorkspace, 1))
 						fPrefsDialog->SetWorkspaces(c);
 
-					if (fPrefsDialog->IsHidden())
-						fPrefsDialog->Show();
-
-					fPrefsDialog->Activate(true);
+					if (fPrefsDialog->Lock()) {
+	
+						if (fPrefsDialog->IsHidden()) {
+							fPrefsDialog->Show();
+						}
+	
+						fPrefsDialog->Activate(true);
+	
+						fPrefsDialog->Unlock();
+					} else {
+						THROW(("Preferences panel failed to lock"));
+					}
 				}
 				else
 					THROW(("Preferences panel failed to open"));



From stippi at mail.berlios.de  Wed Nov 22 21:10:16 2006
From: stippi at mail.berlios.de (stippi at BerliOS)
Date: Wed, 22 Nov 2006 21:10:16 +0100
Subject: [pe-commits] r464 - trunk/Sources
Message-ID: <200611222010.kAMKAGU7021232@sheep.berlios.de>

Author: stippi
Date: 2006-11-22 21:10:15 +0100 (Wed, 22 Nov 2006)
New Revision: 464
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=464&view=rev

Modified:
   trunk/Sources/PDoc.cpp
   trunk/Sources/PText.cpp
   trunk/Sources/PText.h
Log:
changed the way font settings work:
* PText is configured to use one of three "font kinds":
  - normal
  - alternative
  - individual
* the actual font is no longer saved unless the kind is "individual",
  however the presence of the "fontkind" setting is mandatory, old
  font settings will be ignored
* when the normal or the alternative font is changed in the global
  preference dialog, all open text documents will adopt it instantly
* no longer flickers for no reason when the the preferences change
* an individual font can be achieved through the documents info dialog
* the popup menu is changed to display "Individual Font", unchecking
  it will switch back to the normal font (TODO: when the info dialog
  is still showing, it doesn't re-enable it's Apply button in this
  moment)
* text documents no longer pretend to use the Alternative Font when
  they really use just some other font than the normal font


Modified: trunk/Sources/PDoc.cpp
===================================================================
--- trunk/Sources/PDoc.cpp	2006-11-22 20:03:19 UTC (rev 463)
+++ trunk/Sources/PDoc.cpp	2006-11-22 20:10:15 UTC (rev 464)
@@ -1247,8 +1247,14 @@
 			}
 			
 			case msg_PrefsChanged:
-				fText->SetViewColor(gPrefs->GetPrefColor(prf_C_Low, ui_color(B_PANEL_BACKGROUND_COLOR)));
-				fText->Invalidate();
+				rgb_color viewColor = gPrefs->GetPrefColor(
+					prf_C_Low, ui_color(B_PANEL_BACKGROUND_COLOR));
+				rgb_color oldViewColor = fText->ViewColor();
+				if (*(uint32*)&viewColor != *(uint32*)&oldViewColor) {
+					fText->SetViewColor(viewColor);
+					fText->Invalidate();
+				}
+				fText->FontChanged();
 
 				fStatus->Draw(fStatus->Bounds());
 				ResetMenuShortcuts();

Modified: trunk/Sources/PText.cpp
===================================================================
--- trunk/Sources/PText.cpp	2006-11-22 20:03:19 UTC (rev 463)
+++ trunk/Sources/PText.cpp	2006-11-22 20:10:15 UTC (rev 464)
@@ -175,6 +175,7 @@
 		B_WILL_DRAW | B_NAVIGABLE | B_PULSE_NEEDED | B_FRAME_EVENTS)
 	, fText(txt)
 	, fSplitCursorShown(false)
+	, fFontKind(kNormalFont)
 {
 	fAnchor = fCaret = 0;
 	fBlockSelect = false;
@@ -452,11 +453,21 @@
 			fTabStops = i;
 		if (msg.FindBool("show tabs", &b) == B_OK)
 			ShowTabStops(b);
-		if (msg.FindFloat("fontsize", &f) == B_OK)
-			fFont.SetSize(f);
-		if (msg.FindString("fontfamily", &s1) == B_OK 
-			&& msg.FindString("fontstyle", &s2) == B_OK)
-			fFont.SetFamilyAndStyle(s1, s2);
+
+		if (msg.FindInt32("fontkind", &i) == B_OK) {
+			fFontKind = i;
+		}
+
+		if (fFontKind == kIndividualFont) {
+			if (msg.FindFloat("fontsize", &f) == B_OK)
+				fFont.SetSize(f);
+			if (msg.FindString("fontfamily", &s1) == B_OK 
+				&& msg.FindString("fontstyle", &s2) == B_OK)
+				fFont.SetFamilyAndStyle(s1, s2);
+		} else {
+			FontChanged(false);
+		}
+
 		if (msg.FindBool("syntaxcoloring", &b) == B_OK)
 			fSyntaxColoring = b;
 
@@ -513,14 +524,16 @@
 {
 	FailOSErr(msg.AddInt32("tabstop", fTabStops));
 	FailOSErr(msg.AddBool("show tabs", Doc()->ToolBar()->ShowsTabs()));
-	FailOSErr(msg.AddFloat("fontsize", fFont.Size()));
-	
-	font_family ff;
-	font_style fs;
-	fFont.GetFamilyAndStyle(&ff, &fs);
 
-	FailOSErr(msg.AddString("fontfamily", ff));
-	FailOSErr(msg.AddString("fontstyle", fs));
+	FailOSErr(msg.AddInt32("fontkind", fFontKind));
+	if (fFontKind == kIndividualFont) {
+		font_family ff;
+		font_style fs;
+		fFont.GetFamilyAndStyle(&ff, &fs);
+		FailOSErr(msg.AddString("fontfamily", ff));
+		FailOSErr(msg.AddString("fontstyle", fs));
+		FailOSErr(msg.AddFloat("fontsize", fFont.Size()));
+	}
 
 	FailOSErr(msg.AddInt32("anchor", fAnchor));
 	FailOSErr(msg.AddInt32("caret", fCaret));
@@ -597,6 +610,67 @@
 	catch (...) {}
 } /* PText::SetSettingsMW */
 
+void PText::SetFontKind(int kind)
+{
+	if (fFontKind == kind)
+		return;
+
+	fFontKind = kind;
+
+	FontChanged();
+} /* PText::SetFontKind */
+
+void PText::FontChanged(bool reInit)
+{
+printf("PText::FontChanged(%d)\n", reInit);
+	const char* fontFamilyKey = NULL;
+	const char* fontStyleKey = NULL;
+	const char* fontSizeKey = NULL;
+
+	switch (fFontKind) {
+		case kAltFont:
+			fontFamilyKey = prf_S_AltFontFamily;
+			fontStyleKey = prf_S_AltFontStyle;
+			fontSizeKey = prf_D_AltFontSize;
+			break;
+
+		case kNormalFont:
+			fontFamilyKey = prf_S_FontFamily;
+			fontStyleKey = prf_S_FontStyle;
+			fontSizeKey = prf_D_FontSize;
+			break;
+
+		case kIndividualFont:
+		default:
+			break;
+	}
+
+	if (!fontFamilyKey) {
+printf("  individual font\n");
+		// don't adopt font from preferences
+		return;
+	}
+
+	BFont font;
+	font.SetFamilyAndStyle(gPrefs->GetPrefString(fontFamilyKey),
+						   gPrefs->GetPrefString(fontStyleKey));
+	font.SetSize(gPrefs->GetPrefDouble(fontSizeKey));
+
+	if (fFont != font) {
+printf("  font changed\n");
+		fFont = font;
+		if (reInit) {
+			ReInit();
+			Invalidate();
+		}
+	}
+} /* PText::FontChanged */
+
+int PText::FontKind() const
+{
+	return fFontKind;
+} /* PText::FontKind */
+
 void PText::SelectLine(int lineNr)
 {
 	if (lineNr < 0) lineNr = 0;
@@ -2456,34 +2530,31 @@
 		fMainPopUp->FindItem(B_SELECT_ALL)->SetEnabled(abs(fCaret - fAnchor) < fText.Size());
 		fMainPopUp->FindItem(msg_ToggleShowInvisibles)->SetMarked(fShowInvisibles);
 		fMainPopUp->FindItem(msg_SoftWrap)->SetMarked(fSoftWrap);
-	
-		BFont f;
-		f.SetFamilyAndStyle(gPrefs->GetPrefString(prf_S_FontFamily), gPrefs->GetPrefString(prf_S_FontStyle));
-		f.SetSize(gPrefs->GetPrefDouble(prf_D_FontSize));
-		
-		BFont af;
-		af.SetFamilyAndStyle(gPrefs->GetPrefString(prf_S_AltFontFamily), gPrefs->GetPrefString(prf_S_AltFontStyle));
-		af.SetSize(gPrefs->GetPrefDouble(prf_D_AltFontSize));
 
-		if (af == f)
-			fMainPopUp->FindItem(msg_ToggleFont)->SetEnabled(false);
-			
-		if (f == fFont)
-		{
-			f = af;
-			fMainPopUp->FindItem(msg_ToggleFont)->SetMarked(false);
+		BMenuItem* fontItem = fMainPopUp->FindItem(msg_ToggleFont);
+		int fontKind = kAltFont;
+		// TODO: what about localized item names?!?
+		switch (fFontKind) {
+			case kNormalFont:
+				fontItem->SetLabel("Alternate Font");
+				fontItem->SetMarked(false);
+				fontKind = kAltFont;
+				break;
+			case kAltFont:
+				fontItem->SetLabel("Alternate Font");
+				fontItem->SetMarked(true);
+				fontKind = kNormalFont;
+				break;
+			case kIndividualFont:
+			default:
+				fontItem->SetLabel("Individual Font");
+				fontItem->SetMarked(true);
+				fontKind = kNormalFont;
+				break;
 		}
-		else
-			fMainPopUp->FindItem(msg_ToggleFont)->SetMarked(true);
-
 		BMessage *msg = new BMessage(msg_ToggleFont);
-		font_family ff;
-		font_style fs;
-		f.GetFamilyAndStyle(&ff, &fs);
-		msg->AddString("family", ff);
-		msg->AddString("style", fs);
-		msg->AddFloat("size", f.Size());
-		fMainPopUp->FindItem(msg_ToggleFont)->SetMessage(msg);
+		msg->AddInt32("fontkind", fontKind);
+		fontItem->SetMessage(msg);
 	
 		be_clipboard->Lock();
 		fMainPopUp->FindItem(B_PASTE)->SetEnabled(be_clipboard->Data()->HasData("text/plain", B_MIME_DATA));
@@ -5524,10 +5595,10 @@
 				break;
 
 			case msg_ChangeFontAndTabs:
- //				RegisterCommand(new PFontTabsCmd(this, msg));
+//				RegisterCommand(new PFontTabsCmd(this, msg));
 				ChangedInfo(msg);
 				break;
-			
+
 			case msg_FindInNextFile:
 				gFindDialog->PostMessage(msg_FindInNextFile);
 				break;
@@ -6086,14 +6157,27 @@
 	int32 i;
 	float f;
 	bool b, dirty = false;
-	
+
+	if (msg->FindInt32("fontkind", &i) == B_OK)
+		fFontKind = i;
+
+	BFont newFont = fFont;
 	if (msg->FindString("family", &family) == B_OK &&
 				msg->FindString("style", &style) == B_OK)
-		fFont.SetFamilyAndStyle(family, style);
+		newFont.SetFamilyAndStyle(family, style);
 	
 	if (msg->FindFloat("size", &f) == B_OK)
-		fFont.SetSize(f);
-	
+		newFont.SetSize(f);
+
+	if (newFont != fFont) {
+		// this message came from the CInfoDialog,
+		// configuring an individual font
+		fFontKind = kIndividualFont;
+		fFont = newFont;
+	}
+
+	FontChanged(false);
+
 	if (msg->FindInt32("tabs", &i) == B_OK)
 		fTabStops = i;
 	

Modified: trunk/Sources/PText.h
===================================================================
--- trunk/Sources/PText.h	2006-11-22 20:03:19 UTC (rev 463)
+++ trunk/Sources/PText.h	2006-11-22 20:10:15 UTC (rev 464)
@@ -80,6 +80,12 @@
 
 //friend class PFontTabsCmd;	// lets keep life simple
 
+enum {
+	kNormalFont			= 0,
+	kAltFont			= 1,
+	kIndividualFont		= 2,
+};
+
 public:
 			PText(BRect frame, PTextBuffer& txt, BScrollBar *bars[], 
 				  const char *ext);
@@ -122,6 +128,10 @@
 			void GetSettingsMW(BPositionIO& set);
 			void SetSettingsMW(BPositionIO& set);
 
+			void SetFontKind(int kind);
+			int FontKind() const;
+			void FontChanged(bool reInit = true);
+
 			void ChangedInfo(BMessage *msg);
 			
 			void GetSelectedText(char*& s, bool extend = false);
@@ -347,6 +357,7 @@
 			bool fSoftWrap;
 			int fWrapType;
 			int fWrapWidth;
+			int fFontKind;
 };
 
 inline void PText::HideCaret() {



From stippi at mail.berlios.de  Wed Nov 22 21:29:58 2006
From: stippi at mail.berlios.de (stippi at BerliOS)
Date: Wed, 22 Nov 2006 21:29:58 +0100
Subject: [pe-commits] r465 - trunk/Sources
Message-ID: <200611222029.kAMKTwUW023183@sheep.berlios.de>

Author: stippi
Date: 2006-11-22 21:29:57 +0100 (Wed, 22 Nov 2006)
New Revision: 465
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=465&view=rev

Modified:
   trunk/Sources/PApp.cpp
Log:
* completely overlocked that BAutolock, or did it just appear?!?
  (in any case, the bug hunting has shown that it can be beneficial
  to check the success of the lock)


Modified: trunk/Sources/PApp.cpp
===================================================================
--- trunk/Sources/PApp.cpp	2006-11-22 20:10:15 UTC (rev 464)
+++ trunk/Sources/PApp.cpp	2006-11-22 20:29:57 UTC (rev 465)
@@ -934,24 +934,21 @@
 				fPrefOpener = (thread_id)NULL;
 				if (fPrefsDialog) {
 					BAutolock lock(fPrefsDialog);
+					if (!lock.IsLocked()) {
+						THROW(("Preferences panel failed to lock"));
+						break;
+					}
 
 					int c = 1 << current_workspace();
 
 					if (gPrefs->GetPrefInt(prf_I_WindowToWorkspace, 1))
 						fPrefsDialog->SetWorkspaces(c);
 
-					if (fPrefsDialog->Lock()) {
-	
-						if (fPrefsDialog->IsHidden()) {
-							fPrefsDialog->Show();
-						}
-	
-						fPrefsDialog->Activate(true);
-	
-						fPrefsDialog->Unlock();
-					} else {
-						THROW(("Preferences panel failed to lock"));
+					if (fPrefsDialog->IsHidden()) {
+						fPrefsDialog->Show();
 					}
+
+					fPrefsDialog->Activate(true);
 				}
 				else
 					THROW(("Preferences panel failed to open"));



From stippi at mail.berlios.de  Wed Nov 22 21:34:08 2006
From: stippi at mail.berlios.de (stippi at BerliOS)
Date: Wed, 22 Nov 2006 21:34:08 +0100
Subject: [pe-commits] r466 - trunk/Sources
Message-ID: <200611222034.kAMKY8wC023872@sheep.berlios.de>

Author: stippi
Date: 2006-11-22 21:34:07 +0100 (Wed, 22 Nov 2006)
New Revision: 466
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=466&view=rev

Modified:
   trunk/Sources/PText.cpp
Log:
* removed debug left over... sorry about that


Modified: trunk/Sources/PText.cpp
===================================================================
--- trunk/Sources/PText.cpp	2006-11-22 20:29:57 UTC (rev 465)
+++ trunk/Sources/PText.cpp	2006-11-22 20:34:07 UTC (rev 466)
@@ -622,7 +622,6 @@
 
 void PText::FontChanged(bool reInit)
 {
-printf("PText::FontChanged(%d)\n", reInit);
 	const char* fontFamilyKey = NULL;
 	const char* fontStyleKey = NULL;
 	const char* fontSizeKey = NULL;
@@ -646,7 +645,6 @@
 	}
 
 	if (!fontFamilyKey) {
-printf("  individual font\n");
 		// don't adopt font from preferences
 		return;
 	}
@@ -657,7 +655,6 @@
 	font.SetSize(gPrefs->GetPrefDouble(fontSizeKey));
 
 	if (fFont != font) {
-printf("  font changed\n");
 		fFont = font;
 		if (reInit) {
 			ReInit();



From hoern at mail.berlios.de  Sat Nov 25 00:39:42 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Sat, 25 Nov 2006 00:39:42 +0100
Subject: [pe-commits] r467 - in trunk: Resources Sources
Message-ID: <200611242339.kAONdg6p030975@sheep.berlios.de>

Author: hoern
Date: 2006-11-25 00:39:37 +0100 (Sat, 25 Nov 2006)
New Revision: 467
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=467&view=rev

Added:
   trunk/Sources/PrefControls.h
Modified:
   trunk/Resources/Dialog-Preferences.r
   trunk/Sources/CDiffWindow.cpp
   trunk/Sources/CDoc.cpp
   trunk/Sources/CDocIO.cpp
   trunk/Sources/CDocWindow.cpp
   trunk/Sources/CPrefsDialog.cpp
   trunk/Sources/CPrefsDialog.h
   trunk/Sources/CProjectJamFile.cpp
   trunk/Sources/CProjectMakeFile.cpp
   trunk/Sources/PApp.cpp
   trunk/Sources/PDoc.cpp
   trunk/Sources/PProjectWindow.cpp
   trunk/Sources/PText.cpp
   trunk/Sources/Prefs.h
Log:
* Pref controls names now live centralized as defines in a file
* Some cleanup


Modified: trunk/Resources/Dialog-Preferences.r
===================================================================
--- trunk/Resources/Dialog-Preferences.r	2006-11-22 20:34:07 UTC (rev 466)
+++ trunk/Resources/Dialog-Preferences.r	2006-11-24 23:39:37 UTC (rev 467)
@@ -1,8 +1,8 @@
 /*	$Id$
-	
+
 	Copyright 1996, 1997, 1998, 2002
 	        Hekkelman Programmatuur B.V.  All rights reserved.
-	
+
 	Redistribution and use in source and binary forms, with or without
 	modification, are permitted provided that the following conditions are met:
 	1. Redistributions of source code must retain the above copyright notice,
@@ -12,13 +12,13 @@
 	   and/or other materials provided with the distribution.
 	3. All advertising materials mentioning features or use of this software
 	   must display the following acknowledgement:
-	   
+
 	    This product includes software developed by Hekkelman Programmatuur B.V.
-	
+
 	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
 	   promote products derived from this software without specific prior
 	   written permission.
-	
+
 	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
@@ -28,10 +28,11 @@
 	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
 #include "Types.r"
+#include "PrefControls.h"
 
 
 resource rtyp_Popu (rid_Popu_PrfFont, "Font menu") {
@@ -62,160 +63,162 @@
 	}
 };
 
+
 resource 'DLOG' (132, "Preferences") {
 	{0, 0, 415, 266}, "Preferences", B_TITLED_WINDOW, NORMAL,
 	{
 		TabbedBook				{{   0,   0, 415, 266 }, "tabB" 															},
 			TabSheet			{ "Colours", "The colours used for syntax colouring and window layout"						},
-				ColorControl	{{   0,   0, 145,  16 }, "lowc",		"Background"										},
-				ColorControl	{{ 155,   0, 290,  16 }, "txtc",		"Normal Text"										},
+				ColorControl	{{   0,   0, 145,  16 }, pnm_Col_C_Low,					"Background"						},
+				ColorControl	{{ 155,   0, 290,  16 }, pnm_Col_C_Text,				"Normal Text"						},
 
-				ColorControl	{{   0,  16, 145,  32 }, "selc",		"Selection"											},
-				ColorControl	{{ 155,  16, 290,  32 }, "mrkc",		"Mark"												},
-				
+				ColorControl	{{   0,  16, 145,  32 }, pnm_Col_C_Selection,			"Selection"							},
+				ColorControl	{{ 155,  16, 290,  32 }, pnm_Col_C_Mark,				"Mark"								},
+
 				Line			{{   0,  36, 290,  37 }																		},
 
-				ColorControl	{{   0,  40, 110,  56 }, "keyc",		"Keywords"											},
-				ColorControl	{{ 110,  40, 145,  56 }, "ke2c",		""													},
-				ColorControl	{{ 155,  40, 255,  56 }, "cmtc",		"Comments"											},
-				ColorControl	{{ 255,  40, 290,  56 }, "cm2c",		""													},
-				
-				ColorControl	{{   0,  56, 110,  72 }, "strc",		"Strings"											},
-				ColorControl	{{ 110,  56, 145,  72 }, "tgsc",		""													},
-				ColorControl	{{ 155,  56, 255,  72 }, "numc",		"Numbers"											},
-				ColorControl	{{ 255,  56, 290,  72 }, "nu2c",		""													},
+				ColorControl	{{   0,  40, 110,  56 }, pnm_Col_C_Keyword1,			"Keywords"							},
+				ColorControl	{{ 110,  40, 145,  56 }, pnm_Col_C_Keyword2,			""									},
+				ColorControl	{{ 155,  40, 255,  56 }, pnm_Col_C_Comment1,			"Comments"							},
+				ColorControl	{{ 255,  40, 290,  56 }, pnm_Col_C_Comment2,			""									},
 
-				ColorControl	{{   0,  72, 110,  88 }, "opec",		"Operators"											},
-				ColorControl	{{ 110,  72, 145,  88 }, "op2c",		""													},
-				ColorControl	{{ 155,  72, 255,  88 }, "sepc",		"Separators"										},
-				ColorControl	{{ 255,  72, 290,  88 }, "se2c",		""													},
-				
-				ColorControl	{{   0,  88, 110, 104 }, "proc",		"PreProcessor"										},
-				ColorControl	{{ 110,  88, 145, 104 }, "pr2c",		""													},
-				ColorControl	{{ 155,  88, 255, 104 }, "errc",		"Errors"											},
-				ColorControl	{{ 255,  88, 290, 104 }, "er2c",		""													},
-				
+				ColorControl	{{   0,  56, 110,  72 }, pnm_Col_C_String1,				"Strings"							},
+				ColorControl	{{ 110,  56, 145,  72 }, pnm_Col_C_String2,				""									},
+				ColorControl	{{ 155,  56, 255,  72 }, pnm_Col_C_Number1,				"Numbers"							},
+				ColorControl	{{ 255,  56, 290,  72 }, pnm_Col_C_Number2,				""									},
+
+				ColorControl	{{   0,  72, 110,  88 }, pnm_Col_C_Operator1,			"Operators"							},
+				ColorControl	{{ 110,  72, 145,  88 }, pnm_Col_C_Operator2,			""									},
+				ColorControl	{{ 155,  72, 255,  88 }, pnm_Col_C_Separator1,			"Separators"						},
+				ColorControl	{{ 255,  72, 290,  88 }, pnm_Col_C_Separator2,			""									},
+
+				ColorControl	{{   0,  88, 110, 104 }, pnm_Col_C_Preprocessor1,		"PreProcessor"						},
+				ColorControl	{{ 110,  88, 145, 104 }, pnm_Col_C_Preprocessor2,		""									},
+				ColorControl	{{ 155,  88, 255, 104 }, pnm_Col_C_Error1,				"Errors"							},
+				ColorControl	{{ 255,  88, 290, 104 }, pnm_Col_C_Error2,				""									},
+
 				Line			{{   0, 108, 290, 109 }},
-				
-				ColorControl	{{   0, 112, 145, 128 }, "sidc",		"System Identifiers"								},
-				ColorControl	{{ 155, 112, 290, 128 }, "chcc",		"Char Constants"									},
-				ColorControl	{{   0, 128, 145, 144 }, "uidc",		"User Identifiers"									},
-				ColorControl	{{ 155, 128, 255, 144 }, "tagc",		"Tags/Attribut."									},
-				ColorControl	{{ 255, 128, 290, 144 }, "attr",		""													},
-				
+
+				ColorControl	{{   0, 112, 145, 128 }, pnm_Col_C_IdentifierSystem,	"System Identifiers"				},
+				ColorControl	{{ 155, 112, 290, 128 }, pnm_Col_C_CharConst,			"Char Constants"					},
+				ColorControl	{{   0, 128, 145, 144 }, pnm_Col_C_IdentifierUser,		"User Identifiers"					},
+				ColorControl	{{ 155, 128, 255, 144 }, pnm_Col_C_Tag,					"Tags/Attribut."					},
+				ColorControl	{{ 255, 128, 290, 144 }, pnm_Col_C_Attribute,			""									},
+
 				Line			{{   0, 148, 290, 149 }																		},
 
-				ColorControl	{{   0, 152, 145, 168 }, "us1c",		"User defined 1"									},
-				ColorControl	{{ 155, 152, 290, 168 }, "us2c",		"User defined 2"									},
-				ColorControl	{{   0, 168, 145, 184 }, "us3c",		"User defined 3"									},
-				ColorControl	{{ 155, 168, 290, 184 }, "us4c",		"User defined 4"									},
+				ColorControl	{{   0, 152, 145, 168 }, pnm_Col_C_UserSet1,			"User defined 1"					},
+				ColorControl	{{ 155, 152, 290, 168 }, pnm_Col_C_UserSet2,			"User defined 2"					},
+				ColorControl	{{   0, 168, 145, 184 }, pnm_Col_C_UserSet3,			"User defined 3"					},
+				ColorControl	{{ 155, 168, 290, 184 }, pnm_Col_C_UserSet4,			"User defined 4"					},
 
 			TabSheetEnd			{																							},
 
 			TabSheet			{ "Connections", "Options that control the connections to other programs"					},
-				CheckBox		{{   0,   0, 200,  16 }, "idmn",		"Show Metrowerks BeIDE Menu"						},
-				CheckBox		{{   0,  20, 200,  36 }, "mwpl",		"Load Metrowerks BeIDE Extensions"					},
-				CheckBox		{{   0,  50, 200,  66 }, "pftp",		"Use Passive FTP by default"						},
+				CheckBox		{{   0,   0, 200,  16 }, pnm_Con_X_ShowBeIdeMenu,		"Show Metrowerks BeIDE Menu"		},
+				CheckBox		{{   0,  20, 200,  36 }, pnm_Con_X_LoadBeIdeExt,		"Load Metrowerks BeIDE Extensions"	},
+				CheckBox		{{   0,  50, 200,  66 }, pnm_Con_X_PassiveFtp,			"Use Passive FTP by default"		},
 			TabSheetEnd			{																							},
-			
+
 			TabSheet			{ "Differences", "Options that control the Find Differences command"						},
-				CheckBox		{{   0,   0, 200,  16 }, "dica",		"Ignore Case Change"								},
-				CheckBox		{{   0,  20, 200,  36 }, "diwh",		"Ignore White Space"								},
+				CheckBox		{{   0,   0, 200,  16 }, pnm_Dif_X_DiffCaseInsensitive,	"Ignore Case Change"				},
+				CheckBox		{{   0,  20, 200,  36 }, pnm_Dif_X_IgnoreWhiteSpace,	"Ignore White Space"				},
 			TabSheetEnd			{																							},
 
 			TabSheet			{ "Editor", "How the editor should behave"													},
-				CheckBox		{{   0,   0, 140,  16 }, "stab",		"Show Tabstops"										},
-				Edit			{{ 150,   0, 290,  16 }, "tabs",		"Spaces per Tab:",		"", "0123456789", 3, 90		},
+				CheckBox		{{   0,   0, 140,  16 }, pnm_Edi_X_ShowTabs,			"Show Tabstops"						},
+				Edit			{{ 150,   0, 290,  16 }, pnm_Edi_T_SpacesPerTab,		"Spaces per Tab:",		"", "0123456789", 3, 90		},
 
-				CheckBox		{{   0,  20, 140,  36 }, "syco",		"Syntax Colouring"									},
-				CheckBox		{{ 150,  20, 290,  36 }, "auin",		"Auto Indent"										},
+				CheckBox		{{   0,  20, 140,  36 }, pnm_Edi_X_SyntaxColoring,		"Syntax Colouring"					},
+				CheckBox		{{ 150,  20, 290,  36 }, pnm_Edi_X_AutoIndent,			"Auto Indent"						},
 
-				CheckBox		{{   0,  40, 140,  56 }, "baty",		"Balance While Typing"								},
-				CheckBox		{{ 150,  40, 290,  56 }, "smbr",		"Smart Braces"										},
-				
-				CheckBox		{{   0,  60, 140,  76 }, "blcu",		"Block Cursor"										},
-				CheckBox		{{ 150,  60, 290,  76 }, "flcu",		"Flashing Cursor"									},
-				
-				CheckBox		{{   0,  80, 140,  96 }, "smwo",		"Smart Workspaces"									},
-				CheckBox		{{ 150,  80, 290,  96 }, "alho",		"Alternate Home"									},
-											
+				CheckBox		{{   0,  40, 140,  56 }, pnm_Edi_X_BalanceWhileTyping,	"Balance While Typing"				},
+				CheckBox		{{ 150,  40, 290,  56 }, pnm_Edi_X_SmartBraces,			"Smart Braces"						},
+
+				CheckBox		{{   0,  60, 140,  76 }, pnm_Edi_X_BlockCursor,			"Block Cursor"						},
+				CheckBox		{{ 150,  60, 290,  76 }, pnm_Edi_X_FlashingCursor,		"Flashing Cursor"					},
+
+				CheckBox		{{   0,  80, 140,  96 }, pnm_Edi_X_SmartWorkspaces,		"Smart Workspaces"					},
+				CheckBox		{{ 150,  80, 290,  96 }, pnm_Edi_X_AlternateHome,		"Alternate Home"					},
+
 				Line			{{   0, 103, 290, 104 }},
 
-				PopupMenu		{{   0, 111, 190, 127 }, "font",		"Font:",				rid_Popu_PrfFont, 50		},
-				Edit			{{ 200, 111, 290, 127 }, "fons",		"Size:",				"", "0123456789", 2, 40		},
+				PopupMenu		{{   0, 111, 190, 127 }, pnm_Edi_P_Font1Face,			"Font:",				rid_Popu_PrfFont, 50		},
+				Edit			{{ 200, 111, 290, 127 }, pnm_Edi_T_Font1Size,			"Size:",				"", "0123456789", 2, 40		},
 
-				PopupMenu		{{   0, 131, 190, 147 }, "alfo",		"Alt. Font:",			rid_Popu_PrfFont, 50		},
-				Edit			{{ 200, 131, 290, 147 }, "alfs",		"Size:",				"", "0123456789", 2, 40		},
+				PopupMenu		{{   0, 131, 190, 147 }, pnm_Edi_P_Font2Face,			"Alt. Font:",			rid_Popu_PrfFont, 50		},
+				Edit			{{ 200, 131, 290, 147 }, pnm_Edi_T_Font2Size,			"Size:",				"", "0123456789", 2, 40		},
 
 			TabSheetEnd			{																							},
 
 			TabSheet			{ "File Types", "These types show up in the Save Dialogbox"									},
-				StringListBox	{{   0,   0, 290, 120 }, "mimetypes"														},
+				StringListBox	{{   0,   0, 290, 120 }, pnm_Typ_L_Mimetypes												},
 			TabSheetEnd			{																							},
 
 			TabSheet			{ "Files", "Options for files on disk"														},
-				Caption			{{   0,   0, 120,  16 }, "sv",			"When saving a file"								},
+				Caption			{{   0,   0, 120,  16 }, "sv",							"When saving a file"				},
 
-				CheckBox		{{ 140,  20, 290,  36 }, "maba",		"Make backup (filename~)"							},
-				CheckBox		{{ 140,  40, 290,  56 }, "fonl",		"End with newline"									},
-				
+				CheckBox		{{ 140,  20, 290,  36 }, pnm_Fil_X_MakeBackup,			"Make backup (filename~)"			},
+				CheckBox		{{ 140,  40, 290,  56 }, pnm_Fil_X_EndWithNewline,		"End with newline"					},
+
 				Line			{{   0,  63, 290,  64 }},
-				
-				CheckBox		{{   0,  71, 290,  87 }, "vofm",		"Verify open files for modification"				},
-				
+
+				CheckBox		{{   0,  71, 290,  87 }, pnm_Fil_X_VerifyOpenFiles,		"Verify open files for modification"},
+
 				Line			{{   0,  94, 290,  95 }},
 
-				Edit			{{   0, 102, 180, 118 }, "resi",		"Nr of Recent Documents", "", "0123456789", 2, 140	},
-				CheckBox		{{ 190, 102, 290, 118 }, "sktm",		"Ignore tmp files"									},
-				
+				Edit			{{   0, 102, 180, 118 }, pnm_Fil_T_NrOfRecentDocs,		"Nr of Recent Documents", "", "0123456789", 2, 140	},
+				CheckBox		{{ 190, 102, 290, 118 }, pnm_Fil_X_SkipTmpFiles,		"Ignore tmp files"					},
+
 				Line			{{   0, 125, 290, 126 }},
 
-				CheckBox		{{   0, 133, 120, 149 }, "zoop",		"Zoom Open Panel"									},
-				CheckBox		{{ 140, 133, 290, 149 }, "fupa",		"Full Path in Window Title"							},
+				CheckBox		{{   0, 133, 120, 149 }, pnm_Fil_X_ZoomOpenPanel,		"Zoom Open Panel"					},
+				CheckBox		{{ 140, 133, 290, 149 }, pnm_Fil_X_FullPathInTitle,		"Full Path in Window Title"			},
 
 			TabSheetEnd			{																							},
+
 			TabSheet			{ "Glossary", "Glossary options" },
-				Button			{{   0,   0, 110,  20 }, "reloadglos",	"Reload Glossary",						'RelG'		},
-				CheckBox		{{   0,  30, 290,  46 }, "shgl",		"Show Glossary Window at startup"					},
-				CheckBox		{{   0,  50, 290,  66 }, "scgl",		"Act on single click"								},
+				Button			{{   0,   0, 110,  20 }, "reloadglos",					"Reload Glossary",		'RelG'		},
+				CheckBox		{{   0,  30, 290,  46 }, pnm_Glo_X_ShowGlossary,		"Show Glossary Window at startup"	},
+				CheckBox		{{   0,  50, 290,  66 }, pnm_Glo_X_SingleClickGlossary,	"Act on single click"				},
 			TabSheetEnd			{																							},
-			
+
 			TabSheet			{ "Grep Patterns", "Standard Grep Patterns to use in the Find Dialog"						},
-				
+
 				GrepListBox		{{   0,   0, 290, 170 }, "grls"																},
-				
+
 			TabSheetEnd			{																							},
-			
+
 			TabSheet			{ "Groups", "Group file options" },
-				CheckBox		{{   0,   0, 280,  16 }, "sogr",		"Sort the files inside a group"						},
-				CheckBox		{{   0,  20, 280,  36 }, "rlgp",		"Store relative paths in a group file"				},
+				CheckBox		{{   0,   0, 280,  16 }, pnm_Grp_X_SortGroup,			"Sort the files inside a group"		},
+				CheckBox		{{   0,  20, 280,  36 }, pnm_Grp_X_RelativeGroupPaths,	"Store relative paths in a group file"},
 			TabSheetEnd			{																							},
-			
+
 			TabSheet			{ "Include Paths", "Paths to use when searching for include files"							},
-				CheckBox		{{   0,   0, 280,  16 }, "sepa",		"Search Parent"										},
-				CheckBox		{{   0,  20, 280,  36 }, "incl",		"Search the paths in $BEINCLUDES"					},
-				Caption			{{   0,  40, 200,  56 }, "more",		"And search the following paths:"					},
+				CheckBox		{{   0,   0, 280,  16 }, pnm_Inc_X_SearchParent,		"Search Parent"						},
+				CheckBox		{{   0,  20, 280,  36 }, pnm_Inc_X_BeIncludes,			"Search the paths in $BEINCLUDES"	},
+				Caption			{{   0,  40, 200,  56 }, "more",						"And search the following paths:"	},
 				PathBox			{{   0,  60, 290, 160 }, "incP" },
 			TabSheetEnd			{																							},
-			
+
 			TabSheet			{ "Invisibles", "Options for the way invisible characters are displayed"					},
-				Edit			{{   0,   0, 190,  16 }, "scca",		"Show Control Characters as:",		"?", "", 1, 170	},
-				
+				Edit			{{   0,   0, 190,  16 }, pnm_Inv_T_ControlChar,		"Show Control Characters as:",		"?", "", 1, 170	},
+
 				Line			{{   0,  21, 290,  22 }},
-				
-				Caption			{{   0,  27, 290,  43 }, "invc",		"Options below are effective only when showing invisibles" },
-				
-				ColorControl	{{   0,  47, 190,  63 }, "invc",		"Invisibles Colour"									},
-				Edit			{{   0,  67, 190,  83 }, "stca",		"Show Tab Character as:",			"", "", 1, 170	},
-				Edit			{{   0,  87, 190, 103 }, "ssca",		"Show Space Character as:",			"", "", 1, 170	},
-				Edit			{{   0, 107, 190, 123 }, "srca",		"Show Return Character as:",		"", "", 1, 170	},
+
+				Caption			{{   0,  27, 290,  43 }, "invccap",		"Options below are effective only when showing invisibles" },
+
+				ColorControl	{{   0,  47, 190,  63 }, pnm_Inv_C_Invisibles,			"Invisibles Colour"					},
+				Edit			{{   0,  67, 190,  83 }, pnm_Inv_T_TabChar,				"Show Tab Character as:",		"", "", 1, 170	},
+				Edit			{{   0,  87, 190, 103 }, pnm_Inv_T_SpaceChar,			"Show Space Character as:",		"", "", 1, 170	},
+				Edit			{{   0, 107, 190, 123 }, pnm_Inv_T_ReturnChar,			"Show Return Character as:",	"", "", 1, 170	},
 			TabSheetEnd			{																							},
-			
+
 			TabSheet			{ "Keybindings", "The bindings between key shortcuts and actions"							},
 
 				Caption			{{   0,   0,  40,  16 }, "actcap",		"Action:"											},
 				OutlineList		{{  42,   2, 288, 131 }, "kact"																},
-				
+
 				Caption			{{   0, 139,  40, 155 }, "keycap",		"Keys:"												},
 				List			{{  42, 141, 168, 179 }, "keys"																},
 
@@ -224,80 +227,80 @@
 				Button			{{ 180, 159, 230, 179 }, "adke",		"Add",							'AddK'				},
 				Button			{{ 240, 159, 290, 179 }, "deke",		"Delete",						'DelK'				},
 			TabSheetEnd			{																							},
-			
+
 			TabSheet			{ "Languages", "Options for Syntax Colouring and the Function Popup"						},
-				CheckBox		{{   0,   0, 140,  16 }, "shin",		"Show Includes"										},
-				CheckBox		{{   0,  20, 140,  36 }, "shpr",		"Show Function Prototypes"							},
-				CheckBox		{{ 150,   0, 290,  16 }, "shty",		"Show Types"										},
-				CheckBox		{{ 150,  20, 290,  36 }, "sopo",		"Sort Alphabetically"								},
-				
+				CheckBox		{{   0,   0, 140,  16 }, pnm_Lng_X_ShowIncludes,		"Show Includes"						},
+				CheckBox		{{   0,  20, 140,  36 }, pnm_Lng_X_ShowPrototypes,		"Show Function Prototypes"			},
+				CheckBox		{{ 150,   0, 290,  16 }, pnm_Lng_X_ShowTypes,			"Show Types"						},
+				CheckBox		{{ 150,  20, 290,  36 }, pnm_Lng_X_SortPopup,			"Sort Alphabetically"				},
+
 				Line			{{   0,  40, 290,  41 }},
-				
-				Caption			{{   0,  50, 200,  66 }, "lc",			"Suffix Mapping:"									},
-				PopupMenu		{{   0,  70, 120,  86 }, "lang",		"Language:",			rid_Popu_PrfLang, 55		},
-				Edit			{{ 130,  70, 290,  86 }, "sufx",		"Suffixes:",			"", "", 0, 45				},
-				
+
+				Caption			{{   0,  50, 200,  66 }, "lc",							"Suffix Mapping:"					},
+				PopupMenu		{{   0,  70, 120,  86 }, pnm_Lng_P_Language,			"Language:",			rid_Popu_PrfLang, 55},
+				Edit			{{ 130,  70, 290,  86 }, pnm_Lng_T_Suffixes,			"Suffixes:",			"", "", 0, 45},
+
 				Line			{{   0,  93, 290,  94 }},
-				
-				PopupMenu		{{   0, 101, 200, 117 }, "dela",		"Default Language:",	rid_Popu_PrfDefaultLang, 90	},
+
+				PopupMenu		{{   0, 101, 200, 117 }, pnm_Lng_P_DefaultLanguage,		"Default Language:",	rid_Popu_PrfDefaultLang, 90	},
 			TabSheetEnd			{																							},
-			
+
 			TabSheet			{ "Projects", "Project window options"														},
-				CheckBox		{{   0,   0, 280,  16 }, "prso",		"Sort the files inside a project"					},
-				CheckBox		{{   0,  20, 280,  36 }, "prad",		"Autodetect mimetypes of 'Jamfile' & 'Makefile'"	},
+				CheckBox		{{   0,   0, 280,  16 }, pnm_Prj_X_SortProjectFiles,	"Sort the files inside a project"	},
+				CheckBox		{{   0,  20, 280,  36 }, pnm_Prj_X_AutodetectProjects,	"Autodetect mimetypes of 'Jamfile' & 'Makefile'"},
 			TabSheetEnd			{																							},
 
 			TabSheet			{ "Searching", "Paths in the directory popup of the Find Dialog and more"					},
 				PathBox			{{   0,   0, 290, 100 }, "srcP"																},
-				
+
 				Line			{{   0, 107, 290, 108 }},
-				
-				CheckBox		{{   0, 115, 200, 131 }, "isic",		"Incremental Search Ignores Case"					},
-				CheckBox		{{   0, 135, 200, 151 }, "cesf",		"Center the String Found"							},
-				
+
+				CheckBox		{{   0, 115, 200, 131 }, pnm_Src_X_InclSearchIgnoreCase,"Incremental Search Ignores Case"	},
+				CheckBox		{{   0, 135, 200, 151 }, pnm_Src_X_CenterFoundString,	"Center the String Found"			},
+
 			TabSheetEnd			{																							},
 
 			TabSheet			{ "Startup", "What to do when Pe is launched"												},
-				RadioButton		{{   0,   0, 145,  16 }, "swne",		"Create New Document"								},
-				RadioButton		{{   0,  20, 145,  36 }, "swop",		"Show Open Dialog"									},
-				RadioButton		{{   0,  40, 290,  56 }, "swno",		"Do Nothing"										},
+				RadioButton		{{   0,   0, 145,  16 }, pnm_Sup_R_CreateNewDocument,	"Create New Document"				},
+				RadioButton		{{   0,  20, 145,  36 }, pnm_Sup_R_ShowOpenDialog,		"Show Open Dialog"					},
+				RadioButton		{{   0,  40, 290,  56 }, pnm_Sup_R_DoNothing,			"Do Nothing"						},
 				Caption			{{  40,  56, 290,  72 }, "s_w_c",		" (only effective in combination with a worksheet)"	},
-				
+
 				Line			{{   0,  79, 290,  80 }},
 
-				CheckBox		{{   0,  87, 290, 103 }, "shtp",		"Show HTML Palette"									},
-				CheckBox		{{  20, 107, 290, 123 }, "shtP",		"Only when editing HTML files"						},
+				CheckBox		{{   0,  87, 290, 103 }, pnm_Sup_X_ShowHtmlPalette,		"Show HTML Palette"					},
+				CheckBox		{{  20, 107, 290, 123 }, pnm_Sup_X_ShowPaletteForHtml,	"Only when editing HTML files"		},
 			TabSheetEnd			{																							},
 
 			TabSheet			{ "State", "What to do with state information in saved documents"							},
-				Caption			{{   0,   0, 140,  16 }, "state",		"When opening a file restore"						},
-				CheckBox		{{   0,  20, 140,  36 }, "repo",		"Position"											},
-				CheckBox		{{   0,  40, 140,  56 }, "refo",		"Font Settings"										},
-				CheckBox		{{   0,  60, 140,  76 }, "rese",		"Selection"											},
-				CheckBox		{{   0,  80, 140,  96 }, "resc",		"Scrollbar Settings"								},
-				CheckBox		{{   0, 100, 140, 116 }, "recw",		"Working Directory"									},
-				PopupMenu		{{   0, 120, 140, 140 }, "sast",		"Use state format:",		rid_Popu_PrfState, 90	},
+				Caption			{{   0,   0, 140,  16 }, "state",						"When opening a file restore"		},
+				CheckBox		{{   0,  20, 140,  36 }, pnm_Sta_X_RestorePosition,		"Position"							},
+				CheckBox		{{   0,  40, 140,  56 }, pnm_Sta_X_RestoreFont,			"Font Settings"						},
+				CheckBox		{{   0,  60, 140,  76 }, pnm_Sta_X_RestoreSelection,	"Selection"							},
+				CheckBox		{{   0,  80, 140,  96 }, pnm_Sta_X_RestoreScrollbar,	"Scrollbar Settings"				},
+				CheckBox		{{   0, 100, 140, 116 }, pnm_Sta_X_RestoreCwd,			"Working Directory"					},
+				PopupMenu		{{   0, 120, 140, 140 }, pnm_Sta_P_UseStateFormat,		"Use state format:",	rid_Popu_PrfState, 90	},
 			TabSheetEnd			{																							},
 
 			TabSheet			{ "Worksheet", "Options having effect on worksheets"										},
-				CheckBox		{{   0,   0, 284,  16 }, "wosh",		"Always keep a worksheet open"						},
-				CheckBox		{{   0,  20, 284,  36 }, "rdse",		"Redirect stderr to Error Window"					},
+				CheckBox		{{   0,   0, 284,  16 }, pnm_Wor_X_KeepWorksheetOpen,	"Always keep a worksheet open"		},
+				CheckBox		{{   0,  20, 284,  36 }, pnm_Wor_X_RedirectStderr,		"Redirect stderr to Error Window"	},
 				StdErrBox		{{   0,  40, 284, 166 }, "StEb"																},
 			TabSheetEnd			{																							},
-			
+
 			TabSheet			{ "Wrapping", "Options for softwrapping" },
-				CheckBox		{{   0,   0, 100,  16 }, "sowr",		"Soft Wrap Files"									},
-				
+				CheckBox		{{   0,   0, 100,  16 }, pnm_Wrp_X_SoftWrapFiles,		"Soft Wrap Files"					},
+
 				Caption			{{   0,  40, 238,  56 }, "w",			"And when wrapping use these settings:"				},
-				
-				RadioButton		{{   0,  60, 100,  76 }, "wrwi",		"Window Width"										},
-				RadioButton		{{   0,  80, 100,  96 }, "wrpa",		"Paper Width"										},
-				RadioButton		{{   0, 100,  98, 116 }, "wrfi",		"Fixed Column:"										},
-				
-				Edit			{{ 100, 100, 140, 116 }, "wrft",		"",					"", "0123456789", 3, 0			},
-				
+
+				RadioButton		{{   0,  60, 100,  76 }, pnm_Wrp_R_WindowWidth,			"Window Width"						},
+				RadioButton		{{   0,  80, 100,  96 }, pnm_Wrp_R_PaperWidth,			"Paper Width"						},
+				RadioButton		{{   0, 100,  98, 116 }, pnm_Wrp_R_FixedColumn,			"Fixed Column:"						},
+
+				Edit			{{ 100, 100, 140, 116 }, pnm_Wrp_T_FixedColumn,			"",		"", "0123456789", 3, 0		},
+
 			TabSheetEnd			{																							},
-			
+
 			Button				{{ 335, 235, 390, 255 }, "ok  ",		"Apply",			'ok  '							},
 			Button				{{ 265, 235, 320, 255 }, "cncl",		"Revert",			'cncl'							},
 		TabbedBookEnd			{}

Modified: trunk/Sources/CDiffWindow.cpp
===================================================================
--- trunk/Sources/CDiffWindow.cpp	2006-11-22 20:34:07 UTC (rev 466)
+++ trunk/Sources/CDiffWindow.cpp	2006-11-24 23:39:37 UTC (rev 467)
@@ -367,16 +367,16 @@
 		do
 		{
 			BAutolock lock(docA);
-			docA->TextView()->HashLines(va, gPrefs->GetPrefInt(prf_I_DiffCase, false),
-				gPrefs->GetPrefInt(prf_I_DiffWhite, false));
+			docA->TextView()->HashLines(va, gPrefs->GetPrefInt(prf_I_DiffCaseInsensitive, false),
+				gPrefs->GetPrefInt(prf_I_DiffIgnoreWhiteSpace, false));
 		}
 		while (false);
 		
 		do
 		{
 			BAutolock lock(docB);
-			docB->TextView()->HashLines(vb, gPrefs->GetPrefInt(prf_I_DiffCase, false),
-				gPrefs->GetPrefInt(prf_I_DiffWhite, false));
+			docB->TextView()->HashLines(vb, gPrefs->GetPrefInt(prf_I_DiffCaseInsensitive, false),
+				gPrefs->GetPrefInt(prf_I_DiffIgnoreWhiteSpace, false));
 		}
 		while (false);
 		
@@ -580,22 +580,22 @@
 	if ((doc = dynamic_cast<PDoc*>(CDoc::FindDoc(f1))) != NULL)
 	{
 		BAutolock lock(doc);
-		doc->TextView()->HashLines(v1, gPrefs->GetPrefInt(prf_I_DiffCase, false),
-			gPrefs->GetPrefInt(prf_I_DiffWhite, false));
+		doc->TextView()->HashLines(v1, gPrefs->GetPrefInt(prf_I_DiffCaseInsensitive, false),
+			gPrefs->GetPrefInt(prf_I_DiffIgnoreWhiteSpace, false));
 	}
 	else
-		HashFile(f1, v1, gPrefs->GetPrefInt(prf_I_DiffCase, false),
-				gPrefs->GetPrefInt(prf_I_DiffWhite, false));
+		HashFile(f1, v1, gPrefs->GetPrefInt(prf_I_DiffCaseInsensitive, false),
+				gPrefs->GetPrefInt(prf_I_DiffIgnoreWhiteSpace, false));
 	
 	if ((doc = dynamic_cast<PDoc*>(CDoc::FindDoc(f2))) != NULL)
 	{
 		BAutolock lock(doc);
-		doc->TextView()->HashLines(v2, gPrefs->GetPrefInt(prf_I_DiffCase, false),
-			gPrefs->GetPrefInt(prf_I_DiffWhite, false));
+		doc->TextView()->HashLines(v2, gPrefs->GetPrefInt(prf_I_DiffCaseInsensitive, false),
+			gPrefs->GetPrefInt(prf_I_DiffIgnoreWhiteSpace, false));
 	}
 	else
-		HashFile(f2, v2, gPrefs->GetPrefInt(prf_I_DiffCase, false),
-				gPrefs->GetPrefInt(prf_I_DiffWhite, false));
+		HashFile(f2, v2, gPrefs->GetPrefInt(prf_I_DiffCaseInsensitive, false),
+				gPrefs->GetPrefInt(prf_I_DiffIgnoreWhiteSpace, false));
 
 	if (v1.back() != v2.back())
 	{

Modified: trunk/Sources/CDoc.cpp
===================================================================
--- trunk/Sources/CDoc.cpp	2006-11-22 20:34:07 UTC (rev 466)
+++ trunk/Sources/CDoc.cpp	2006-11-24 23:39:37 UTC (rev 467)
@@ -1,8 +1,8 @@
 /*	$Id$
-	
+
 	Copyright 1996, 1997, 1998, 2002
 	        Hekkelman Programmatuur B.V.  All rights reserved.
-	
+
 	Redistribution and use in source and binary forms, with or without
 	modification, are permitted provided that the following conditions are met:
 	1. Redistributions of source code must retain the above copyright notice,
@@ -12,13 +12,13 @@
 	   and/or other materials provided with the distribution.
 	3. All advertising materials mentioning features or use of this software
 	   must display the following acknowledgement:
-	   
+
 	    This product includes software developed by Hekkelman Programmatuur B.V.
-	
+
 	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
 	   promote products derived from this software without specific prior
 	   written permission.
-	
+
 	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
@@ -28,7 +28,7 @@
 	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 	Created: 09/10/97 13:20:21
 */
@@ -73,8 +73,8 @@
 		struct stat st;
 		FailOSErr(node.GetStat(&st));
 
-		fReadOnly = !((gUid == st.st_uid && (S_IWUSR & st.st_mode)) 
-						||	(gGid == st.st_gid && (S_IWGRP & st.st_mode)) 
+		fReadOnly = !((gUid == st.st_uid && (S_IWUSR & st.st_mode))
+						||	(gGid == st.st_gid && (S_IWGRP & st.st_mode))
 						||	(S_IWOTH & st.st_mode));
 
 		char s[NAME_MAX];
@@ -98,7 +98,7 @@
 CDoc::~CDoc()
 {
 	StopWatchingFile();
-	
+
 	sfDocList.remove(this);
 	be_app->PostMessage(msg_DocClosed);
 }
@@ -169,13 +169,13 @@
 	BWindow *w = fSavePanel->Window();
 	FailNil(w);
 	w->Lock();
-	
+
 	char s[256];
 	sprintf(s, "Save %s as:", Name());
-	
+
 	w->SetTitle(s);
 	fSavePanel->SetSaveText(Name());
-	
+
 	if (EntryRef())
 	{
 		BEntry e(EntryRef()), p;
@@ -217,9 +217,9 @@
 		if (e.Exists())
 		{
 			entry_ref xr;
-			
+
 			e.GetRef(&xr);
-			
+
 			if (EntryRef() && xr == *EntryRef())	// its me, help!!!
 			{
 				BFile file;
@@ -229,23 +229,23 @@
 			else
 				e.Remove();
 		}
-		
+
 		fReadOnly = false;
-		
+
 		entry_ref eref;
 		FailOSErr(e.GetRef(&eref));
 		fDocIO->SetEntryRef(&eref);
-		
+
 		Save();
 		NameChanged();
-		
+
 		if (EntryRef())
 		{
 			BPath p;
 			FailOSErr(e.GetPath(&p));
 			AddRecent(p.Path());
 		}
-		
+
 		if (fSavePanel)
 		{
 			delete fSavePanel;
@@ -262,18 +262,18 @@
 {
 	if (!fSavePanel)
 		fSavePanel = new BFilePanel(B_SAVE_PANEL);
-	
+
 	FailNil(fSavePanel);
 
 	BWindow *w = fSavePanel->Window();
 	w->Lock();
-	
+
 	char s[256];
 	sprintf(s, "Save a copy of %s as:", Name());
-	
+
 	w->SetTitle(s);
 	fSavePanel->SetSaveText(Name());
-	
+
 	if (EntryRef())
 	{
 		BEntry e(EntryRef()), p;
@@ -306,7 +306,7 @@
 		FailOSErr(e.InitCheck());
 		if (e.Exists())
 			e.Remove();
-		
+
 		entry_ref eref;
 		FailOSErr(e.GetRef(&eref));
 		CLocalDocIO writer(this, &eref, NULL);
@@ -336,7 +336,7 @@
 {
 	char title[256];
 	sprintf(title, "Revert to the last saved version of %s?", Name());
-	
+
 	MInfoAlert a(title, "Cancel", "OK");
 	if (a == 2)
 	{
@@ -360,10 +360,10 @@
 			FailOSErr(e.SetTo(EntryRef(), true));
 			BPath p;
 			FailOSErr(e.GetPath(&p));
-			
+
 			struct stat st;
 			FailOSErr(stat(p.Path(), &st));
-			
+
 			if (readOnly)
 				st.st_mode &= ~(S_IWUSR | S_IWGRP | S_IWOTH);
 			else
@@ -373,7 +373,7 @@
 				umask(t);				// and reset it.
 				st.st_mode |= (S_IWUSR | S_IWGRP | S_IWOTH) & ~t;
 			}
-			
+
 			FailOSErr(chmod(p.Path(), st.st_mode));
 
 			fReadOnly = readOnly;
@@ -388,7 +388,7 @@
 void CDoc::SetMimeType(const char *type, bool updateOnDisk)
 {
 	fMimeType = type;
-	
+
 	if (updateOnDisk && EntryRef())
 	{
 		BNode node;
@@ -462,11 +462,11 @@
 void CDoc::AddRecent(const char *path)
 {
 	char *s;
-	if ((s = strstr(path, "/config/settings/pe/Worksheet")) != NULL && 
+	if ((s = strstr(path, "/config/settings/pe/Worksheet")) != NULL &&
 		strlen(s) == 29 /*strlen("/config/settings/pe/Worksheet")*/)
 		return; // don't add the worksheet
-	
-	if (gPrefs->GetPrefInt(prf_I_SkipTmp, 1))
+
+	if (gPrefs->GetPrefInt(prf_I_SkipTmpFiles, 1))
 	{
 		BPath tp;
 		try
@@ -479,7 +479,7 @@
 	}
 
 	vector<char*>::iterator di;
-	
+
 	for (di = sfTenLastDocs.begin(); di != sfTenLastDocs.end(); di++)
 	{
 		char *p = *di;
@@ -500,7 +500,7 @@
 		sfTenLastDocs.erase(sfTenLastDocs.end() - 1);
 		free(p);
 	}
-	
+
 	sfTenLastDocs.insert(sfTenLastDocs.begin(), strdup(path));
 }
 
@@ -511,9 +511,9 @@
 	else
 	{
 		vector<char*>::iterator li;
-		
+
 		li = sfTenLastDocs.begin() + indx++;
-		
+
 		strcpy(path, *(li));
 		return true;
 	}
@@ -524,7 +524,7 @@
 CDoc* CDoc::FindDoc(const entry_ref& doc)
 {
 	doclist::iterator di;
-	
+
 	for (di = sfDocList.begin(); di != sfDocList.end(); di++)
 	{
 		if ((*di)->EntryRef() && *(*di)->EntryRef() == doc)
@@ -536,9 +536,9 @@
 void CDoc::PostToAll(unsigned long msg, bool async)
 {
 	doclist::iterator di;
-	
+
 	doclist lst = sfDocList;
-	
+
 	BLooper *me = BLooper::LooperForThread(find_thread(NULL));
 
 	for (di = lst.begin(); di != lst.end(); di++)
@@ -547,7 +547,7 @@
 		if (w)
 		{
 			BMessage reply;
-			
+
 			if (async || w == dynamic_cast<BWindow*>(me))
 				w->PostMessage(msg);
 			else
@@ -562,9 +562,9 @@
 void CDoc::HandleFolderNodeMonitorMsg(BMessage* msg)
 {
 	doclist::iterator di;
-	
+
 	doclist lst = sfDocList;
-	
+
 	for (di = lst.begin(); di != lst.end(); di++)
 	{
 		if ((*di)->fDocIO && (*di)->fDocIO->MatchesNodeMonitorMsg(msg))

Modified: trunk/Sources/CDocIO.cpp
===================================================================
--- trunk/Sources/CDocIO.cpp	2006-11-22 20:34:07 UTC (rev 466)
+++ trunk/Sources/CDocIO.cpp	2006-11-24 23:39:37 UTC (rev 467)
@@ -1,6 +1,6 @@
 /*
 	Copyright 2005 Oliver Tappe
-	
+
 	Distributed under the MIT License
 */
 
@@ -53,7 +53,7 @@
 			{
 				pos = posVect[i];
 				len = pos - lastPos;
-				if (len > 0) 
+				if (len > 0)
 				{
 					memcpy(newAdr, oldAdr, len);
 					oldAdr += len;
@@ -87,7 +87,7 @@
 
 static int32 DetermineEncoding(const BString& str)
 {
-	/* HACK: Get the first line and see if there's something like 
+	/* HACK: Get the first line and see if there's something like
 	  "[PE:ENC=<encoding>]" in there. <encoding> is supported encodings
 	  with spaces replaced by "-", eg.: "ISO-8859-15" */
 	int32			pos;
@@ -132,22 +132,22 @@
 	try
 	{
 		char name[NAME_MAX];
-		
+
 		while (from.GetNextAttrName(name) == B_OK)
 		{
 			attr_info ai;
-			
+
 			if (strcmp(name, "_trk/_clipping_file_") == 0)
 				continue;
-			
+
 			FailOSErr(from.GetAttrInfo(name, &ai));
-			
+
 			char *buf = new char [ai.size];
 			from.ReadAttr(name, ai.type, 0, buf, ai.size);
 			to.WriteAttr(name, ai.type, 0, buf, ai.size);
 			delete [] buf;
-		}	
-		
+		}
+
 		mode_t perm;
 		from.GetPermissions(&perm);
 		to.SetPermissions(perm);
@@ -301,7 +301,7 @@
 		if (fConv.HadToSubstitute() && fConv.ErrorPos() >= 0)
 		{
 			fDoc->HighlightErrorPos(fConv.ErrorPos());
-			BString err = 
+			BString err =
 				BString("An error occurred when converting the document ")
 					<< "to the requested destination encoding. The first "
 					<< "problematic character is highlighted.\n"
@@ -313,7 +313,7 @@
 		}
 	}
 
-	if (gPrefs->GetPrefInt(prf_I_NlAtEof, 1) && docText.Length() > 0 
+	if (gPrefs->GetPrefInt(prf_I_EndWithNewline, 1) && docText.Length() > 0
 		&& docText[docText.Length() - 1] != '\n')
 	{
 		docText << "\n";
@@ -374,7 +374,7 @@
 
 	off_t size;
 	FailOSErr(file.GetSize(&size));
-	
+
 	BString docText;
 
 	if (size > 0)
@@ -394,7 +394,7 @@
 		if (settingsMsg.FindInt32("line breaks", &lineEndType) != B_OK)
 			lineEndType = DetermineLineEndType(docText);
 		fDoc->SetLineEndType(lineEndType);
-	
+
 		// set the encoding:
 		int32 encoding;
 		if (settingsMsg.FindInt32("encoding", &encoding) != B_OK)
@@ -405,15 +405,15 @@
 			encoding = B_UNICODE_UTF8;
 		fDoc->SetEncoding(encoding);
 	}
-	
+
 	bool result = DoPreEditTextConversions(docText);
 
 	fDoc->SetText(docText);
 	fDoc->SetDirty(false);
-	
+
 	if (readAttributes)
 		fDoc->ApplySettings(settingsMsg);
-		
+
 	if (!result && fConv.ErrorPos() >= 0)
 		fDoc->HighlightErrorPos(fConv.ErrorPos());
 
@@ -440,7 +440,7 @@
 
 		FailOSErr(e.GetName(name));
 
-		if (existed) 
+		if (existed)
 		{	// Create a backup file
 			if (!CopyFile(e, backup))
 				return false;
@@ -454,16 +454,16 @@
 		CheckedWrite(file, docText.String(), docText.Length());
 		fDoc->WriteAttr(file, settingsMsg);
 		file.Sync();
-		
+
 		// Remove backup file
-		if (existed && !gPrefs->GetPrefInt(prf_I_Backup))
+		if (existed && !gPrefs->GetPrefInt(prf_I_MakeBackup))
 			FailOSErr(backup.Remove());
 
 		// Update MIME type info
 		e.SetTo(&dir, name);
 		BPath path(&e);
 		if (!strlen(fDoc->MimeType()) && path.InitCheck() == B_OK
-			&& update_mime_info(path.Path(), false, true, false) == B_OK) 
+			&& update_mime_info(path.Path(), false, true, false) == B_OK)
 		{
 			// takeover MIME type from file
 			char s[NAME_MAX];
@@ -506,7 +506,7 @@
 		&& node.SetTo(&entry) == B_OK
 		&& node.GetNodeRef(&directoryNodeRef) == B_OK)
 	{
-		if (sfDocListLock.Lock()) 
+		if (sfDocListLock.Lock())
 		{
 			if (sfWatchedFolderMap[directoryNodeRef]++ == 0)
 				watch_node(&directoryNodeRef, B_WATCH_DIRECTORY, be_app);
@@ -524,7 +524,7 @@
 		&& node.SetTo(&entry) == B_OK
 		&& node.GetNodeRef(&directoryNodeRef) == B_OK)
 	{
-		if (sfDocListLock.Lock()) 
+		if (sfDocListLock.Lock())
 		{
 			if (sfWatchedFolderMap[directoryNodeRef]-- == 1)
 				watch_node(&directoryNodeRef, B_STOP_WATCHING, be_app);
@@ -619,7 +619,7 @@
 bool CLocalDocIO::MatchesNodeMonitorMsg(BMessage* msg)
 {
 	node_ref nref;
-	if (fEntryRef == NULL 
+	if (fEntryRef == NULL
 	|| msg->FindInt64("node", &nref.node) != B_OK
 	|| msg->FindInt32("device", &nref.device) != B_OK)
 		return false;
@@ -632,7 +632,7 @@
 	bool result = true;
 	try
 	{
-		if (gPrefs->GetPrefInt(prf_I_Verify, 1))
+		if (gPrefs->GetPrefInt(prf_I_VerifyOpenFiles, 1))
 		{
 			BFile file;
 			FailOSErr(file.SetTo(fEntryRef, B_READ_ONLY));
@@ -645,7 +645,7 @@
 				sprintf(s, "File %s was modified by another application, reload it?", fEntryRef->name);
 				MInfoAlert a(s, "Reload", "Cancel");
 
-				if (a.Go() == 1) 
+				if (a.Go() == 1)
 				{
 					result = false;
 					// restart watching, the file may have changed:
@@ -659,7 +659,7 @@
 				// in the mean time, only the first one is
 				// considered
 				// the max() takes care of mod-times in the future
-				// (cvs may cause that kind of thing). 
+				// (cvs may cause that kind of thing).
 		}
 	}
 	catch (HErr& e)
@@ -722,7 +722,7 @@
 		// determine and set the type of linebreaks:
 		int32 lineEndType = DetermineLineEndType(docText);
 		fDoc->SetLineEndType(lineEndType);
-	
+
 		// set the encoding:
 		int32 encoding = DetermineEncoding(docText);
 		// [zooey]: For a short period of time (one of my bugs),
@@ -731,17 +731,17 @@
 			encoding = B_UNICODE_UTF8;
 		fDoc->SetEncoding(encoding);
 	}
-	
+
 	bool result = DoPreEditTextConversions(docText);
 
 	fDoc->SetText(docText);
-	
+
 	if (!result && fConv.ErrorPos() >= 0)
 		fDoc->HighlightErrorPos(fConv.ErrorPos());
 
 	return result;
 }
-	
+
 bool CFtpDocIO::WriteDoc()
 {
 	try
@@ -752,8 +752,8 @@
 		fDoc->GetText(docText);
 		if (!DoPostEditTextConversions(docText))
 			return false;

[... truncated: 6862 lines follow ...]


From hoern at mail.berlios.de  Sun Nov 26 17:06:19 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Sun, 26 Nov 2006 17:06:19 +0100
Subject: [pe-commits] r468 - trunk/Sources
Message-ID: <200611261606.kAQG6Jba004357@sheep.berlios.de>

Author: hoern
Date: 2006-11-26 17:06:18 +0100 (Sun, 26 Nov 2006)
New Revision: 468
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=468&view=rev

Modified:
   trunk/Sources/CLanguageAddOn.cpp
   trunk/Sources/CLanguageAddOn.h
   trunk/Sources/CPrefsDialog.cpp
   trunk/Sources/PApp.cpp
   trunk/Sources/PApp.h
   trunk/Sources/PText.cpp
Log:
* The language addon can now determine if the popup will be sorted
  This way the addon can provide two different kind of lists, e.g. 
  one nicely formatted and one with prefixes for the sorted version.


Modified: trunk/Sources/CLanguageAddOn.cpp
===================================================================
--- trunk/Sources/CLanguageAddOn.cpp	2006-11-24 23:39:37 UTC (rev 467)
+++ trunk/Sources/CLanguageAddOn.cpp	2006-11-26 16:06:18 UTC (rev 468)
@@ -159,6 +159,11 @@
 	return gPopupFuncs;
 } /* CLanguageProxy::Types */
 
+bool CLanguageProxy::Sorted() const
+{
+	return gPopupSorted;
+} /* CLanguageProxy::Sorted */
+
 void CLanguageProxy::CharInfo(const char *txt, int& unicode, int& len) const
 {
 	len = mcharlen(txt);

Modified: trunk/Sources/CLanguageAddOn.h
===================================================================
--- trunk/Sources/CLanguageAddOn.h	2006-11-24 23:39:37 UTC (rev 467)
+++ trunk/Sources/CLanguageAddOn.h	2006-11-26 16:06:18 UTC (rev 468)
@@ -117,6 +117,7 @@
 virtual	bool Includes() const;
 virtual	bool Prototypes() const;
 virtual	bool Types() const;
+virtual	bool Sorted() const;
 
 /*
 	These methods are used for wrapping, they classify the characters in the text

Modified: trunk/Sources/CPrefsDialog.cpp
===================================================================
--- trunk/Sources/CPrefsDialog.cpp	2006-11-24 23:39:37 UTC (rev 467)
+++ trunk/Sources/CPrefsDialog.cpp	2006-11-26 16:06:18 UTC (rev 468)
@@ -335,7 +335,7 @@
 	CntrlGetChkbx(pnm_Lng_X_ShowIncludes,			prf_I_ShowIncludes,				gPopupIncludes);
 	CntrlGetChkbx(pnm_Lng_X_ShowPrototypes,			prf_I_ShowPrototypes,			gPopupProtos);
 	CntrlGetChkbx(pnm_Lng_X_ShowTypes,				prf_I_ShowTypes,				gPopupFuncs);
-	CntrlGetChkbx(pnm_Lng_X_SortPopup,				prf_I_SortPopup,				dummy);
+	CntrlGetChkbx(pnm_Lng_X_SortPopup,				prf_I_SortPopup,				gPopupSorted);
 	CntrlGetChkbx(pnm_Wor_X_RedirectStderr,			prf_I_RedirectStdErr,			gRedirectStdErr);
 	CntrlGetChkbx(pnm_Wor_X_KeepWorksheetOpen,		prf_I_Worksheet,				gUseWorksheet);
 	CntrlGetChkbx(pnm_Sta_X_RestorePosition,		prf_I_RestorePosition,			gRestorePosition);

Modified: trunk/Sources/PApp.cpp
===================================================================
--- trunk/Sources/PApp.cpp	2006-11-24 23:39:37 UTC (rev 467)
+++ trunk/Sources/PApp.cpp	2006-11-26 16:06:18 UTC (rev 468)
@@ -67,7 +67,7 @@
 BFile gAppFile;
 PApp *gApp;
 bool gAutoIndent, gSyntaxColoring, gBalance, gBlockCursor, gFlashCursor, gSmartBrace;
-bool gPopupIncludes, gPopupProtos, gPopupFuncs;
+bool gPopupIncludes, gPopupProtos, gPopupFuncs, gPopupSorted;
 int gSpacesPerTab;
 bool gUseWorksheet;
 bool gRestorePosition, gRestoreFont, gRestoreSelection, gRestoreScrollbar, gRestoreCWD;
@@ -235,6 +235,7 @@
 		gPopupIncludes		= gPrefs->GetPrefInt(prf_I_ShowIncludes,		1);
 		gPopupProtos		= gPrefs->GetPrefInt(prf_I_ShowPrototypes,		1);
 		gPopupFuncs			= gPrefs->GetPrefInt(prf_I_ShowTypes,			1);
+		gPopupSorted		= gPrefs->GetPrefInt(prf_I_SortPopup,			0);
 		gRedirectStdErr		= gPrefs->GetPrefInt(prf_I_RedirectStdErr,		1);
 		gUseWorksheet		= gPrefs->GetPrefInt(prf_I_Worksheet,			1);
 		gRestorePosition	= gPrefs->GetPrefInt(prf_I_RestorePosition,		1);

Modified: trunk/Sources/PApp.h
===================================================================
--- trunk/Sources/PApp.h	2006-11-24 23:39:37 UTC (rev 467)
+++ trunk/Sources/PApp.h	2006-11-26 16:06:18 UTC (rev 468)
@@ -108,7 +108,7 @@
 
 extern bool gAutoIndent, gSyntaxColoring, gBalance, gBlockCursor, gFlashCursor, gSmartBrace;
 extern int gSpacesPerTab;
-extern bool gPopupIncludes, gPopupProtos, gPopupFuncs;
+extern bool gPopupIncludes, gPopupProtos, gPopupFuncs, gPopupSorted;
 extern bool gRedirectStdErr, gUseWorksheet;
 extern bool gRestorePosition, gRestoreFont, gRestoreSelection, gRestoreScrollbar, gRestoreCWD;
 extern int gSavedState, gRecentBufferSize;

Modified: trunk/Sources/PText.cpp
===================================================================
--- trunk/Sources/PText.cpp	2006-11-24 23:39:37 UTC (rev 467)
+++ trunk/Sources/PText.cpp	2006-11-26 16:06:18 UTC (rev 468)
@@ -2426,7 +2426,10 @@
 	BList& includes = handler.includes;
 	BList& functions = handler.functions;
 
+	// Little hack to make CLanguageProxy::Sorted() acknowledge the mode switch
+	gPopupSorted = sorted;
 	ScanForFunctions(handler);
+	gPopupSorted = gPrefs->GetPrefInt(prf_I_SortPopup);
 
 	if (sorted)
 	{



From hoern at mail.berlios.de  Sun Nov 26 17:11:38 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Sun, 26 Nov 2006 17:11:38 +0100
Subject: [pe-commits] r469 - trunk/Languages/Sources
Message-ID: <200611261611.kAQGBcUN004980@sheep.berlios.de>

Author: hoern
Date: 2006-11-26 17:11:38 +0100 (Sun, 26 Nov 2006)
New Revision: 469
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=469&view=rev

Modified:
   trunk/Languages/Sources/HtmlJsPhp_Popup.cpp
Log:
* Added detection of PHP classes
* Added detection of PHP class member functions
* Added detection of PHP function parameters
* Added nicer formatted function popup in non-sort mode
* Lot's of other small changes


Modified: trunk/Languages/Sources/HtmlJsPhp_Popup.cpp
===================================================================
--- trunk/Languages/Sources/HtmlJsPhp_Popup.cpp	2006-11-26 16:06:18 UTC (rev 468)
+++ trunk/Languages/Sources/HtmlJsPhp_Popup.cpp	2006-11-26 16:11:38 UTC (rev 469)
@@ -35,21 +35,75 @@
 
 /* TODO:
 	- AddInclude() for include, include_once, require and require_once
-	- Support for x='attribute'
 	- PHP class support
 */
+#include <string>
 #include "CLanguageAddOn.h"
-#include <string>
 
 const long kMaxNameSize = 256;
 
+const char* const SORT_PREFIX_PHP	= "PHP:  ";
+const char* const SORT_PREFIX_JS	= "JS:  ";
+const char* const SORT_PREFIX_NAME	= "A:  ";
+const char* const SORT_PREFIX_HREF	= "HREF:  ";
+const char* const SORT_PREFIX_HEAD1	= "H";
+const char* const SORT_PREFIX_HEAD2	= ":  ";
+
+struct PopupMenu
+{
+	BString label;
+	BString text;
+	const char * position;
+	bool italic;
+	
+//	PopupMenu (const char *lab, const char *txt, const char * pos)
+//		: label(lab), text(txt), position(pos) {}
+	
+	PopupMenu (BString &lab, BString &txt, const char * pos, bool ita=false)
+		: label(lab), text(txt), position(pos), italic(ita) {}
+};
+typedef vector<PopupMenu> PopupList;
+
+void add_to_popup(const char* name, PopupList &pul, CLanguageProxy& proxy);
+bool isident(char ch);
 const char *skip(const char *txt, int ch);
 const char *skip_nc(const char *txt, int ch);
-const char *Anchor(const char *txt, CLanguageProxy& ao);
-const char *Heading(const char *txt, CLanguageProxy& ao);
-const char *JavaScript(const char *txt, CLanguageProxy& ao);
-const char *PhpScript(const char *txt, CLanguageProxy& ao);
+void skip_string(const char *&txt);
+const char *skip_block(const char *txt, char open, char close);
+const char *skip_whitespace(const char *txt);
+void skip_attributes(const char *&ptr);
+const char *anchor(const char *txt, CLanguageProxy& proxy, PopupList &pul, bool sorted);
+const char *heading(const char *txt, PopupList &pul, bool sorted);
+bool get_attribute(const char *&ptr, const char *&namBeg, int& namLen, const char *&valBeg, int& valLen);
+void php_function(const char *&txt, PopupList &pul, BString &className, bool sorted);
+void php_class(const char *&txt, PopupList &pul, BString &className, bool sorted);
+const char *JavaScript(const char *txt, PopupList &lstJsFunctions, PopupList &lstJsClasses, bool sorted);
+const char *PhpScript(const char *txt, PopupList &lstPhpFunctions, PopupList &lstPhpClasses, bool sorted);
 
+
+#pragma mark Support Functions
+
+
+void add_to_popup(const char* name, PopupList &pul, CLanguageProxy& proxy)
+{
+	if (pul.size() > 0)
+	{
+		proxy.AddSeparator(name);
+		for (uint i=0; i<pul.size(); i++)
+		{
+			proxy.AddFunction(pul[i].label.String(), pul[i].text.String(),
+				pul[i].position - proxy.Text(), pul[i].italic);
+		}
+	}
+}
+
+
+bool isident(char ch)
+{
+	return isalnum(ch) || ch == '_';
+} /* isident */
+
+
 const char *skip(const char *txt, int ch)
 {
 	while (*txt)
@@ -65,6 +119,7 @@
 	return txt;
 } /* skip */
 
+
 const char *skip_nc(const char *txt, int ch)
 {
 	while (*txt)
@@ -83,58 +138,70 @@
 	return txt;
 } /* skip_nc */
 
-const char *block(const char *txt, int open)
+
+void skip_string(const char *&txt)
 {
-	int close = 0;
-	switch (open)
-	{
-		case '(':
-			close = ')';
-			break;
-		case '{':
-			close = '}';
-			break;
-		default:
-			assert(false);
-	}
-	
+	char quote = *txt;
+
+	while (*++txt && *txt != quote)
+		if (*txt == '\\')
+			txt++;
+} /* skip_string */
+
+
+const char *skip_block(const char *txt, char open, char close)
+{
 	while (*txt)
 	{
 		if (*txt == open)
-			txt = block(txt + 1, open);
+			txt = skip_block(txt + 1, open, close);
+
 		else if (*txt == close)
 			return txt + 1;
-		else if (*txt == '"')
+
+		else if (*txt == '"' || *txt == '\'')
 		{
-			while (*++txt)
-			{
-				if (*txt == '\\')
-					++txt;
-				else if (*txt == '"')
-					break;
-			}
+			skip_string(txt);
 			++txt;
 		}
 		else
 			++txt;
 	}
-	
 	return txt;
-}
+} /* block */
 
-inline const char *skip_white(const char *txt)
+
+inline const char *skip_whitespace(const char *txt)
 {
 	while (isspace(*txt))
 		txt++;
 	return txt;
 } /* skip_white */
 
+
+void skip_attributes(const char *&ptr)
+{
+	const char *nam = 0, *val = 0;
+	int namLen = 0, valLen = 0;
+
+	// Skip tagname
+	if (*(++ptr) != 0 && *ptr == '/')
+		ptr++;
+	while (*ptr != 0 && isalnum(*ptr))
+		ptr++;
+	// Skip attributes
+	while (get_attribute(ptr, nam, namLen, val, valLen)) ;
+	// skip ">"
+	ptr++;
+}
+
+
 bool get_attribute(const char *&ptr, const char *&namBeg, int& namLen, const char *&valBeg, int& valLen)
 {
 	const char *namEnd=0, *valEnd=0;
 
 	namBeg = valBeg = 0;
-	ptr = skip_white(ptr);
+	ptr = skip_whitespace(ptr);
 	if (*ptr != 0 && *ptr != '>')
 	{
 		// Search for attribue name
@@ -142,10 +209,10 @@
 		// Gracefully also accept non alphanumeric characters
 		while (*namEnd != 0 && *namEnd != '=' && !isspace(*namEnd))
 			namEnd++;
-		ptr = skip_white(namEnd);
+		ptr = skip_whitespace(namEnd);
 		// Search for attribue value
 		if (*ptr == '=') {
-			ptr = skip_white(ptr+1);
+			ptr = skip_whitespace(ptr+1);
 			if (*ptr == '"' || *ptr == '\'')
 			{
 				// Value is enclosed
@@ -171,26 +238,72 @@
 	} else {
 		return false;
 	}
-}
+} /* get_attribute */
 
-void skip_attributes(const char *&ptr)
+
+void php_function(const char *&txt, PopupList &pul, BString &className, bool sorted)
 {
-	const char *nam, *val;
-	int namLen, valLen, len;
+	BString label, function, params;
+	txt = skip_whitespace(txt+8);
 
-	// Skip tagname
-	if (*(++ptr) != 0 && *ptr == '/')
-		ptr++;
-	while (*ptr != 0 && isalnum(*ptr))
-		ptr++;
-	// Skip attributes
-	while (get_attribute(ptr, nam, namLen, val, valLen)) ;
-	// skip ">"
-	ptr++;
-}
+	const char *beg = txt;
+	while (isident(*++txt)) ;
+	function.SetTo(beg, txt-beg);
 
-const char *Anchor(const char *txt, CLanguageProxy& ao)
+	txt = skip_whitespace(txt);
+	if (*txt == '(') {
+		const char* ptr = txt;
+		txt = skip_block(txt+1, '(', ')');
+		params.SetTo(ptr+1, txt-ptr-2);
+		params.Prepend("  (");
+		params.Append(")");
+	}
+	if (sorted)
+	{
+		label << SORT_PREFIX_PHP;
+		if (className != "")
+		{
+			label << className << "::";
+		}
+	}
+	else
+	{
+		if (className != "")
+		{
+			label << "? ";
+		}
+	}
+	label << function << params;
+	pul.insert(pul.end(), PopupMenu(label, function, beg));
+} /* php_function */
+
+
+void php_class(const char *&txt, PopupList &pul, BString &className, bool sorted)
 {
+	BString label;
+
+	txt = skip_whitespace(txt+5);
+	const char *beg = txt;
+	while (isident(*++txt)) ;
+	className.SetTo(beg, txt-beg);
+
+	while (*++txt && *txt != '{') ;
+
+//	txt = skip_whitespace(txt);
+//	if (*txt == '(') {
+//		const char* beg = txt;
+//		txt = skip_block(txt+1, '(', ')');
+//		params.SetTo(beg+1, txt-beg-2);
+//		params.Prepend("  (");
+//		params.Append(")");
+//	}
+	if (!sorted)
+		pul.insert(pul.end(), PopupMenu(className, className, beg, true));
+} /* php_class */
+
+
+const char *anchor(const char *txt, CLanguageProxy& proxy, PopupList &pul, bool sorted)
+{
 	const char *nam, *val;
 	int namLen, valLen, len;
 
@@ -202,16 +315,17 @@
 			{
 				if (*val != '#')
 				{
-					BString label("HREF:  "), include(val, valLen);
+					BString label(SORT_PREFIX_HREF), include(val, valLen);
 					label << include;
-					ao.AddInclude(label.String(), include.String());
+					proxy.AddInclude(label.String(), include.String());
 				}
 			}
 			else if (strncasecmp(nam, "NAME", 4) == 0)
 			{
-				BString label("A:  "), function(val, valLen);
+				BString function(val, valLen);
+				BString label(sorted ? SORT_PREFIX_NAME : "");
 				label << function;
-				ao.AddFunction(label.String(), function.String(), txt - ao.Text());
+				pul.insert(pul.end(), PopupMenu(label, function, txt));
 			}
 		}
 
@@ -219,14 +333,26 @@
 	return txt;
 } /* Anchor */
 
-const char *Heading(const char *txt, CLanguageProxy& ao)
+
+const char *heading(const char *txt, PopupList &pul, bool sorted)
 {
 	char endTag[6];
 	bool wasSpace = false;
 	const char *ptr = txt;
-	BString label("H"), heading;
+	BString label, heading;
+	int level = (*txt - '0');
 
-	label << (*txt - '0') << ":  ";
+	if (sorted)
+	{
+		label << SORT_PREFIX_HEAD1 << level << SORT_PREFIX_HEAD2;
+	}
+	else
+	{
+		for (int i=1; i<level; i++)
+			label << "       ";
+		label << "(" << level << ")  ";
+	}
+	
 	skip_attributes(ptr);
 	sprintf(endTag, "</h%c>", *txt);
 	txt = ptr;
@@ -258,12 +384,17 @@
 		label << "?";
 	}
 	heading.SetTo(txt, ptr-txt);
-	ao.AddFunction(label.String(), heading.String(), txt - ao.Text());
 
+	pul.insert(pul.end(), PopupMenu(label, heading, txt));
+
 	return ptr;
 } /* Heading */
 
-const char *JavaScript(const char *txt, CLanguageProxy& ao)
+
+#pragma mark Main Functions
+
+
+const char *JavaScript(const char *txt, PopupList &lstJsFunctions, PopupList &lstJsClasses, bool sorted)
 {
 	txt = skip_nc(txt, '>');
 	
@@ -275,58 +406,43 @@
 				if (*(txt + 1) == '/')
 					txt = skip(txt, '\n') - 1;
 				break;
+
 			case '"':
-			{
-				while (*++txt)
-				{
-					if (*txt == '\\')
-						txt++;
-					else if (*txt == '"')
-						break;
-				}
-				break;
-			}
 			case '\'':
-			{
-				while (*++txt)
-				{
-					if (*txt == '\\')
-						txt++;
-					else if (*txt == '\'')
-						break;
-				}
+				skip_string(txt);
 				break;
-			}
-			case '{':
+
 			case '(':
-				txt = block(txt + 1, *txt);
+				txt = skip_block(txt + 1, '(', ')');
 				break;
+
+			case '{':
+				txt = skip_block(txt + 1, '{', '}');
+				break;
+
 			case '<':
 				if (strncasecmp(txt, "</script", 8) == 0)
 					return txt + 9;
 				break;
+
 			default:
 				if (strncasecmp(txt, "function", 8) == 0)
 				{
 					txt += 8;
 					while (isspace(*txt)) txt++;
 					
-					int offset = txt - ao.Text();
-					
-					char name[kMaxNameSize];
-					char *n = name;
-					while ((isalnum(*txt) || *txt == '.' || *txt == '_') &&
-							(n - name) < kMaxNameSize - 1)
+					const char *beg = txt;
+					while ((isalnum(*txt) || *txt == '.' || *txt == '_'))
 					{
-						*n++ = *txt++;
+						txt++;
 					}
-					*n = 0;
-					
-					char label[kMaxNameSize + 3];
-					strcpy(label, "JS:  ");
-					strcat(label, name);
 
-					ao.AddFunction(label, name, offset);
+					BString label, function(beg, txt-beg);
+					if (sorted)
+						label << SORT_PREFIX_JS;
+					label << function;
+
+					lstJsFunctions.insert(lstJsFunctions.end(), PopupMenu(label, function, beg));
 				}
 				break;
 		}
@@ -334,136 +450,150 @@
 	}
 	
 	return txt;
-} // JavaScript
+} /* JavaScript */
 
-const char *PhpScript(const char *txt, CLanguageProxy& ao)
+
+const char *PhpScript(const char *txt, PopupList &lstPhpFunctions, PopupList &lstPhpClasses, bool sorted)
 {
+	map <int,int,int> headings;
+	BString class_name;
 	while (*txt)
 	{
+//printf("%c", *txt);
 		switch (*txt)
 		{
 			case '/':
+				// Comment: "//..."
 				if (*(txt + 1) == '/')
 					txt = skip(txt + 2, '\n') - 1;
+				// Comment: "/*..."
 				else if (*(txt + 1) == '*')
 				{
-					++txt;
-					
+					txt++;
 					while ( *++txt &&
 							!(*txt == '?' && *(txt + 1) == '>') &&
 							!(*txt == '*' && *(txt + 1) == '/'))
 						;
-					++txt;
+					txt++;
 				}
 				break;
+
 			case '"':
-			{
-				while (*++txt)
-				{
-					if (*txt == '\\')
-						txt++;
-					else if (*txt == '"')
-						break;
-				}
-				break;
-			}
 			case '\'':
-			{
-				while (*++txt)
-				{
-					if (*txt == '\\')
-						txt++;
-					else if (*txt == '\'')
-						break;
-				}
+				skip_string(txt);
 				break;
-			}
+
+			case '}':
+				//printf("\nCLASSEND FOUND\n");
+				class_name = "";
+				break;
+
 			case '{':
+				txt = skip_block(txt + 1, '{', '}');
+				break;
+
 			case '(':
-				txt = block(txt + 1, *txt);
+				txt = skip_block(txt + 1, '(', ')');
 				break;
+
 			case '?':
 				if (*++txt == '>')
 					return txt + 1;
 				break;
+
 			default:
-				if (strncasecmp(txt, "function", 8) == 0)
-				{
-					txt += 8;
-					while (isspace(*txt)) txt++;
-					
-					int offset = txt - ao.Text();
-					
-					char name[kMaxNameSize];
-					char *n = name;
-					while ((isalnum(*txt) || *txt == '_') && (n - name) < kMaxNameSize)
-						*n++ = *txt++;
-					*n = 0;
-					
-					char label[kMaxNameSize + 6];
-					strcpy(label, "PHP:  ");
-					strcat(label, name);
+//printf(" <%c%c%c%c> ", *(txt+0), *(txt+1), *(txt+2), *(txt+3));
+				if (isident(*txt)) {
+					const char *ptr = txt-1;
+					while (*++ptr && isident(*ptr)) ;
+					int len = ptr - txt;
 
-					ao.AddFunction(label, name, offset);
+					if (len == 8 && strncasecmp(txt, "function", 8) == 0)
+					{
+						php_function(txt, class_name == "" ? lstPhpFunctions : lstPhpClasses, class_name, sorted);
+					}
+					else if (len == 5 && strncasecmp(txt, "class", 5) == 0)
+					{
+						php_class(txt, lstPhpClasses, class_name, sorted);
+					}
+					else
+					{
+						//printf("[[");for (const char* p=txt; p<ptr; p++)printf("%c", *p);printf(":%li]]", ptr - txt);
+						txt = ptr;
+					}
 				}
 				break;
 		}
 		txt++;
 	}
-	
+//printf("\n");
 	return txt;
-} // PhpScript
+} /* PhpScript */
 
+
 void ScanForFunctions(CLanguageProxy& proxy)
 {
+	bool sorted = proxy.Sorted();
+	PopupList lstHeadings, lstAnchors, lstPhpFunctions, lstPhpClasses, lstJsFunctions, lstJsClasses;
+
 	const char *text = proxy.Text(), *max = text + proxy.Size();
 	if (*max != 0)
 		return;
 
 	if (strncasecmp(text, "<!--:javascript", 15) == 0)
-		text = JavaScript(text, proxy);
+		text = JavaScript(text, lstJsFunctions, lstJsClasses, sorted);
 	else if (strncasecmp(text, "<!--:php", 8) == 0)
-		text = PhpScript(text + 11, proxy);
+		text = PhpScript(text + 11, lstPhpFunctions, lstPhpClasses, sorted);
 
-	while (text < max)
+	while (*text && text < max)
 	{
 		text = skip(text, '<');
-		text = skip_white(text);
+		text = skip_whitespace(text);
 		
 		switch (toupper(*text))
 		{
-			case 0:
-				return;
 			case '?':
-				text = PhpScript(text, proxy);
+				text = PhpScript(text, lstPhpFunctions, lstPhpClasses, sorted);
 				break;
+
 			case 'A':
 				if (isspace(*++text))
-					text = Anchor(text, proxy);
+					text = anchor(text, proxy, lstAnchors, sorted);
 				else
 					text = skip_nc(text, '>');
 				break;
+
 			case 'L':
 				if (strncasecmp(text, "LINK", 4) == 0)
-					text = Anchor(text + 4, proxy);
+					text = anchor(text + 4, proxy, lstAnchors, sorted);
 				else
 					text = skip_nc(text, '>');
 				break;
+
 			case 'H':
 				if (*++text >= '1' && *text <= '6')
 				{
-					text = Heading(text, proxy);
+					text = heading(text, lstHeadings, sorted);
 				}
 				else
 					text = skip_nc(text, '>');
 				break;
+
 			case 'S':
 				if (strncasecmp(text, "SCRIPT", 6) == 0)
-					text = JavaScript(text, proxy);
+					text = JavaScript(text, lstJsFunctions, lstJsClasses, sorted);
 				break;
+
 			default:
 				text = skip_nc(text + 1, '>');
 				break;
 		}
 	}
+
+	add_to_popup("PHP-Classes",   lstPhpClasses,   proxy);
+	add_to_popup("PHP-Functions", lstPhpFunctions, proxy);
+	add_to_popup("JS-Classes",    lstJsClasses,    proxy);
+	add_to_popup("JS-Functions",  lstJsFunctions,  proxy);
+	add_to_popup("HTML-Anchors",  lstAnchors,      proxy);
+	add_to_popup("HTML-Headings", lstHeadings,     proxy);
 } /* ScanForFunctions */



From hoern at mail.berlios.de  Sun Nov 26 18:09:39 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Sun, 26 Nov 2006 18:09:39 +0100
Subject: [pe-commits] r470 - trunk/Sources
Message-ID: <200611261709.kAQH9ddv014671@sheep.berlios.de>

Author: hoern
Date: 2006-11-26 18:09:38 +0100 (Sun, 26 Nov 2006)
New Revision: 470
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=470&view=rev

Removed:
   trunk/Sources/PFuncPopup.h
Log:
Removed PFuncPopup.h as it doesn't seems to be used


Deleted: trunk/Sources/PFuncPopup.h



From hoern at mail.berlios.de  Sun Nov 26 18:20:07 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Sun, 26 Nov 2006 18:20:07 +0100
Subject: [pe-commits] r471 - trunk/Sources
Message-ID: <200611261720.kAQHK7rt015715@sheep.berlios.de>

Author: hoern
Date: 2006-11-26 18:20:06 +0100 (Sun, 26 Nov 2006)
New Revision: 471
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=471&view=rev

Modified:
   trunk/Sources/HAppResFile.h
   trunk/Sources/PApp.cpp
   trunk/Sources/PText.cpp
Log:
* Removed support for BeOS <= R4


Modified: trunk/Sources/HAppResFile.h
===================================================================
--- trunk/Sources/HAppResFile.h	2006-11-26 17:09:38 UTC (rev 470)
+++ trunk/Sources/HAppResFile.h	2006-11-26 17:20:06 UTC (rev 471)
@@ -43,16 +43,6 @@
 
 namespace HResources {
 
-#if (B_BEOS_VERSION <= B_BEOS_VERSION_4)
-// UGLY HACK WARNING!
-// [zooey]:
-// On BeOS R4, the first entry of this namespace - GetMenuBar() -
-// is magically renamed into GetMenuBar_() by gcc. Why this is the
-// case, I do not know. If anyone *does* know, please tell me!
-// We fix (cough) this by introducing a dummy entry:
-	void R4_Dummy();
-#endif
-
 IMPEXP_LIBHEKKEL
 BMenuBar* GetMenuBar(BRect frame, int id);
 

Modified: trunk/Sources/PApp.cpp
===================================================================
--- trunk/Sources/PApp.cpp	2006-11-26 17:09:38 UTC (rev 470)
+++ trunk/Sources/PApp.cpp	2006-11-26 17:20:06 UTC (rev 471)
@@ -872,9 +872,7 @@
 				break;
 			}
 
-#if (B_BEOS_VERSION > B_BEOS_VERSION_4)
 			case B_SILENT_RELAUNCH:
-#endif
 			case msg_New:
 				NewWindow();
 				break;

Modified: trunk/Sources/PText.cpp
===================================================================
--- trunk/Sources/PText.cpp	2006-11-26 17:09:38 UTC (rev 470)
+++ trunk/Sources/PText.cpp	2006-11-26 17:20:06 UTC (rev 471)
@@ -2437,16 +2437,8 @@
 		functions.SortItems(MenuFunctionScanHandler::CompareFunc);
 	}
 
-#if (B_BEOS_VERSION <= B_BEOS_VERSION_4)
-	// BeOS < R4.5 has no AsyncAutoDestruct, so we simulate that (kind of):
-	static BPopUpMenu * popup = NULL;
-	if (popup)
-		delete popup;
-	popup = new BPopUpMenu("Funcs");
-#else
 	BPopUpMenu *popup = new BPopUpMenu("Funcs");
 	popup->SetAsyncAutoDestruct(true);
-#endif
 	popup->SetFont(be_plain_font);
 
 	if (includes.IsEmpty() && functions.IsEmpty())



From hoern at mail.berlios.de  Sun Nov 26 19:56:45 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Sun, 26 Nov 2006 19:56:45 +0100
Subject: [pe-commits] r472 - in trunk: Languages/Sources Sources
Message-ID: <200611261856.kAQIujtN002064@sheep.berlios.de>

Author: hoern
Date: 2006-11-26 19:56:44 +0100 (Sun, 26 Nov 2006)
New Revision: 472
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=472&view=rev

Removed:
   trunk/Sources/CKeywords.cpp
   trunk/Sources/CKeywords.h
Modified:
   trunk/Languages/Sources/HtmlJsPhp_Language.cpp
   trunk/Sources/CLanguageAddOn.cpp
   trunk/Sources/CLanguageAddOn.h
   trunk/Sources/CLanguageInterface.cpp
   trunk/Sources/CLanguageInterface.h
   trunk/Sources/Jamfile
Log:
* Dusty old DTA-based keyword code removed
* GenerateKeywordMap() felt quite lonely in CKeyword and therefore moved 
  to CLanguageInterface, as it had some relatives there
* Being empty CKeyword felt fairly useless and vanished into thin air
* fDeprecated_was_Encoding gone with the wind
* Html-Js-Php finally identifies itself correctly as v2 interface


Modified: trunk/Languages/Sources/HtmlJsPhp_Language.cpp
===================================================================
--- trunk/Languages/Sources/HtmlJsPhp_Language.cpp	2006-11-26 17:20:06 UTC (rev 471)
+++ trunk/Languages/Sources/HtmlJsPhp_Language.cpp	2006-11-26 18:56:44 UTC (rev 472)
@@ -57,6 +57,7 @@
 _EXPORT const char kLanguageCommentStart[] = "<!";
 _EXPORT const char kLanguageCommentEnd[]   = ">";
 _EXPORT const char kLanguageKeywordFile[]  = "keywords.html-js-php";
+_EXPORT const int16 kInterfaceVersion      = 2;
 
 enum {
 	START = 0,

Deleted: trunk/Sources/CKeywords.cpp

Deleted: trunk/Sources/CKeywords.h

Modified: trunk/Sources/CLanguageAddOn.cpp
===================================================================
--- trunk/Sources/CLanguageAddOn.cpp	2006-11-26 17:20:06 UTC (rev 471)
+++ trunk/Sources/CLanguageAddOn.cpp	2006-11-26 18:56:44 UTC (rev 472)
@@ -1,8 +1,8 @@
 /*	$Id$
-	
+
 	Copyright 1996, 1997, 1998, 2002
 	        Hekkelman Programmatuur B.V.  All rights reserved.
-	
+
 	Redistribution and use in source and binary forms, with or without
 	modification, are permitted provided that the following conditions are met:
 	1. Redistributions of source code must retain the above copyright notice,
@@ -12,13 +12,13 @@
 	   and/or other materials provided with the distribution.
 	3. All advertising materials mentioning features or use of this software
 	   must display the following acknowledgement:
-	   
+
 	    This product includes software developed by Hekkelman Programmatuur B.V.
-	
+
 	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
 	   promote products derived from this software without specific prior
 	   written permission.
-	
+
 	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
@@ -28,7 +28,7 @@
 	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 	Created: 12/07/97 22:53:14 by Maarten Hekkelman
 */
@@ -50,7 +50,6 @@
 	int *starts, rgb_color *colors)
 	: fText(text)
 	, fSize(size)
-	, fDeprecated_was_Encoding(0)
 	, fInterface(intf)
 	, fCIndx(0)
 	, fStarts(starts)
@@ -64,7 +63,6 @@
 	CFunctionScanHandler* handler)
 	: fText(text.Text())
 	, fSize(text.Size())
-	, fDeprecated_was_Encoding(0)
 	, fInterface(intf)
 	, fCIndx(0)
 	, fStarts(NULL)
@@ -100,20 +98,20 @@
 		start = 0;
 	if (color < kColorText || color >= kColorEnd)
 		color = kColorText;
-	
+
 	if (fStarts && fCIndx < 99 &&
 		(fCIndx == 0 || fColors[fCIndx - 1] != gColor[color]))
 	{
 		if (fCIndx && start == fStarts[fCIndx - 1])
 			fCIndx--;
-		
+
 		fColors[fCIndx] = gColor[color];
 		fStarts[fCIndx] = start;
 		fCIndx++;
 	}
 } /* CLanguageProxy::SetColor */
 
-void CLanguageProxy::AddFunction(const char *name, const char *match, 
+void CLanguageProxy::AddFunction(const char *name, const char *match,
 	int offset, bool italic, const char *params)
 {
 	FailNilMsg(fFunctionScanHandler, "Not a valid call in this context");

Modified: trunk/Sources/CLanguageAddOn.h
===================================================================
--- trunk/Sources/CLanguageAddOn.h	2006-11-26 17:20:06 UTC (rev 471)
+++ trunk/Sources/CLanguageAddOn.h	2006-11-26 18:56:44 UTC (rev 472)
@@ -1,8 +1,8 @@
 /*	$Id$
-	
+
 	Copyright 1996, 1997, 1998, 2002
 	        Hekkelman Programmatuur B.V.  All rights reserved.
-	
+
 	Redistribution and use in source and binary forms, with or without
 	modification, are permitted provided that the following conditions are met:
 	1. Redistributions of source code must retain the above copyright notice,
@@ -12,13 +12,13 @@
 	   and/or other materials provided with the distribution.
 	3. All advertising materials mentioning features or use of this software
 	   must display the following acknowledgement:
-	   
+
 	    This product includes software developed by Hekkelman Programmatuur B.V.
-	
+
 	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
 	   promote products derived from this software without specific prior
 	   written permission.
-	
+
 	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
@@ -28,7 +28,7 @@
 	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 	Created: 12/07/97 21:46:44 by Maarten Hekkelman
 */
@@ -62,23 +62,23 @@
 public:
 		CLanguageProxy(CLanguageInterface& intf, const char *text, int size, int *starts = NULL, rgb_color *colors = NULL);
 		CLanguageProxy(CLanguageInterface& intf, PText& text, CFunctionScanHandler* handler = NULL);
-		
+
 /*
 	Use the next two methods to recognize keywords in the text.
-	Move is used to walk through a DFA (deterministic finite automaton)
-	and reports back the state it is currently in. Always start with a state 1 (one).
+	Move is used to walk through a keyword map and reports back the state it is
+	currently in. Always start with a state 1 (one).
 	If the result of a Move is 0 (zero), than you haven't fed it a keyword.
 	If the state is not zero, you can test if it's a valid keyword by calling IsKeyword.
 	IsKeyword returns the set the keyword is in, or zero if it's not a keyword.
 	A value of 1 (one) corresponds to a standard keyword, a value of 2 means a
 	keyword from user set 1 and so on.
-	
+
 	You can always call these functions but I think they are only useful when doing
-	syntax colouring.	
+	syntax colouring.
 */
 virtual	int Move(int ch, int state);
 virtual	int IsKeyword(int state, int32 inSets=0);
-		
+
 /*
 	The next pair of calls return the text to colour or parse and it's size.
 	When doing syntax colouring Pe guarantees to return only one line of
@@ -105,15 +105,15 @@
 	Offset should be the nr of characters match can be found from the beginning of the
 	text. This value may be incorrect but should be 'near by', preferrably before.
 	The open parameter is of course the name of the include file.
-*/		
-virtual	void AddFunction(const char *name, const char *match, int offset, 
+*/
+virtual	void AddFunction(const char *name, const char *match, int offset,
 	bool italic = false, const char *params = "");
 virtual	void AddInclude(const char *name, const char *open, bool italic = false);
 virtual	void AddSeparator(const char* name = NULL);
 
 /*
 	These report the status of the corresponding checkboxes
-*/		
+*/
 virtual	bool Includes() const;
 virtual	bool Prototypes() const;
 virtual	bool Types() const;
@@ -130,11 +130,11 @@
 virtual	void IncNestLevel();
 virtual	void DecNestLevel();
 virtual	void SetNestLevel(uint32 nestLevel);
-		
+
 private:
 		const char *fText;
 		int fSize;
-		int fDeprecated_was_Encoding;		// deprecated, is always set to 0
+//////		int fDeprecated_was_Encoding;		// deprecated, is always set to 0
 		CLanguageInterface& fInterface;
 		int fCIndx;
 		int *fStarts;

Modified: trunk/Sources/CLanguageInterface.cpp
===================================================================
--- trunk/Sources/CLanguageInterface.cpp	2006-11-26 17:20:06 UTC (rev 471)
+++ trunk/Sources/CLanguageInterface.cpp	2006-11-26 18:56:44 UTC (rev 472)
@@ -1,8 +1,8 @@
 /*	$Id$
-	
+
 	Copyright 1996, 1997, 1998, 2002
 	        Hekkelman Programmatuur B.V.  All rights reserved.
-	
+
 	Redistribution and use in source and binary forms, with or without
 	modification, are permitted provided that the following conditions are met:
 	1. Redistributions of source code must retain the above copyright notice,
@@ -12,13 +12,13 @@
 	   and/or other materials provided with the distribution.
 	3. All advertising materials mentioning features or use of this software
 	   must display the following acknowledgement:
-	   
+
 	    This product includes software developed by Hekkelman Programmatuur B.V.
-	
+
 	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
 	   promote products derived from this software without specific prior
 	   written permission.
-	
+
 	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
@@ -28,15 +28,14 @@
 	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
-	
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
 	Created: 09/19/97 10:49:36
 */
 
 #include "pe.h"
 #include "PText.h"
 #include "CLanguageInterface.h"
-#include "CKeywords.h"
 #include "PApp.h"
 #include "CLanguageAddOn.h"
 #include "CAlloca.h"
@@ -55,13 +54,13 @@
 public:
 	ext();
 	ext(const char *e);
-	
+
 	bool operator<(const ext& e) const;
 	bool operator==(const ext& e) const;
-	
+
 	char t[12];
 };
-		
+
 static map<ext, CLanguageInterface*> sInterfaces;
 static CLanguageInterface *sDefault;
 vector<CLanguageInterface*> CLanguageInterface::fInterfaces;
@@ -74,7 +73,7 @@
 ext::ext(const char *e)
 {
 	if (strlen(e) > 11) THROW(("Extension `%s' is too long", e));
-	
+
 	strcpy(t, e);
 } /* CLanguageInterface::ext::ext */
 
@@ -98,7 +97,7 @@
 		sfWordBreakTable = (unsigned char *)HResources::GetResource(rtyp_Wbrt, rid_Wbrt_WordbreakTable);
 		if (sfWordBreakTable == NULL) THROW(("Missing Resource!"));
 	}
-	
+
 //	fImage = -1;
 
 	fBalance = NULL;
@@ -120,7 +119,7 @@
 		sfWordBreakTable = (unsigned char *)HResources::GetResource(rtyp_Wbrt, rid_Wbrt_WordbreakTable);
 		if (sfWordBreakTable == NULL) THROW(("Missing Resource!"));
 	}
-	
+
 	fImage = image;
 	if (fImage < 0) THROW(("Error loading language extension: %s", strerror(fImage)));
 
@@ -140,9 +139,10 @@
 	int16* versionPtr = NULL;
 	get_image_symbol(fImage, "kInterfaceVersion", B_SYMBOL_TYPE_DATA, (void**)&versionPtr);
 	fInterfaceVersion = versionPtr ? *versionPtr : 1;
-	if (fInterfaceVersion == 1) {
-		if (strlen(fKeywordFile))
-			GenerateKWTables(fKeywordFile, path, ec, accept, base, nxt, chk);
+	if (fInterfaceVersion < 2) {
+		BString err("Unsupported Language:\n");
+		err << path;
+		THROW((err.String()));
 	}
 } /* CLanguageInterface::CLanguageInterface */
 
@@ -154,13 +154,13 @@
 void AddInterface(char *s, T* i)
 {
 	char *e = strtok(s, ";");
-	
+
 	while (e)
 	{
 		sInterfaces[e] = i;
 		e = strtok(NULL, ";");
 	}
-	
+
 	free(s);
 } /* AddInterface */
 
@@ -170,7 +170,7 @@
 	AddInterface(strdup(""), sDefault);
 
 	char path[PATH_MAX];
-	
+
 	BPath p;
 	BEntry e;
 	gAppDir.GetEntry(&e);
@@ -178,13 +178,13 @@
 	strcpy(path, p.Path());
 
 	strcat(path, "/Languages/");
-	
+
 	char plug[PATH_MAX];
 	DIR *dir = opendir(path);
 
 	if (!dir)
 		return;
-	
+
 	struct dirent *dent;
 	struct stat stbuf;
 
@@ -206,7 +206,7 @@
 				if (strlen(l) > 28) THROW(("Language name too long"));
 				CLanguageInterface *intf = new CLanguageInterface(plug, next);
 				fInterfaces.push_back(intf);
-				
+
 				const char *s = intf->Extensions();
 				AddInterface(strdup(s), intf);
 			}
@@ -219,14 +219,14 @@
 CLanguageInterface* CLanguageInterface::FindByExtension(const char *filename)
 {
 	char *e;
-	
+
 	if (filename)
 	{
 		try
 		{
 			if ((e = strrchr(filename, '.')) != NULL && sInterfaces.count(e + 1))
 				return sInterfaces[e + 1];
-			
+
 			if (strlen(filename) < 11 && sInterfaces.count(filename))
 				return sInterfaces[filename];
 		}
@@ -251,7 +251,7 @@
 						txt++;
 				}
 				break;
-			
+
 			case '"':
 				while (*++txt)
 				{
@@ -261,7 +261,7 @@
 						txt++;
 				}
 				break;
-				
+
 			case '/':
 				if (txt[1] == '*')
 				{
@@ -276,7 +276,7 @@
 						txt++;
 				}
 				break;
-			
+
 			case '{':
 			case '[':
 			case '(':
@@ -287,7 +287,7 @@
 		}
 		txt++;
 	}
-	
+
 	return txt;
 } // skip
 
@@ -295,14 +295,14 @@
 {
 	const char *txt = proxy.Text(), *et;
 	int size = proxy.Size();
-	
+
 	if (start < 0 || start > end || end > size)
 		return false;
-	
+
 	et = txt + end;
-	
+
 	stack<int> bls, sbls, pls;
-	
+
 	while (*txt && txt < et)
 	{
 		switch (*txt)
@@ -316,44 +316,44 @@
 		}
 		txt = skip(txt + 1);
 	}
-	
+
 	char ec = 0, oc = 0;
 	stack<int> *s = NULL;
-	
+
 	int db, dsb, dp;
-	
+
 	db = bls.empty() ? -1 : start - bls.top();
 	dsb = sbls.empty() ? -1 : start - sbls.top();
 	dp = pls.empty() ? -1 : start - pls.top();
-	
+
 	if (db < 0 && dsb < 0 && dp < 0)
 		return false;
-	
+
 	if (db >= 0 && (dsb < 0 || db < dsb) && (dp < 0 || db < dp))
 	{
 		oc = '{';
 		ec = '}';
 		s = &bls;
 	}
-	
+
 	if (dsb >= 0 && (db < 0 || dsb < db) && (dp < 0 || dsb < dp))
 	{
 		oc= '[';
 		ec = ']';
 		s = &sbls;
 	}
-	
+
 	if (dp >= 0 && (dsb < 0 || dp < dsb) && (db < 0 || dp < db))
 	{
 		oc = '(';
 		ec = ')';
 		s = &pls;
 	}
-	
+
 	if (ec)
 	{
 		int l = 1;
-		
+
 		while (*txt)
 		{
 			if (*txt == ec)
@@ -375,7 +375,7 @@
 			txt = skip(txt + 1);
 		}
 	}
-	
+
 	return false;
 } /* InternalBalance */
 
@@ -384,7 +384,7 @@
 	try
 	{
 		CLanguageProxy proxy(*this, text);
-		
+
 		if (fBalance)
 			return fBalance(proxy, start, end);
 		else
@@ -402,7 +402,7 @@
 	{
 		int start = min(text.Anchor(), text.Caret());
 		int end = max(text.Anchor(), text.Caret());
-		
+
 		if (! Balance(text, start, end))
 			THROW((0));
 
@@ -467,39 +467,39 @@
 		{
 			int line = text.Offset2Line(offset);
 			int size;
-			
+
 			if (line >= text.LineCount() - 1)
 				size = min(text.Size() - offset, 1024);
 			else
 				size = min(text.LineStart(line + 1) - offset, 1024);
-			
+
 			CAlloca txt(size + 1);
 			text.TextBuffer().Copy(txt, offset, size);
 			txt[size] = 0;
-			
+
 			CLanguageProxy proxy(*this, txt, size);
 			int result = fFindNextWord(proxy);
 
 			txt[result + 1] = 0;
 			mlen = mstrlen(txt);
-			
+
 			return offset + result;
 		}
 		else
 		{
 			int mark = offset, i = offset;
 			int unicode, state, len, iLen;
-			
+
 			state = 1;
 			mlen = 0;
 			iLen = 0;
-			
+
 			while (state > 0 && i < text.Size())
 			{
 				text.TextBuffer().CharInfo(i, unicode, len);
-				
+
 				int cl = 0;
-				
+
 				if (unicode == '\n')
 					cl = 3;
 				else if (isspace_uc(unicode))
@@ -530,7 +530,7 @@
 						default:
 							cl = 4;
 					}
-				
+
 				unsigned char t = sfWordBreakTable[(state - 1) * 6 + cl];
 
 				state = t & 0x7f;
@@ -568,21 +568,21 @@
 const char *CLanguageInterface::Extensions() const
 {
 	char extPref[64];
-	
+
 	if (strlen(fLanguage) > 32) THROW(("Language name too long: %s", fLanguage));
 	strcpy(extPref, fLanguage);
 	strcat(extPref, ".ext");
-	
+
 	return gPrefs->GetPrefString(extPref, fExtensions);
 } /* CLanguageInterface::Extensions */
 
 void CLanguageInterface::SetExtensions(const char *ext)
 {
 	char extPref[32];
-	
+
 	strcpy(extPref, fLanguage);
 	strcat(extPref, ".ext");
-	
+
 	gPrefs->SetPrefString(extPref, ext);
 } /* CLanguageInterface::SetExtensions */
 
@@ -590,7 +590,7 @@
 {
 	const char *d = gPrefs->GetPrefString(prf_S_DefLang, "None");
 	vector<CLanguageInterface*>::iterator i;
-	
+
 	for (i = fInterfaces.begin(); i != fInterfaces.end(); i++)
 	{
 		if (strcmp(d, (*i)->Name()) == 0)
@@ -613,13 +613,13 @@
 CLanguageInterface* CLanguageInterface::FindByName(const char *language)
 {
 	vector<CLanguageInterface*>::iterator i;
-	
+
 	for (i = fInterfaces.begin(); i != fInterfaces.end(); i++)
 	{
 		if (strcmp(language, (*i)->Name()) == 0)
 			return *i;
 	}
-	
+
 	return sDefault;
 } // CLanguageInterface::FindByName
 
@@ -647,7 +647,7 @@
 		// do lazy loading of keywords-info:
 		image_info imageInfo;
 		if (get_image_info(fImage, &imageInfo) == B_OK && strlen(fKeywordFile))
-			GenerateKWMap(fKeywordFile, imageInfo.name, fKeywordMap);
+			GenerateKeywordMap(imageInfo.name);
 		fHaveParsedKeywords = true;
 	}
 	// Lets search
@@ -678,7 +678,128 @@
 	return 0;
 }
 
+/*
+ * Implementation of keyword lookup, a straightforward, map-based lookup:
+ * [zooey]:
+ *     I know that using a hashmap should be faster, but since we do not know
+ *     the amount of words contained in the map beforehand, the memory footprint
+ *     of the hashmap would be (much) worse than that of a map.
+ *     Benchmarks have indicated that lookup speed is good enough with maps
+ *		 anyway, so I have decided to use a map for now.
+ */
+void CLanguageInterface::GenerateKeywordMap(const char *ext) const
+{
+	try
+	{
+		BPath settings;
+		bool isNew = false;
 
+		FailOSErr(find_directory(B_USER_SETTINGS_DIRECTORY, &settings, true));
+
+		BString p;
+		p << settings.Path() << "/pe/" << fKeywordFile;
+
+		BEntry e;
+		FailOSErrMsg(e.SetTo(p.String(), B_FILE_NODE),
+						 "Settings directory was not found?");
+
+		BString keywords;
+		if (!e.Exists())
+		{
+			// copy resources into separate file in settings-folder, such that
+			// the user can edit that in order to modify the keywords for that
+			// specific language:
+			isNew = true;
+
+			BFile rf;
+			FailOSErr(rf.SetTo(ext, B_READ_ONLY));
+			BResources res;
+			FailOSErr(res.SetTo(&rf));
+
+			size_t s;
+			const char *r = (const char*)res.LoadResource('KeyW', fKeywordFile, &s);
+
+			if (!r) THROW(("Missing resource"));
+
+			BFile txtfile(p.String(), B_CREATE_FILE | B_READ_WRITE);
+			CheckedWrite(txtfile, r, s);
+			keywords.SetTo(r, s);
+		} else {
+			BFile txtfile(p.String(), B_READ_ONLY);
+			off_t size;
+			FailOSErr(txtfile.GetSize(&size));
+			char* kw = keywords.LockBuffer(size+1);
+			if (kw) {
+				CheckedRead(txtfile, kw, size);
+				keywords.UnlockBuffer(size);
+			}
+		}
+
+		const char* kw = keywords.String();
+		const char* white = " \n\r\t";
+		const char* start = kw + strspn(kw, white);
+		const char* end = start + strcspn(start, white);
+		BString word;
+		char* buf;
+		int currType = kKeywordLanguage;
+		while (start < end) {
+			// ideally, we'd like to use this:
+			//			word.SetTo(start, end-start);
+			// but the implementation of SetTo() seems to do a strlen() without
+			// clamping it to the given length, which (as we give it a pretty
+			// long string) results in pathetic performance.
+			// So we roll our own SetTo():
+			FailNil(buf = word.LockBuffer(end-start+1));
+			memcpy(buf, start, end-start);
+			buf[end-start] = '\0';
+			word.UnlockBuffer(end-start);
+			if (!word.Compare("//", 2)) {
+				// a comment, so we skip to end of line:
+				start += strcspn(start, "\n");
+				start += strspn(start, white);
+				end = start + strcspn(start, white);
+			} else {
+				if (word[0] == '-') {
+					// it's a keyword-class specifier, we check which one:
+					if (!word.ICompare("-Pe-Keywords-Language-"))
+						currType = kKeywordLanguage;
+					else if (!word.ICompare("-Pe-Keywords-User1-"))
+						currType = kKeywordUser1;
+					else if (!word.ICompare("-Pe-Keywords-User2-"))
+						currType = kKeywordUser2;
+					else if (!word.ICompare("-Pe-Keywords-User3-"))
+						currType = kKeywordUser3;
+					else if (!word.ICompare("-Pe-Keywords-User4-"))
+						currType = kKeywordUser4;
+					else {
+						// be compatible with old style, meaning that an unknown
+						// '-' entry bumps the type... Ignore a leading '-' entry
+						if (!fKeywordMap.empty())
+							currType++;
+						// ...and skips to end of line:
+						end = start + strcspn(start, "\n");
+					}
+				} else {
+					fKeywordMap.insert(pair<BString, int>(word, currType));
+				}
+				start = end + strspn(end, white);
+				end = start + strcspn(start, white);
+			}
+		}
+		// DEBUG-OUTPUT:
+		//cout << "Elements in MAP:" << endl;
+		//int i = 0;
+		//for (multimap<BString, int>::iterator it = fKeywordMap.begin(); it != fKeywordMap.end(); it++) {
+		//	cout << ++i << ":  [" << (*it).second << ": " << (*it).first.String() << "]" << endl;
+		//}
+	}
+	catch (HErr& err)
+	{
+		err.DoError();
+	}
+} /* GenerateKeywordMap */
+
+
 // #pragma mark -
 
 

Modified: trunk/Sources/CLanguageInterface.h
===================================================================
--- trunk/Sources/CLanguageInterface.h	2006-11-26 17:20:06 UTC (rev 471)
+++ trunk/Sources/CLanguageInterface.h	2006-11-26 18:56:44 UTC (rev 472)
@@ -1,8 +1,8 @@
 /*	$Id$
-	
+
 	Copyright 1996, 1997, 1998, 2002
 	        Hekkelman Programmatuur B.V.  All rights reserved.
-	
+
 	Redistribution and use in source and binary forms, with or without
 	modification, are permitted provided that the following conditions are met:
 	1. Redistributions of source code must retain the above copyright notice,
@@ -12,13 +12,13 @@
 	   and/or other materials provided with the distribution.
 	3. All advertising materials mentioning features or use of this software
 	   must display the following acknowledgement:
-	   
+
 	    This product includes software developed by Hekkelman Programmatuur B.V.
-	
+
 	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
 	   promote products derived from this software without specific prior
 	   written permission.
-	
+
 	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
@@ -28,7 +28,7 @@
 	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 	Created: 09/19/97 10:49:36
 */
@@ -56,13 +56,13 @@
 
 		const char *Text() const;
 		int Size() const;
-		
+
 		const char *Name() const;
 		const char *Extensions() const;
 		void SetExtensions(const char *ext);
-		
+
 static	void ChooseDefault();
-		
+
 		int *Starts() const;
 		rgb_color *Colors() const;
 
@@ -73,26 +73,21 @@
 
 static CLanguageInterface* NextIntf(int& cookie);
 static int GetIndex(const CLanguageInterface* intf);
-			
+
 		const char* LineCommentStart() const;
 		const char* LineCommentEnd() const;
-		
+
 protected:
 		CLanguageInterface();
 		CLanguageInterface(const char *path, image_id image);
 
 		void InitTables(const char *kwFile);
 		void RegisterExtension(const char *ext);
+		void GenerateKeywordMap(const char *ext) const;
 
 static	unsigned char *sfWordBreakTable;
 
-		// data members for old (DFA-based) keyword implementation, needed to 
-		// support binary-only language-addons that use this implementation
-		// (like phpext):
-		unsigned char ec[128];
-		unsigned short *accept, *base, *nxt, *chk;
-
-		const char *fLanguage, *fExtensions, *fKeywordFile;		
+		const char *fLanguage, *fExtensions, *fKeywordFile;
 		const char *fLineCommentStart, *fLineCommentEnd;
 		bool (*fBalance)(CLanguageProxy& proxy, int& start, int& end);
 		void (*fScanForFunctions)(CLanguageProxy& proxy);
@@ -103,7 +98,7 @@
 		// member introduced for proper interface version detection:
 		int16 fInterfaceVersion;
 
-		// members for new (map-based) keyword implementation:
+		// members for map-based keyword implementation:
 public:
 		int AddToCurrentKeyword(int ch, int state);
 		int LookupCurrentKeyword(int state, int32 inSets=0) const;
@@ -140,7 +135,7 @@
 		CFunctionScanHandler();
 virtual	~CFunctionScanHandler();
 
-virtual	void AddFunction(const char *name, const char *match, int offset, 
+virtual	void AddFunction(const char *name, const char *match, int offset,
 	bool italic, uint32 nestLevel, const char *params);
 virtual	void AddInclude(const char *name, const char *open, bool italic);
 virtual	void AddSeparator(const char* name);

Modified: trunk/Sources/Jamfile
===================================================================
--- trunk/Sources/Jamfile	2006-11-26 17:20:06 UTC (rev 471)
+++ trunk/Sources/Jamfile	2006-11-26 18:56:44 UTC (rev 472)
@@ -64,7 +64,6 @@
 	CInfoDialog.cpp
 	CKeyCapturer.cpp
 	CKeyMapper.cpp
-	CKeywords.cpp
 	CLanguageInterface.cpp
 	CLanguageAddOn.cpp
 	CLineObject.cpp



From hoern at mail.berlios.de  Sun Nov 26 20:25:16 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Sun, 26 Nov 2006 20:25:16 +0100
Subject: [pe-commits] r473 - trunk/Sources
Message-ID: <200611261925.kAQJPGMT005684@sheep.berlios.de>

Author: hoern
Date: 2006-11-26 20:25:15 +0100 (Sun, 26 Nov 2006)
New Revision: 473
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=473&view=rev

Added:
   trunk/Sources/CFontStyle.cpp
   trunk/Sources/CFontStyle.h
Removed:
   trunk/Sources/FontStyle.cpp
   trunk/Sources/FontStyle.h
Modified:
   trunk/Sources/Jamfile
   trunk/Sources/PText.cpp
   trunk/Sources/PText.h
Log:
* FontStyle.cpp/h -> CFontStyle.cpp/h


Copied: trunk/Sources/CFontStyle.cpp (from rev 471, trunk/Sources/FontStyle.cpp)
===================================================================
--- trunk/Sources/FontStyle.cpp	2006-11-26 17:20:06 UTC (rev 471)
+++ trunk/Sources/CFontStyle.cpp	2006-11-26 19:25:15 UTC (rev 473)
@@ -0,0 +1,231 @@
+/*	$Id$
+	
+	Copyright 1996, 1997, 1998, 2002
+	        Hekkelman Programmatuur B.V.  All rights reserved.
+	
+	Redistribution and use in source and binary forms, with or without
+	modification, are permitted provided that the following conditions are met:
+	1. Redistributions of source code must retain the above copyright notice,
+	   this list of conditions and the following disclaimer.
+	2. Redistributions in binary form must reproduce the above copyright notice,
+	   this list of conditions and the following disclaimer in the documentation
+	   and/or other materials provided with the distribution.
+	3. All advertising materials mentioning features or use of this software
+	   must display the following acknowledgement:
+	   
+	    This product includes software developed by Hekkelman Programmatuur B.V.
+	
+	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
+	   promote products derived from this software without specific prior
+	   written permission.
+	
+	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
+	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+	AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+	EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+	PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
+
+	Created: 02-06-02
+*/
+
+#include "pe.h"
+#include "CFontStyle.h"
+#include "utf-support.h"
+#include "HError.h"
+
+const char kDefChars[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
+	"~!@#$%^&*()_+=-[]{}\\|;:<>'\"";
+
+vector<CFontStyle*> CFontStyle::fgFontStyleList;
+
+CFontStyle* CFontStyle::Locate(const char *name, const char *style,
+	f_unit_t size)
+{
+	BFont font;
+	font.SetFamilyAndStyle(name, style);
+	font.SetSize(size);
+	
+	vector<CFontStyle*>::iterator i;
+	
+	for (i = fgFontStyleList.begin(); i != fgFontStyleList.end(); i++)
+	{
+		if ((*i)->fFont == font)
+			return *i;
+	}
+	
+	CFontStyle* result = new CFontStyle(name, style, size);
+	fgFontStyleList.push_back(result);
+	
+	return result;
+} /* CFontStyle::Locate */
+	
+f_unit_t CFontStyle::operator[](const char *s)
+{
+	int unicode = municode(s);
+	
+	{
+		StBenaphore lock(&fLock);
+		
+		int i = unicode % fEscapementsCount, j = i - 1;
+		if (j < 0) j+= fEscapementsCount;
+		
+		ASSERT(j >= 0);
+		ASSERT(j < fEscapementsCount);
+		
+		while (true)
+		{
+			ASSERT(i >= 0);
+			ASSERT(i < fEscapementsCount);
+	
+			if (fEscapements[i].unicode == unicode)
+				return fEscapements[i].escapement;
+	
+			if (fEscapements[i].unicode == 0)
+			{
+				float w[1];
+				char buf[10];
+				int cl = mcharlen(s);
+				
+				strncpy(buf, s, cl);
+				buf[cl] = 0;
+	
+				fFont.GetEscapements(buf, 1, w);
+				w[0] *= fFont.Size();
+	
+				fEscapements[i].unicode = unicode;
+				fEscapements[i].escapement = w[0];
+				
+				fCharCount++;
+				
+				if (fCharCount > fEscapementsCount / 2)
+					ReHash();
+				
+				return fEscapements[i].escapement;
+			}
+	
+			if (i == j) {
+				break;
+			}
+			
+			i = (i + 1) % fEscapementsCount;
+		}
+		
+		ReHash();
+	
+//		printf("recursion for %d\n", unicode);
+	}
+
+	return operator[](s);
+} /* CFontStyle::operator[] */
+	
+CFontStyle::CFontStyle(const char *name, const char *style, f_unit_t size)
+	: fLock("font lock")
+{
+	fEscapementsCount = 0;
+	fEscapements = NULL;
+	fCharCount = 0;
+	fFont.SetFamilyAndStyle(name, style);
+	fFont.SetSize(size);
+	InitTable();
+} /* CFontStyle::CFontStyle */
+
+CFontStyle::~CFontStyle()
+{
+	if (fEscapements) free(fEscapements);
+}
+
+void CFontStyle::InitTable()
+{
+	int dc = mstrlen(kDefChars);
+	f_unit_t *w;
+
+	fEscapementsCount = 2 * dc;
+	fEscapements = (EscapementEntry *)calloc(fEscapementsCount, sizeof(EscapementEntry));
+	FailNil(fEscapements);
+	
+	w = (f_unit_t *)malloc(dc * sizeof(f_unit_t));
+	FailNil(w);
+
+	fFont.GetEscapements(kDefChars, mstrlen(kDefChars), w);
+	
+	const char *s = kDefChars;
+	
+	for (int i = 0; i < dc; i++)
+	{
+		int cl = mcharlen(s);
+		int uc = municode(s);
+		int ix = uc % fEscapementsCount;
+
+		while (fEscapements[ix].unicode != 0)
+			ix = (ix + 1) % fEscapementsCount;
+		
+		fEscapements[ix].unicode = uc;
+		fEscapements[ix].escapement = w[i] * fFont.Size();
+		
+		s += cl;
+	}
+	
+	free(w);
+} /* CFontStyle::InitTable */
+
+void CFontStyle::ReHash()
+{
+	int nc = max(1, fEscapementsCount * 2);
+	EscapementEntry *n = (EscapementEntry *)calloc(nc, sizeof(EscapementEntry));
+	FailNil(n);
+	
+	for (int i = 0; i < fEscapementsCount; i++)
+	{
+		int ni = fEscapements[i].unicode % nc;
+		
+		ASSERT(ni >= 0);
+		ASSERT(ni < nc);
+		
+		while (n[ni].unicode != 0)
+			ni = (ni + 1) % nc;
+		
+		n[ni].unicode = fEscapements[i].unicode;
+		n[ni].escapement = fEscapements[i].escapement;
+	}
+	
+	if (fEscapements) free(fEscapements);
+	fEscapements = n;
+	fEscapementsCount = nc;
+} /* CFontStyle::ReHash */
+
+void CFontStyle::PrintToStream()
+{
+	for (int i = 0; i < fEscapementsCount; i++)
+		if (fEscapements[i].unicode)
+		{
+			printf("entry %d: char %d(%c) = %g\n", i, fEscapements[i].unicode,
+				fEscapements[i].unicode, fEscapements[i].escapement);
+		}
+} /* CFontStyle::PrintToStream */
+
+void CFontStyle::Cleanup()
+{
+	vector<CFontStyle*>::iterator i;
+	
+	for (i = fgFontStyleList.begin(); i != fgFontStyleList.end(); i++)
+		delete *i;
+} /* CFontStyle::Cleanup */
+
+f_unit_t CFontStyle::StringWidth(const char *s, int len) {
+	f_unit_t r = 0;
+	
+	while (len > 0) {
+		r += CharWidth(s);
+		int cl = mcharlen(s);
+		s += cl;
+		len -= cl;
+	}
+	
+	return r;
+} /* CFontStyle::StringWidth */
+

Copied: trunk/Sources/CFontStyle.h (from rev 471, trunk/Sources/FontStyle.h)

Deleted: trunk/Sources/FontStyle.cpp

Deleted: trunk/Sources/FontStyle.h

Modified: trunk/Sources/Jamfile
===================================================================
--- trunk/Sources/Jamfile	2006-11-26 18:56:44 UTC (rev 472)
+++ trunk/Sources/Jamfile	2006-11-26 19:25:15 UTC (rev 473)
@@ -83,7 +83,7 @@
 	CStdErrBox.cpp
 	CStdErrParser.cpp
 	CUrlOpener.cpp
-	FontStyle.cpp
+	CFontStyle.cpp
 	MTextAddOnImpl.cpp
 	PAbout.cpp
 	PAddOn.cpp

Modified: trunk/Sources/PText.cpp
===================================================================
--- trunk/Sources/PText.cpp	2006-11-26 18:56:44 UTC (rev 472)
+++ trunk/Sources/PText.cpp	2006-11-26 19:25:15 UTC (rev 473)
@@ -39,7 +39,7 @@
 #include <String.h>
 
 #include "PText.h"
-#include "FontStyle.h"
+#include "CFontStyle.h"
 #include "Utils.h"
 #include "PStatus.h"
 #include "PApp.h"

Modified: trunk/Sources/PText.h
===================================================================
--- trunk/Sources/PText.h	2006-11-26 18:56:44 UTC (rev 472)
+++ trunk/Sources/PText.h	2006-11-26 19:25:15 UTC (rev 473)
@@ -40,7 +40,7 @@
 #include <View.h>
 
 #include "PTextBuffer.h"
-#include "FontStyle.h"
+#include "CFontStyle.h"
 
 #include <stack>
 



From hoern at mail.berlios.de  Tue Nov 28 12:03:02 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Tue, 28 Nov 2006 12:03:02 +0100
Subject: [pe-commits] r474 - in trunk: Languages/Sources Sources
Message-ID: <200611281103.kASB32M5010479@sheep.berlios.de>

Author: hoern
Date: 2006-11-28 12:03:02 +0100 (Tue, 28 Nov 2006)
New Revision: 474
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=474&view=rev

Modified:
   trunk/Languages/Sources/HtmlJsPhp_Language.cpp
   trunk/Sources/CLanguageAddOn.h
Log:
* First steps to support CSS
* Forgot to remove a "fDeprecated_was_Encoding"


Modified: trunk/Languages/Sources/HtmlJsPhp_Language.cpp
===================================================================
--- trunk/Languages/Sources/HtmlJsPhp_Language.cpp	2006-11-26 19:25:15 UTC (rev 473)
+++ trunk/Languages/Sources/HtmlJsPhp_Language.cpp	2006-11-28 11:03:02 UTC (rev 474)
@@ -1,8 +1,8 @@
 /*	$Id: HtmlJs_Language.cpp 453 2006-11-19 02:22:01Z hoern $
-	
+
 	Copyright 1996, 1997, 1998, 2002
 	        Hekkelman Programmatuur B.V.  All rights reserved.
-	
+
 	Redistribution and use in source and binary forms, with or without
 	modification, are permitted provided that the following conditions are met:
 	1. Redistributions of source code must retain the above copyright notice,
@@ -12,13 +12,13 @@
 	   and/or other materials provided with the distribution.
 	3. All advertising materials mentioning features or use of this software
 	   must display the following acknowledgement:
-	   
+
 	    This product includes software developed by Hekkelman Programmatuur B.V.
-	
+
 	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
 	   promote products derived from this software without specific prior
 	   written permission.
-	
+
 	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
@@ -28,7 +28,7 @@
 	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
-	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 	
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 	Created: 12/07/97 22:01:11 by Maarten Hekkelman
 */
@@ -54,8 +54,8 @@
 
 _EXPORT const char kLanguageName[]         = "HTML-JS-PHP";
 _EXPORT const char kLanguageExtensions[]   = "html;htm;php";
-_EXPORT const char kLanguageCommentStart[] = "<!";
-_EXPORT const char kLanguageCommentEnd[]   = ">";
+_EXPORT const char kLanguageCommentStart[] = "<!--";
+_EXPORT const char kLanguageCommentEnd[]   = "-->";
 _EXPORT const char kLanguageKeywordFile[]  = "keywords.html-js-php";
 _EXPORT const int16 kInterfaceVersion      = 2;
 
@@ -71,6 +71,9 @@
 		SPECIAL,
 		COMMENT_DTD,
 		COMMENT,
+	STYLESHEET,
+		CSS_COMMENT,
+		CSS_DEFINITION,
 	JAVASCRIPT,
 		JS_COMMENT_MULTI_LINE,
 		JS_COMMENT_SINGLE_LINE,
@@ -112,6 +115,8 @@
 	kColHtmlTagStringDoubleQuotes	= kColorString1,
 	kColHtmlTagStringSingleQuotes	= kColorString2,
 	//
+	kColCssText						= kColorPreprocessor1,
+	//
 	kColJsStringDoubleQuotes		= kColorString1,
 	kColJsStringSingleQuotes		= kColorString2,
 	kColJsComment					= kColorComment2,
@@ -147,6 +152,9 @@
 		case SPECIAL:					name = "SPECIAL"; break;
 		case COMMENT_DTD:				name = "COMMENT_DTD"; break;
 		case COMMENT:					name = "COMMENT"; break;
+		case STYLESHEET:				name = "STYLESHEET"; break;
+		case CSS_COMMENT:				name = "CSS_COMMENT"; break;
+		case CSS_DEFINITION:			name = "CSS_DEFINITION"; break;
 		case JAVASCRIPT:				name = "JAVASCRIPT"; break;
 		case JS_COMMENT_MULTI_LINE:		name = "JS_COMMENT_MULTI_LINE"; break;
 		case JS_COMMENT_SINGLE_LINE:	name = "JS_COMMENT_SINGLE_LINE"; break;
@@ -184,6 +192,9 @@
 		case SPECIAL:					name = "SPECIAL"; break;
 		case COMMENT_DTD:				name = "COMMENT_DTD"; break;
 		case COMMENT:					name = "COMMENT"; break;
+		case STYLESHEET:				name = "STYLESHEET"; break;
+		case CSS_COMMENT:				name = "CSS_COMMENT"; break;
+		case CSS_DEFINITION:			name = "CSS_DEFINITION"; break;
 		case JAVASCRIPT:				name = "JAVASCRIPT"; break;
 		case JS_COMMENT_MULTI_LINE:		name = "JS_COMMENT_MULTI_LINE"; break;
 		case JS_COMMENT_SINGLE_LINE:	name = "JS_COMMENT_SINGLE_LINE"; break;
@@ -241,6 +252,9 @@
 		case SPECIAL:					return "SPECIAL";
 		case COMMENT_DTD:				return "COMMENT_DTD";
 		case COMMENT:					return "COMMENT";
+		case STYLESHEET:				return "STYLESHEET";
+		case CSS_COMMENT:				return "CSS_COMMENT";
+		case CSS_DEFINITION:			return "CSS_DEFINITION";
 		case JAVASCRIPT:				return "JAVASCRIPT";
 		case JS_COMMENT_MULTI_LINE:		return "JS_COMMENT_MULTI_LINE";
 		case JS_COMMENT_SINGLE_LINE:	return "JS_COMMENT_SINGLE_LINE";
@@ -266,22 +280,34 @@
 #endif
 
 
+#pragma mark Support
+
+
+//#define GETCHAR  (c = (i++ < size) ? text[i - 1] : 0)
+inline char get_char(int &i, int &size, const char *text)
+{
+	return (i++ < size) ? text[i-1] : 0;
+}
+
+
 #pragma mark ColorLine
 
 
-#define GETCHAR  (c = (i++ < size) ? text[i - 1] : 0)
-
 _EXPORT void ColorLine(CLanguageProxy& proxy, int& state)
 {
 	const char *text = proxy.Text();
 	int size = proxy.Size();
-	char c;
-	int i = 0, bo = 0, s = 0, kws = 0, forceState = START;
-	int color, kwc;
-	bool leave = false, esc = false, script = false, percent = false;
-	
+	char c;					// Current character
+	int nxt = 0,			// Position after current character in text (i)
+		beg = 0,			// (s)
+		kws = 0,			//
+		forceState = START,	//
+		color,				//
+		kwc;				// Keywordcode
+	bool leave = false, esc = false, script = false, percent = false, style = false;
+
 	proxy.SetColor(0, kColorText);
-	
+
 	if (size <= 0)
 		return;
 
@@ -294,8 +320,8 @@
 
 	while (!leave)
 	{
-		GETCHAR;
-		
+		c = get_char(nxt, size, text);
+
 		switch (state)
 		{
 			case START:
@@ -306,14 +332,14 @@
 					state = SPECIAL;
 				else if (c == 0 || c == '\n')
 					leave = true;
-					
-				if ((leave || state != START) && s < i)
+
+				if ((leave || state != START) && beg < nxt)
 				{
-					proxy.SetColor(s, kColorText);
-					s = i - 1;
+					proxy.SetColor(beg, kColorText);
+					beg = nxt-1;
 				}
 				break;
-			
+
 			case TAG_START:
 				DEB_PrintState(state, c);
 				if (c == '/')
@@ -325,58 +351,58 @@
 				}
 				else if (c == '?' || c == '%')
 				{
-					proxy.SetColor(s, kColorTag);
-					s = i;
-					
-					if (strncasecmp(text + s, "php", 3) == 0)
+					proxy.SetColor(beg, kColorTag);
+					beg = nxt;
+
+					if (strncasecmp(text+beg, "php", 3) == 0)
 					{
-						proxy.SetColor(s, kColorTag);
-						s = (i += 3);
+						proxy.SetColor(beg, kColorTag);
+						beg = (nxt += 3);
 					}
-					
+
 					state = PHP_SCRIPT;
 					percent = (c == '%');
 				}
 				else if (isalpha(c))
 				{
-					proxy.SetColor(s, kColorTag);
-					s = i - 1;
+					proxy.SetColor(beg, kColorTag);
+					beg = nxt-1;
 					kws = proxy.Move(CASE_SENSITIVE_TAG ? c : tolower(c), 1);
 					state = TAG_KEYWORD_START;
 				}
 				else if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s, kColorTag);
+					proxy.SetColor(beg, kColorTag);
 					leave = true;
 				}
 				else if (!isspace(c))
 				{
-					--i;
+					nxt--;
 					state = TAG;
 				}
 				break;
-			
+
 			case TAG_KEYWORD_END:
 				DEB_PrintState(state, c);
 				if (isalpha(c))
 				{
-					proxy.SetColor(s, kColorTag);
-					s = i - 1;
+					proxy.SetColor(beg, kColorTag);
+					beg = nxt-1;
 					kws = proxy.Move(CASE_SENSITIVE_TAG ? c : tolower(c), 1);
 					state = TAG_KEYWORD_START;
 				}
 				else if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s, kColorTag);
+					proxy.SetColor(beg, kColorTag);
 					leave = true;
 				}
 				else if (!isspace(c))
 				{
-					--i;
+					nxt--;
 					state = TAG;
 				}
 				break;
-			
+
 			case TAG_KEYWORD_START:
 				DEB_PrintState(state, c);
 				if (!isalnum(c) && c != '-')
@@ -390,51 +416,57 @@
 						case kKwUserset4: color = kColorUserSet4; break;
 						default:          color = kColorText;     break;
 					}
-					proxy.SetColor(s, color);
+					proxy.SetColor(beg, color);
 					DEB_PrintSetKw(state, kwc);
 
-					if (strncasecmp(text + s, "script", 6) == 0 && text[s - 1] != '/')
-						script = true;
-
+					if (text[beg-1] != '/')
+					{
+						if (strncasecmp(text+beg, "script", 6) == 0)
+							script = true;
+						else if (strncasecmp(text+beg, "style", 5) == 0)
+							style = true;
+					}
 					state = TAG;
-					s = --i;
+					beg = --nxt;
 				}
 				else if (kws)
 					kws = proxy.Move(CASE_SENSITIVE_TAG ? c : tolower(c), kws);
 				break;
-			
+
 			case TAG:
 				DEB_PrintState(state, c);
 				switch (c)
 				{
 					case 0:
 					case '\n':
-						proxy.SetColor(s, kColorTag);
+						proxy.SetColor(beg, kColorTag);
 						leave = true;
 						break;
 					case '>':
-						proxy.SetColor(s, kColorTag);
-						s = i;
-						proxy.SetColor(s, kColorText);
+						proxy.SetColor(beg, kColorTag);
+						beg = nxt;
+						proxy.SetColor(beg, kColorText);
 						if (script)
 							state = JAVASCRIPT;
+						else if (style)
+							state = STYLESHEET;
 						else
 							state = START;
 						break;
 					case '"':
-						proxy.SetColor(s, kColorTag);
-						s = i - 1;
+						proxy.SetColor(beg, kColorTag);
+						beg = nxt-1;
 						state = TAG_STRING_DOUBLE_QUOTES;
 						break;
 					case '\'':
-						proxy.SetColor(s, kColorTag);
-						s = i - 1;
+						proxy.SetColor(beg, kColorTag);
+						beg = nxt-1;
 						state = TAG_STRING_SINGLE_QUOTES;
 						break;
 					case '!':
-						if (i == s + 2)
+						if (nxt == beg+2)
 						{
-							proxy.SetColor(s, kColorTag);
+							proxy.SetColor(beg, kColorTag);
 							state = COMMENT_DTD;
 							forceState = START;
 						}
@@ -442,45 +474,45 @@
 					default:
 						if (isalpha(c))
 						{
-							proxy.SetColor(s, kColorTag);
-							s = i - 1;
+							proxy.SetColor(beg, kColorTag);
+							beg = nxt-1;
 							kws = proxy.Move(CASE_SENSITIVE_ATTR ? c : tolower(c), 1);
 							state = TAG_ATTRIBUTE;
 						}
 						break;
 				}
 				break;
-			
+
 			case TAG_STRING_DOUBLE_QUOTES:
 				DEB_PrintState(state, c);
 				if (c == '"')
 				{
-					proxy.SetColor(s, kColHtmlTagStringDoubleQuotes);
-					s = i;
+					proxy.SetColor(beg, kColHtmlTagStringDoubleQuotes);
+					beg = nxt;
 					state = TAG;
 				}
 				else if (c == '\n' || c == 0)
 				{
-					proxy.SetColor(s, kColHtmlTagStringDoubleQuotes);
+					proxy.SetColor(beg, kColHtmlTagStringDoubleQuotes);
 					leave = true;
 				}
 				break;
-			
+
 			case TAG_STRING_SINGLE_QUOTES:
 				DEB_PrintState(state, c);
 				if (c == '\'')
 				{
-					proxy.SetColor(s, kColHtmlTagStringSingleQuotes);
-					s = i;
+					proxy.SetColor(beg, kColHtmlTagStringSingleQuotes);
+					beg = nxt;
 					state = TAG;
 				}
 				else if (c == '\n' || c == 0)
 				{
-					proxy.SetColor(s, kColHtmlTagStringSingleQuotes);
+					proxy.SetColor(beg, kColHtmlTagStringSingleQuotes);
 					leave = true;
 				}
 				break;
-			
+
 			case TAG_ATTRIBUTE:
 				DEB_PrintState(state, c);
 				if (!isalnum(c) && c != '-')
@@ -494,99 +526,154 @@
 						case kKwUserset4:      color = kColorUserSet4;    break;
 						default:               color = kColorText;        break;
 					}
-					proxy.SetColor(s, color);
+					proxy.SetColor(beg, color);
 					DEB_PrintSetKw(state, kwc);
 
-					s = --i;
+					beg = --nxt;
 					state = TAG;
 				}
 				else if (kws)
 					kws = proxy.Move(CASE_SENSITIVE_ATTR ? c : tolower(c), kws);
 				break;
-			
+
 			case SPECIAL:
 				DEB_PrintState(state, c);
 				if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s, kColorText);
+					proxy.SetColor(beg, kColorText);
 					state = START;
 					leave = true;
 				}
 				else if (c == ';')
 				{
-					proxy.SetColor(s, kColHtmlEntity);
-					s = i;
+					proxy.SetColor(beg, kColHtmlEntity);
+					beg = nxt;
 					state = START;
 				}
 				else if (isspace(c))
 					state = START;
 				break;
-			
+
 			case COMMENT_DTD:
 				DEB_PrintState(state, c);
-				if (c == '-' && text[i] == '-' && i == s + 3 && text[i - 2] == '!' && text[i - 3] == '<')
+				if (c == '-' && text[nxt] == '-' && nxt == beg+3 && text[nxt-2] == '!' && text[nxt-3] == '<')
 				{
-					proxy.SetColor(s, kColHtmlDtd);
-					s = i - 1;
+					proxy.SetColor(beg, kColHtmlDtd);
+					beg = nxt-1;
 					state = COMMENT;
 				}
 				else if (c == '>')
 				{
-					proxy.SetColor(s, kColHtmlDtd);
-					s = i;
+					proxy.SetColor(beg, kColHtmlDtd);
+					beg = nxt;
 					state = forceState;
 				}
 				else if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s, kColHtmlDtd);
+					proxy.SetColor(beg, kColHtmlDtd);
 					leave = true;
 				}
 				break;
-				
+
 			case COMMENT:
 				DEB_PrintState(state, c);
-				if (s == 0 && c == ':')
+				if (beg == 0 && c == ':')
 				{
-					if (strncasecmp(text + i, "javascript", 10) == 0)
+					if (strncasecmp(text+nxt, "javascript", 10) == 0)
 						forceState = JAVASCRIPT;
-					else if (strncasecmp(text + i, "php", 3) == 0)
+					else if (strncasecmp(text+nxt, "php", 3) == 0)
 						forceState = PHP_SCRIPT;
 				}
-				else if (c == '-' && text[i] == '-')
+				else if (c == '-' && text[nxt] == '-')
 				{
-					proxy.SetColor(s, kColHtmlComment);
-					s = ++i;
+					proxy.SetColor(beg, kColHtmlComment);
+					beg = ++nxt;
 					state = COMMENT_DTD;
 				}
 				else if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s, kColHtmlComment);
+					proxy.SetColor(beg, kColHtmlComment);
 					leave = true;
 				}
 				break;
 
+			case STYLESHEET:
+				DEB_PrintState(state, c);
+
+				if (c == '<' && text[nxt] == '/')
+				{
+					if (strncasecmp(text+nxt+1, "style", 5) == 0)
+					{
+						nxt++;
+						state = TAG_START;
+					}
+				}
+				else if (c == '/' && text[nxt] == '*')
+					state = CSS_COMMENT;
+//				else if (isalpha(c))
+//				{
+//					kws = proxy.Move(CASE_SENSITIVE_JS ? c : tolower(c), 1);
+//					state = JS_IDENTIFIER;
+//				}
+				else if (c == '{')
+					state = CSS_DEFINITION;
+				else if (c == 0 || c == '\n')
+					leave = true;
+
+				if ((leave || state != STYLESHEET) && beg < nxt)
+				{
+					proxy.SetColor(beg, kColCssText);
+					beg = nxt-1;
+				}
+				break;
+
+			case CSS_COMMENT:
+				DEB_PrintState(state, c);
+				if ((beg == 0 || nxt > beg+1) && c == '*' && text[nxt] == '/')
+				{
+					proxy.SetColor(beg, kColJsComment);
+					beg = nxt+1;
+					state = STYLESHEET;
+				}
+				else if (c == 0 || c == '\n')
+				{
+					proxy.SetColor(beg, kColJsComment);
+					leave = true;
+				}
+				break;
+
+			case CSS_DEFINITION:
+				DEB_PrintState(state, c);
+				if (c == '}')
+				{
+					state = STYLESHEET;
+				}
+				else if (c == 0 || c == '\n')
+					leave = true;
+				break;
+
 			case JAVASCRIPT:
 				DEB_PrintState(state, c);
 				script = false;
 
-				if (c == '<' && strncasecmp(text + i, "!--", 3) == 0)
+				if (c == '<' && strncasecmp(text+nxt, "!--", 3) == 0)
 				{
-					proxy.SetColor(s, kColorTag);
-					proxy.SetColor(i + 1, kColorComment1);
-					i += 3;
-					s = i;
+					proxy.SetColor(beg, kColorTag);
+					proxy.SetColor(nxt+1, kColorComment1);
+					nxt += 3;
+					beg = nxt;
 				}
-				else if (c == '<' && text[i] == '/')
+				else if (c == '<' && text[nxt] == '/')
 				{
-					if (strncasecmp(text + i + 1, "script", 6) == 0)
+					if (strncasecmp(text+nxt+1, "script", 6) == 0)
 					{
-						++i;
+						nxt++;
 						state = TAG_START;
 					}
 				}
-				else if (c == '/' && text[i] == '*')
+				else if (c == '/' && text[nxt] == '*')
 					state = JS_COMMENT_MULTI_LINE;
-				else if (c == '/' && text[i] == '/')
+				else if (c == '/' && text[nxt] == '/')
 					state = JS_COMMENT_SINGLE_LINE;
 				else if (isalpha(c))
 				{
@@ -599,40 +686,40 @@
 					state = JS_STRING_DOUBLE_QUOTES;
 				else if (c == 0 || c == '\n')
 					leave = true;
-					
-				if ((leave || state != JAVASCRIPT) && s < i)
+
+				if ((leave || state != JAVASCRIPT) && beg < nxt)
 				{
-					proxy.SetColor(s, kColorText);
-					s = i - 1;
+					proxy.SetColor(beg, kColorText);
+					beg = nxt-1;
 				}
 				break;
-				
+
 			case JS_COMMENT_MULTI_LINE:
 				DEB_PrintState(state, c);
-				if ((s == 0 || i > s + 1) && c == '*' && text[i] == '/')
+				if ((beg == 0 || nxt > beg+1) && c == '*' && text[nxt] == '/')
 				{
-					proxy.SetColor(s, kColJsComment);
-					s = i + 1;
+					proxy.SetColor(beg, kColJsComment);
+					beg = nxt+1;
 					state = JAVASCRIPT;
 				}
 				else if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s, kColJsComment);
+					proxy.SetColor(beg, kColJsComment);
 					leave = true;
 				}
 				break;
 
 			case JS_COMMENT_SINGLE_LINE:
 				DEB_PrintState(state, c);
-				if (c == '-' && text[i] == '-')
+				if (c == '-' && text[nxt] == '-')
 				{
-					proxy.SetColor(s, kColJsCommentL);
-					s = i + 1;
+					proxy.SetColor(beg, kColJsCommentL);
+					beg = nxt+1;
 					state = TAG;
 				}
 				else if (c == '\n' || c == 0)
 				{
-					proxy.SetColor(s, kColJsCommentL);
+					proxy.SetColor(beg, kColJsCommentL);
 					state = JAVASCRIPT;
 					leave = true;
 				}
@@ -642,7 +729,7 @@
 				DEB_PrintState(state, c);
 				if (!isalnum(c) && c != '_')
 				{
-					if (i > s + 1 && (kwc = proxy.IsKeyword(kws, kKwJs|kKwUsersets)) != 0)
+					if (nxt > beg+1 && (kwc = proxy.IsKeyword(kws, kKwJs|kKwUsersets)) != 0)
 					{
 						switch (kwc)
 						{
@@ -654,21 +741,21 @@
 							case kKwUserset4:    color = kColorUserSet4;  break;
 							default:             color = kColorText;      break;
 						}
-						proxy.SetColor(s, color);
+						proxy.SetColor(beg, color);
 						DEB_PrintSetKw(state, kwc);
 					}
 					else
 					{
-						proxy.SetColor(s, kColorText);
+						proxy.SetColor(beg, kColorText);
 					}
-					
-					s = --i;
+
+					beg = --nxt;
 					state = JAVASCRIPT;
 				}
 				else if (kws)
 					kws = proxy.Move(CASE_SENSITIVE_JS ? c : tolower(c), kws);
 				break;
-			
+
 			case JS_STRING_SINGLE_QUOTES:
 			case JS_STRING_DOUBLE_QUOTES:
 				DEB_PrintState(state, c);
@@ -676,23 +763,23 @@
 					((state == JS_STRING_SINGLE_QUOTES && c == '\'') ||
 					(state == JS_STRING_DOUBLE_QUOTES && c == '"')))
 				{
-					proxy.SetColor(s, (state == JS_STRING_SINGLE_QUOTES) ? kColJsStringSingleQuotes : kColJsStringDoubleQuotes);
-					s = i;
+					proxy.SetColor(beg, (state == JS_STRING_SINGLE_QUOTES) ? kColJsStringSingleQuotes : kColJsStringDoubleQuotes);
+					beg = nxt;
 					state = JAVASCRIPT;
 				}
 				else if (c == '\n' || c == 0)
 				{
-					if (text[i - 2] == '\\' && text[i - 3] != '\\')
+					if (text[nxt-2] == '\\' && text[nxt-3] != '\\')
 					{
-						proxy.SetColor(s, (state == JS_STRING_SINGLE_QUOTES) ? kColJsStringSingleQuotes : kColJsStringDoubleQuotes);
+						proxy.SetColor(beg, (state == JS_STRING_SINGLE_QUOTES) ? kColJsStringSingleQuotes : kColJsStringDoubleQuotes);
 					}
 					else
 					{
-						proxy.SetColor(s, kColorText);
+						proxy.SetColor(beg, kColorText);
 						state = JAVASCRIPT;
 					}
-					
-					s = size;
+
+					beg = size;
 					leave = true;
 				}
 				else
@@ -701,10 +788,10 @@
 
 			case PHP_SCRIPT:
 				DEB_PrintState(state, c);
-				if (((c == '?' && !percent) || (c == '%' && percent)) && text[i] == '>')
+				if (((c == '?' && !percent) || (c == '%' && percent)) && text[nxt] == '>')
 				{
-					proxy.SetColor(s, kColorTag);
-					s = ++i;
+					proxy.SetColor(beg, kColorTag);
+					beg = ++nxt;
 					state = START;
 				}
 				else if (isalpha(c))
@@ -716,24 +803,24 @@
 					state = PHP_STRING_DOUBLE_QUOTES;
 				else if (c == '\'')
 					state = PHP_STRING_SINGLE_QUOTES;
-				else if (c == '#' || (c == '/' && text[i] == '/'))
+				else if (c == '#' || (c == '/' && text[nxt] == '/'))
 					state = PHP_COMMENT_SINGLE_LINE;
-				else if (c == '/' && text[i] == '*')
+				else if (c == '/' && text[nxt] == '*')
 					state = PHP_COMMENT_MULTI_LINE;
 				else if (c == 0 || c == '\n')
 					leave = true;
 
-				if ((leave || state != START) && s < i)
+				if ((leave || state != START) && beg < nxt)
 				{
-					proxy.SetColor(s, kColorText);
-					s = i - 1;
+					proxy.SetColor(beg, kColorText);
+					beg = nxt-1;
 				}
 				break;
 
 			case PHP_IDENTIFIER:
 				if (!isalnum(c) && c != '_')
 				{
-					if (i > s + 1 && (kwc = proxy.IsKeyword(kws, kKwPhp|kKwUsersets)))
+					if (nxt > beg+1 && (kwc = proxy.IsKeyword(kws, kKwPhp|kKwUsersets)))
 					{
 						DEB_PrintState(state, c, "KWD");
 						switch (kwc)
@@ -747,16 +834,16 @@
 							case kKwUserset4:      color = kColorUserSet4;   break;
 							default:               color = kColorText;       break;
 						}
-						proxy.SetColor(s, color);
+						proxy.SetColor(beg, color);
 						DEB_PrintSetKw(state, kwc);
 					}
 					else
 					{
 						DEB_PrintState(state, c, "TXT");
-						proxy.SetColor(s, kColorText);
+						proxy.SetColor(beg, kColorText);
 					}
-					
-					s = --i;
+
+					beg = --nxt;
 					state = PHP_SCRIPT;
 				}
 				else if (kws)
@@ -768,14 +855,14 @@
 				DEB_PrintState(state, c);
 				if (!esc && c == '"')
 				{
-					proxy.SetColor(s, kColPhpStringDoubleQuotes);
-					s = i;
+					proxy.SetColor(beg, kColPhpStringDoubleQuotes);
+					beg = nxt;
 					state = PHP_SCRIPT;
 				}
 				else if (c == '\n' || c == 0)
 				{
-					proxy.SetColor(s, kColPhpStringDoubleQuotes);
-					s = size;
+					proxy.SetColor(beg, kColPhpStringDoubleQuotes);
+					beg = size;
 					leave = true;
 				}
 				else
@@ -786,14 +873,14 @@
 				DEB_PrintState(state, c);
 				if (!esc && c == '\'')
 				{
-					proxy.SetColor(s, kColPhpStringSingleQuotes);
-					s = i;
+					proxy.SetColor(beg, kColPhpStringSingleQuotes);
+					beg = nxt;
 					state = PHP_SCRIPT;
 				}
 				else if (c == '\n' || c == 0)
 				{
-					proxy.SetColor(s, kColPhpStringSingleQuotes);
-					s = size;
+					proxy.SetColor(beg, kColPhpStringSingleQuotes);
+					beg = size;
 					leave = true;
 				}
 				else
@@ -802,24 +889,24 @@
 
 			case PHP_COMMENT_MULTI_LINE:
 				DEB_PrintState(state, c);
-				if ((s == 0 || i > s + 1) && c == '*' && text[i] == '/')
+				if ((beg == 0 || nxt > beg+1) && c == '*' && text[nxt] == '/')
 				{
-					proxy.SetColor(s, kColPhpComment);
-					s = i + 1;
+					proxy.SetColor(beg, kColPhpComment);
+					beg = nxt+1;
 					state = PHP_SCRIPT;
 				}
 				else if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s, kColPhpComment);
+					proxy.SetColor(beg, kColPhpComment);
 					leave = true;
 				}
 				else if (((percent && c == '%') || (!percent && c == '?')) &&
-					text[i] == '>')
+					text[nxt] == '>')
 				{
-					proxy.SetColor(s, kColPhpComment);
-					s = i - 1;
-					proxy.SetColor(s, kColorTag);
-					s = ++i;
+					proxy.SetColor(beg, kColPhpComment);
+					beg = nxt-1;
+					proxy.SetColor(beg, kColorTag);
+					beg = ++nxt;
 					state = START;
 				}
 				break;
@@ -828,17 +915,17 @@
 				DEB_PrintState(state, c);
 				if (c == 0 || c == '\n')
 				{
-					proxy.SetColor(s, kColPhpCommentL);
+					proxy.SetColor(beg, kColPhpCommentL);
 					state = PHP_SCRIPT;
 					leave = true;
 				}
 				else if (((percent && c == '%') || (!percent && c == '?')) &&
-					text[i] == '>')
+					text[nxt] == '>')
 				{
-					proxy.SetColor(s, kColPhpCommentL);
-					s = i - 1;
-					proxy.SetColor(s, kColorTag);
-					s = ++i;
+					proxy.SetColor(beg, kColPhpCommentL);
+					beg = nxt-1;
+					proxy.SetColor(beg, kColorTag);
+					beg = ++nxt;
 					state = START;
 				}
 				break;
@@ -848,19 +935,19 @@
 				break;
 		}
 	}
-	
+
 #if DEBUG_PHP
 	printf("--> (%s:%s)\n", DEB_StateName(state), script ? "IsScript" : "NoScript");
 #endif
 
 //	if (script)
 //		state |= 0x8000;
-//	
+//
 //	if (percent)
 //		state |= 0x4000;
 } /* ColorLine */
+// 
 
-
 #pragma mark FindNextWord
 
 
@@ -878,15 +965,15 @@
 {
 	int mark = 0, i = 0;
 	int unicode, state, len;
-	
+
 	state = 1;
-	
+
 	while (state > 0 && i < proxy.Size())
 	{
 		proxy.CharInfo(proxy.Text() + i, unicode, len);
-		
+
 		int cl = 0;
-		
+
 		if (unicode == '\n')
 			cl = 3;
 		else if (proxy.isspace_uc(unicode))
@@ -917,7 +1004,7 @@
 				default:
 					cl = 4;
 			}
-		
+
 		unsigned char t = kWordWrapTable[(state - 1) * 6 + cl];
 
 		state = t & 0x7f;
@@ -939,19 +1026,19 @@
 {
 	const char *text = proxy.Text();
 	int size = proxy.Size(), forceState = START;
-	
+
 	if (inOffset > size)
 		inOffset = size;
-	
+
 	char c = 0;
 	int i = 0, bo = 0, s = 0;
 	bool leave = false, esc = false, script = false, percent = false;
 	int state = 0;
-	
+
 	while (i < inOffset)
 	{
-		GETCHAR;
-		
+		c = get_char(i, size, text);
+
 		switch (state)
 		{
 			case START:
@@ -961,11 +1048,11 @@
 					state = SPECIAL;
 				else if (c == 0 || c == '\n')
 					leave = true;
-					
+
 				if ((leave || state != START) && s < i)
 					s = i - 1;
 				break;
-			
+
 			case TAG_START:
 				if (c == '/')
 					state = TAG_KEYWORD_END;
@@ -978,10 +1065,10 @@
 				{
 					s = i;
 					outLangStart = s;
-					
+
 					if (strncasecmp(text + s, "php", 3) == 0)
 						s = (i += 3);
-					
+
 					state = PHP_SCRIPT;
 					percent = (c == '%');
 				}
@@ -1000,7 +1087,7 @@
 					state = TAG;
 				}
 				break;
-			
+
 			case TAG_KEYWORD_END:
 				if (isalpha(c))
 				{
@@ -1017,7 +1104,7 @@
 					state = TAG;
 				}
 				break;
-			
+
 			case TAG_KEYWORD_START:
 				if (!isalnum(c) && c != '-')
 				{
@@ -1028,7 +1115,7 @@
 					s = --i;
 				}
 				break;
-			
+
 			case TAG:
 				switch (c)
 				{
@@ -1070,7 +1157,7 @@
 						break;
 				}
 				break;
-			
+
 			case TAG_STRING_DOUBLE_QUOTES:
 				if (c == '"')
 				{
@@ -1080,7 +1167,7 @@
 				else if (c == '\n' || c == 0)
 					leave = true;
 				break;
-			
+
 			case TAG_STRING_SINGLE_QUOTES:
 				if (c == '\'')
 				{

[... truncated: 302 lines follow ...]


From hoern at mail.berlios.de  Tue Nov 28 12:29:58 2006
From: hoern at mail.berlios.de (hoern at BerliOS)
Date: Tue, 28 Nov 2006 12:29:58 +0100
Subject: [pe-commits] r475 - in trunk/Languages: Resources Sources
Message-ID: <200611281129.kASBTwGs013169@sheep.berlios.de>

Author: hoern
Date: 2006-11-28 12:29:56 +0100 (Tue, 28 Nov 2006)
New Revision: 475
ViewCVS: http://svn.berlios.de/viewcvs/pe-editor?rev=475&view=rev

Added:
   trunk/Languages/Resources/keywords.html-css-js-php
   trunk/Languages/Resources/keywords.html-css-js-php.r
   trunk/Languages/Sources/HtmlCssJsPhp_Language.cpp
   trunk/Languages/Sources/HtmlCssJsPhp_Popup.cpp
Removed:
   trunk/Languages/Resources/keywords.html-js-php
   trunk/Languages/Resources/keywords.html-js-php.r
   trunk/Languages/Sources/HtmlJsPhp_Language.cpp
   trunk/Languages/Sources/HtmlJsPhp_Popup.cpp
Modified:
   trunk/Languages/Resources/Jamfile
   trunk/Languages/Sources/Jamfile
Log:
* Now all relevant (file) names reflect the addition of CSS support


Modified: trunk/Languages/Resources/Jamfile
===================================================================
--- trunk/Languages/Resources/Jamfile	2006-11-28 11:03:02 UTC (rev 474)
+++ trunk/Languages/Resources/Jamfile	2006-11-28 11:29:56 UTC (rev 475)
@@ -8,7 +8,7 @@
 	keywords.diff.r
 	keywords.g.r
 	keywords.html-js.r
-	keywords.html-js-php.r
+	keywords.html-css-js-php.r
 	keywords.html.r
 	keywords.jam.r
 	keywords.java.r

Copied: trunk/Languages/Resources/keywords.html-css-js-php (from rev 471, trunk/Languages/Resources/keywords.html-js-php)

Copied: trunk/Languages/Resources/keywords.html-css-js-php.r (from rev 471, trunk/Languages/Resources/keywords.html-js-php.r)
===================================================================
--- trunk/Languages/Resources/keywords.html-js-php.r	2006-11-26 17:20:06 UTC (rev 471)
+++ trunk/Languages/Resources/keywords.html-css-js-php.r	2006-11-28 11:29:56 UTC (rev 475)
@@ -0,0 +1,2 @@
+read 'KeyW' (0, "keywords.html-css-js-php")
+	"keywords.html-css-js-php";

Deleted: trunk/Languages/Resources/keywords.html-js-php

Deleted: trunk/Languages/Resources/keywords.html-js-php.r

Copied: trunk/Languages/Sources/HtmlCssJsPhp_Language.cpp (from rev 474, trunk/Languages/Sources/HtmlJsPhp_Language.cpp)
===================================================================
--- trunk/Languages/Sources/HtmlJsPhp_Language.cpp	2006-11-28 11:03:02 UTC (rev 474)
+++ trunk/Languages/Sources/HtmlCssJsPhp_Language.cpp	2006-11-28 11:29:56 UTC (rev 475)
@@ -0,0 +1,1647 @@
+/*	$Id: HtmlJs_Language.cpp 453 2006-11-19 02:22:01Z hoern $
+
+	Copyright 1996, 1997, 1998, 2002
+	        Hekkelman Programmatuur B.V.  All rights reserved.
+
+	Redistribution and use in source and binary forms, with or without
+	modification, are permitted provided that the following conditions are met:
+	1. Redistributions of source code must retain the above copyright notice,
+	   this list of conditions and the following disclaimer.
+	2. Redistributions in binary form must reproduce the above copyright notice,
+	   this list of conditions and the following disclaimer in the documentation
+	   and/or other materials provided with the distribution.
+	3. All advertising materials mentioning features or use of this software
+	   must display the following acknowledgement:
+
+	    This product includes software developed by Hekkelman Programmatuur B.V.
+
+	4. The name of Hekkelman Programmatuur B.V. may not be used to endorse or
+	   promote products derived from this software without specific prior
+	   written permission.
+
+	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
+	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+	AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+	EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+	PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+	Created: 12/07/97 22:01:11 by Maarten Hekkelman
+*/
+
+#include <cctype>
+#include <cstring>
+#include <stack>
+#include "CLanguageAddOn.h"
+#include "HColorUtils.h"
+
+#define DEBUG_PHP 0
+const bool CASE_SENSITIVE_PHP  = true;
+const bool CASE_SENSITIVE_JS   = true;
+const bool CASE_SENSITIVE_TAG  = true;
+const bool CASE_SENSITIVE_ATTR = true;
+
+
+enum Language {
+	kLanguageHtml,
+	kLanguageJs,
+	kLanguagePhp
+};
+
+_EXPORT const char kLanguageName[]         = "HTML-CSS-JS-PHP";
+_EXPORT const char kLanguageExtensions[]   = "html;htm;php";
+_EXPORT const char kLanguageCommentStart[] = "<!--";
+_EXPORT const char kLanguageCommentEnd[]   = "-->";
+_EXPORT const char kLanguageKeywordFile[]  = "keywords.html-css-js-php";
+_EXPORT const int16 kInterfaceVersion      = 2;
+
+enum {
+	START = 0,
+		TAG_START,
+		TAG_KEYWORD_START,
+		TAG_KEYWORD_END,
+		TAG,
+		TAG_STRING_DOUBLE_QUOTES,
+		TAG_STRING_SINGLE_QUOTES,
+		TAG_ATTRIBUTE,
+		SPECIAL,
+		COMMENT_DTD,
+		COMMENT,
+	STYLESHEET,
+		CSS_COMMENT,
+		CSS_DEFINITION,
+	JAVASCRIPT,
+		JS_COMMENT_MULTI_LINE,
+		JS_COMMENT_SINGLE_LINE,
+		JS_IDENTIFIER,
+		JS_STRING_SINGLE_QUOTES,
+		JS_STRING_DOUBLE_QUOTES,
+	PHP_SCRIPT,
+		PHP_IDENTIFIER,
+		PHP_COMMENT_MULTI_LINE,
+		PHP_COMMENT_SINGLE_LINE,
+		PHP_STRING_DOUBLE_QUOTES,
+		PHP_STRING_SINGLE_QUOTES
+};
+
+enum {
+	kKwHtmlTag			= 1,	// Set 1
+	kKwHtmlAttribute	= 2,	// Set 2
+	kKwJsLanguage		= 4,	// Set 3
+	kKwJsConstants		= 8,	// Set 4
+	kKwPhpLanguage		= 16,	// Set 5
+	kKwPhpFunctions		= 32,	// Set 6
+	kKwPhpConstants		= 64,	// Set 7
+	kKwUserset1			= 128,	// Set 8
+	kKwUserset2			= 256,	// Set 9
+	kKwUserset3			= 512,	// Set 10
+	kKwUserset4			= 1024,	// Set 11
+	//
+	kKwUsersets			= kKwUserset1|kKwUserset2|kKwUserset3|kKwUserset4,
+	kKwJs				= kKwJsLanguage|kKwJsConstants,
+	kKwPhp				= kKwPhpLanguage|kKwPhpFunctions|kKwPhpConstants
+};
+
+// Color configuration
+enum {
+	kColHtmlComment					= kColorComment1,
+	kColHtmlDtd						= kColorComment2,
+	kColHtmlEntity					= kColorCharConst,
+	kColHtmlAttribute				= kColorAttribute,
+	kColHtmlTagStringDoubleQuotes	= kColorString1,
+	kColHtmlTagStringSingleQuotes	= kColorString2,
+	//
+	kColCssText						= kColorPreprocessor1,
+	//
+	kColJsStringDoubleQuotes		= kColorString1,
+	kColJsStringSingleQuotes		= kColorString2,
+	kColJsComment					= kColorComment2,
+	kColJsCommentL					= kColorComment1,
+	//
+	kColPhpLanguage					= kColorKeyword1,
+	kColPhpFunction					= kColorKeyword2,
+	kColPhpConstants				= kColorCharConst,
+	kColPhpStringDoubleQuotes		= kColorString1,
+	kColPhpStringSingleQuotes		= kColorString2,
+	kColPhpComment					= kColorComment2,
+	kColPhpCommentL					= kColorComment1,
+};
+
+#pragma mark Debug-Functions
+
+
+#if DEBUG_PHP
+
+void DEB_PrintState(const int state, const char c, const char *sub="")
+{
+	const char* name = NULL;
+	switch (state)
+	{
+		case START:						name = "START"; break;
+		case TAG_START:					name = "TAG_START"; break;
+		case TAG_KEYWORD_START:			name = "TAG_KEYWORD_START"; break;
+		case TAG_KEYWORD_END:			name = "TAG_KEYWORD_END"; break;
+		case TAG:						name = "TAG"; break;
+		case TAG_STRING_DOUBLE_QUOTES:	name = "TAG_STRING_DOUBLE_QUOTES"; break;
+		case TAG_STRING_SINGLE_QUOTES:	name = "TAG_STRING_SINGLE_QUOTES"; break;
+		case TAG_ATTRIBUTE:				name = "TAG_ATTRIBUTE"; break;
+		case SPECIAL:					name = "SPECIAL"; break;
+		case COMMENT_DTD:				name = "COMMENT_DTD"; break;
+		case COMMENT:					name = "COMMENT"; break;
+		case STYLESHEET:				name = "STYLESHEET"; break;
+		case CSS_COMMENT:				name = "CSS_COMMENT"; break;
+		case CSS_DEFINITION:			name = "CSS_DEFINITION"; break;
+		case JAVASCRIPT:				name = "JAVASCRIPT"; break;
+		case JS_COMMENT_MULTI_LINE:		name = "JS_COMMENT_MULTI_LINE"; break;
+		case JS_COMMENT_SINGLE_LINE:	name = "JS_COMMENT_SINGLE_LINE"; break;
+		case JS_IDENTIFIER:				name = "JS_IDENTIFIER"; break;
+		case JS_STRING_SINGLE_QUOTES:	name = "JS_STRING_SINGLE_QUOTES"; break;
+		case JS_STRING_DOUBLE_QUOTES:	name = "JS_STRING_DOUBLE_QUOTES"; break;
+		case PHP_SCRIPT:				name = "PHP_SCRIPT"; break;
+		case PHP_IDENTIFIER:			name = "PHP_IDENTIFIER"; break;
+		case PHP_COMMENT_MULTI_LINE:	name = "PHP_COMMENT_MULTI_LINE"; break;
+		case PHP_COMMENT_SINGLE_LINE:	name = "PHP_COMMENT_SINGLE_LINE"; break;
+		case PHP_STRING_DOUBLE_QUOTES:	name = "PHP_STRING_DOUBLE_QUOTES"; break;
+		case PHP_STRING_SINGLE_QUOTES:	name = "PHP_STRING_SINGLE_QUOTES"; break;
+	}
+	if (name)
+	{
+		printf("### %s(%s)", name, sub);
+		printf(isprint(c) ? " [%c]" : " [0x%02X]", c);
+		printf("\n");
+	}
+}
+
+void DEB_PrintSetKw(const int state, int keyword)
+{
+	const char* name = NULL;
+	switch (state)
+	{
+		case START:						name = "START"; break;
+		case TAG_START:					name = "TAG_START"; break;
+		case TAG_KEYWORD_START:			name = "TAG_KEYWORD_START"; break;
+		case TAG_KEYWORD_END:			name = "TAG_KEYWORD_END"; break;
+		case TAG:						name = "TAG"; break;
+		case TAG_STRING_DOUBLE_QUOTES:	name = "TAG_STRING_DOUBLE_QUOTES"; break;
+		case TAG_STRING_SINGLE_QUOTES:	name = "TAG_STRING_SINGLE_QUOTES"; break;
+		case TAG_ATTRIBUTE:				name = "TAG_ATTRIBUTE"; break;
+		case SPECIAL:					name = "SPECIAL"; break;
+		case COMMENT_DTD:				name = "COMMENT_DTD"; break;
+		case COMMENT:					name = "COMMENT"; break;
+		case STYLESHEET:				name = "STYLESHEET"; break;
+		case CSS_COMMENT:				name = "CSS_COMMENT"; break;
+		case CSS_DEFINITION:			name = "CSS_DEFINITION"; break;
+		case JAVASCRIPT:				name = "JAVASCRIPT"; break;
+		case JS_COMMENT_MULTI_LINE:		name = "JS_COMMENT_MULTI_LINE"; break;
+		case JS_COMMENT_SINGLE_LINE:	name = "JS_COMMENT_SINGLE_LINE"; break;
+		case JS_IDENTIFIER:				name = "JS_IDENTIFIER"; break;
+		case JS_STRING_SINGLE_QUOTES:	name = "JS_STRING_SINGLE_QUOTES"; break;
+		case JS_STRING_DOUBLE_QUOTES:	name = "JS_STRING_DOUBLE_QUOTES"; break;
+		case PHP_SCRIPT:				name = "PHP_SCRIPT"; break;
+		case PHP_IDENTIFIER:			name = "PHP_IDENTIFIER"; break;
+		case PHP_COMMENT_MULTI_LINE:	name = "PHP_COMMENT_MULTI_LINE"; break;
+		case PHP_COMMENT_SINGLE_LINE:	name = "PHP_COMMENT_SINGLE_LINE"; break;
+		case PHP_STRING_DOUBLE_QUOTES:	name = "PHP_STRING_DOUBLE_QUOTES"; break;
+		case PHP_STRING_SINGLE_QUOTES:	name = "PHP_STRING_SINGLE_QUOTES"; break;
+	}
+	const char* kwname = NULL;
+	switch (keyword)
+	{
+		case kKwHtmlTag:		kwname = "HtmlTag"; break;
+		case kKwHtmlAttribute:	kwname = "HtmlAttribute"; break;
+		case kKwJsLanguage:		kwname = "JsLanguage"; break;
+		case kKwJsConstants:	kwname = "JsConstants"; break;
+		case kKwPhpLanguage:	kwname = "PhpLanguage"; break;
+		case kKwPhpFunctions:	kwname = "PhpFunctions"; break;
+		case kKwPhpConstants:	kwname = "PhpConstants"; break;
+		case kKwUserset1:		kwname = "Userset1"; break;
+		case kKwUserset2:		kwname = "Userset2"; break;
+		case kKwUserset3:		kwname = "Userset3"; break;
+		case kKwUserset4:		kwname = "Userset4"; break;
+	}
+	//
+	if (name)
+	{
+		if (kwname)
+		{
+			printf("    IsKeyword: <%s>\n", kwname);
+		}
+		else
+		{
+			printf("    IsKeyword: <%i>\n", keyword);
+		}
+	}
+}
+
+const char* DEB_StateName(int state)
+{
+	switch (state)
+	{
+		case START:						return "START";
+		case TAG_START:					return "TAG_START";
+		case TAG_KEYWORD_START:			return "TAG_KEYWORD_START";
+		case TAG_KEYWORD_END:			return "TAG_KEYWORD_END";
+		case TAG:						return "TAG";
+		case TAG_STRING_DOUBLE_QUOTES:	return "TAG_STRING_DOUBLE_QUOTES";
+		case TAG_STRING_SINGLE_QUOTES:	return "TAG_STRING_SINGLE_QUOTES";
+		case TAG_ATTRIBUTE:				return "TAG_ATTRIBUTE";
+		case SPECIAL:					return "SPECIAL";
+		case COMMENT_DTD:				return "COMMENT_DTD";
+		case COMMENT:					return "COMMENT";
+		case STYLESHEET:				return "STYLESHEET";
+		case CSS_COMMENT:				return "CSS_COMMENT";
+		case CSS_DEFINITION:			return "CSS_DEFINITION";
+		case JAVASCRIPT:				return "JAVASCRIPT";
+		case JS_COMMENT_MULTI_LINE:		return "JS_COMMENT_MULTI_LINE";
+		case JS_COMMENT_SINGLE_LINE:	return "JS_COMMENT_SINGLE_LINE";
+		case JS_IDENTIFIER:				return "JS_IDENTIFIER";
+		case JS_STRING_SINGLE_QUOTES:	return "JS_STRING_SINGLE_QUOTES";
+		case JS_STRING_DOUBLE_QUOTES:	return "JS_STRING_DOUBLE_QUOTES";
+		case PHP_SCRIPT:				return "PHP_SCRIPT";
+		case PHP_IDENTIFIER:			return "PHP_IDENTIFIER";
+		case PHP_COMMENT_MULTI_LINE:	return "PHP_COMMENT_MULTI_LINE";
+		case PHP_COMMENT_SINGLE_LINE:	return "PHP_COMMENT_SINGLE_LINE";
+		case PHP_STRING_DOUBLE_QUOTES:	return "PHP_STRING_DOUBLE_QUOTES";
+		case PHP_STRING_SINGLE_QUOTES:	return "PHP_STRING_SINGLE_QUOTES";
+		default:						return "UNKOWN";
+	}
+}
+
+#else
+
+	#define DEB_PrintState
+	#define DEB_StateName
+	#define DEB_PrintSetKw
+
+#endif
+
+
+#pragma mark Support
+
+
+//#define GETCHAR  (c = (i++ < size) ? text[i - 1] : 0)
+inline char get_char(int &i, int &size, const char *text)
+{
+	return (i++ < size) ? text[i-1] : 0;
+}
+
+
+#pragma mark ColorLine
+
+
+_EXPORT void ColorLine(CLanguageProxy& proxy, int& state)
+{
+	const char *text = proxy.Text();
+	int size = proxy.Size();
+	char c;					// Current character
+	int nxt = 0,			// Position after current character in text (i)
+		beg = 0,			// (s)
+		kws = 0,			//
+		forceState = START,	//
+		color,				//
+		kwc;				// Keywordcode
+	bool leave = false, esc = false, script = false, percent = false, style = false;
+
+	proxy.SetColor(0, kColorText);
+
+	if (size <= 0)
+		return;
+
+	script = (state >= JAVASCRIPT);
+	percent = false;
+
+#if DEBUG_PHP
+	printf("#############################################################################\nColorLine(%s:%s)\n%s\n", DEB_StateName(state), script ? "IsScript" : "NoScript", text);
+#endif
+
+	while (!leave)
+	{
+		c = get_char(nxt, size, text);
+
+		switch (state)
+		{
+			case START:
+				DEB_PrintState(state, c);
+				if (c == '<')
+					state = TAG_START;
+				else if (c == '&')
+					state = SPECIAL;
+				else if (c == 0 || c == '\n')
+					leave = true;
+
+				if ((leave || state != START) && beg < nxt)
+				{
+					proxy.SetColor(beg, kColorText);
+					beg = nxt-1;
+				}
+				break;
+
+			case TAG_START:
+				DEB_PrintState(state, c);
+				if (c == '/')
+					state = TAG_KEYWORD_END;
+				else if (c == '!')
+				{
+					state = COMMENT_DTD;
+					forceState = START;
+				}
+				else if (c == '?' || c == '%')
+				{
+					proxy.SetColor(beg, kColorTag);
+					beg = nxt;
+
+					if (strncasecmp(text+beg, "php", 3) == 0)
+					{
+						proxy.SetColor(beg, kColorTag);
+						beg = (nxt += 3);
+					}
+
+					state = PHP_SCRIPT;
+					percent = (c == '%');
+				}
+				else if (isalpha(c))
+				{
+					proxy.SetColor(beg, kColorTag);
+					beg = nxt-1;
+					kws = proxy.Move(CASE_SENSITIVE_TAG ? c : tolower(c), 1);
+					state = TAG_KEYWORD_START;
+				}
+				else if (c == 0 || c == '\n')
+				{
+					proxy.SetColor(beg, kColorTag);
+					leave = true;
+				}
+				else if (!isspace(c))
+				{
+					nxt--;
+					state = TAG;
+				}
+				break;
+
+			case TAG_KEYWORD_END:
+				DEB_PrintState(state, c);
+				if (isalpha(c))
+				{
+					proxy.SetColor(beg, kColorTag);
+					beg = nxt-1;
+					kws = proxy.Move(CASE_SENSITIVE_TAG ? c : tolower(c), 1);
+					state = TAG_KEYWORD_START;
+				}
+				else if (c == 0 || c == '\n')
+				{
+					proxy.SetColor(beg, kColorTag);
+					leave = true;
+				}
+				else if (!isspace(c))
+				{
+					nxt--;
+					state = TAG;
+				}
+				break;
+
+			case TAG_KEYWORD_START:
+				DEB_PrintState(state, c);
+				if (!isalnum(c) && c != '-')
+				{
+					switch (kwc = proxy.IsKeyword(kws, kKwHtmlTag|kKwUsersets))
+					{
+						case kKwHtmlTag:  color = kColorTag;      break;
+						case kKwUserset1: color = kColorUserSet1; break;
+						case kKwUserset2: color = kColorUserSet2; break;
+						case kKwUserset3: color = kColorUserSet3; break;
+						case kKwUserset4: color = kColorUserSet4; break;
+						default:          color = kColorText;     break;
+					}
+					proxy.SetColor(beg, color);
+					DEB_PrintSetKw(state, kwc);
+
+					if (text[beg-1] != '/')
+					{
+						if (strncasecmp(text+beg, "script", 6) == 0)
+							script = true;
+						else if (strncasecmp(text+beg, "style", 5) == 0)
+							style = true;
+					}
+					state = TAG;
+					beg = --nxt;
+				}
+				else if (kws)
+					kws = proxy.Move(CASE_SENSITIVE_TAG ? c : tolower(c), kws);
+				break;
+
+			case TAG:
+				DEB_PrintState(state, c);
+				switch (c)
+				{
+					case 0:
+					case '\n':
+						proxy.SetColor(beg, kColorTag);
+						leave = true;
+						break;
+					case '>':
+						proxy.SetColor(beg, kColorTag);
+						beg = nxt;
+						proxy.SetColor(beg, kColorText);
+						if (script)
+							state = JAVASCRIPT;
+						else if (style)
+							state = STYLESHEET;
+						else
+							state = START;
+						break;
+					case '"':
+						proxy.SetColor(beg, kColorTag);
+						beg = nxt-1;
+						state = TAG_STRING_DOUBLE_QUOTES;
+						break;
+					case '\'':
+						proxy.SetColor(beg, kColorTag);
+						beg = nxt-1;
+						state = TAG_STRING_SINGLE_QUOTES;
+						break;
+					case '!':
+						if (nxt == beg+2)
+						{
+							proxy.SetColor(beg, kColorTag);
+							state = COMMENT_DTD;
+							forceState = START;
+						}
+						break;
+					default:
+						if (isalpha(c))
+						{
+							proxy.SetColor(beg, kColorTag);
+							beg = nxt-1;
+							kws = proxy.Move(CASE_SENSITIVE_ATTR ? c : tolower(c), 1);
+							state = TAG_ATTRIBUTE;
+						}
+						break;
+				}
+				break;
+
+			case TAG_STRING_DOUBLE_QUOTES:
+				DEB_PrintState(state, c);
+				if (c == '"')
+				{
+					proxy.SetColor(beg, kColHtmlTagStringDoubleQuotes);
+					beg = nxt;
+					state = TAG;
+				}
+				else if (c == '\n' || c == 0)
+				{
+					proxy.SetColor(beg, kColHtmlTagStringDoubleQuotes);
+					leave = true;
+				}
+				break;
+
+			case TAG_STRING_SINGLE_QUOTES:
+				DEB_PrintState(state, c);
+				if (c == '\'')
+				{
+					proxy.SetColor(beg, kColHtmlTagStringSingleQuotes);
+					beg = nxt;
+					state = TAG;
+				}
+				else if (c == '\n' || c == 0)
+				{
+					proxy.SetColor(beg, kColHtmlTagStringSingleQuotes);
+					leave = true;
+				}
+				break;
+
+			case TAG_ATTRIBUTE:
+				DEB_PrintState(state, c);
+				if (!isalnum(c) && c != '-')
+				{
+					switch (kwc = proxy.IsKeyword(kws, kKwHtmlAttribute|kKwUsersets))
+					{
+						case kKwHtmlAttribute: color = kColHtmlAttribute; break;
+						case kKwUserset1:      color = kColorUserSet1;    break;
+						case kKwUserset2:      color = kColorUserSet2;    break;
+						case kKwUserset3:      color = kColorUserSet3;    break;
+						case kKwUserset4:      color = kColorUserSet4;    break;
+						default:               color = kColorText;        break;
+					}
+					proxy.SetColor(beg, color);
+					DEB_PrintSetKw(state, kwc);
+
+					beg = --nxt;
+					state = TAG;
+				}
+				else if (kws)
+					kws = proxy.Move(CASE_SENSITIVE_ATTR ? c : tolower(c), kws);
+				break;
+
+			case SPECIAL:
+				DEB_PrintState(state, c);
+				if (c == 0 || c == '\n')
+				{
+					proxy.SetColor(beg, kColorText);
+					state = START;
+					leave = true;
+				}
+				else if (c == ';')
+				{
+					proxy.SetColor(beg, kColHtmlEntity);
+					beg = nxt;
+					state = START;
+				}
+				else if (isspace(c))
+					state = START;
+				break;
+
+			case COMMENT_DTD:
+				DEB_PrintState(state, c);
+				if (c == '-' && text[nxt] == '-' && nxt == beg+3 && text[nxt-2] == '!' && text[nxt-3] == '<')
+				{
+					proxy.SetColor(beg, kColHtmlDtd);
+					beg = nxt-1;
+					state = COMMENT;
+				}
+				else if (c == '>')
+				{
+					proxy.SetColor(beg, kColHtmlDtd);
+					beg = nxt;
+					state = forceState;
+				}
+				else if (c == 0 || c == '\n')
+				{
+					proxy.SetColor(beg, kColHtmlDtd);
+					leave = true;
+				}
+				break;
+
+			case COMMENT:
+				DEB_PrintState(state, c);
+				if (beg == 0 && c == ':')
+				{
+					if (strncasecmp(text+nxt, "javascript", 10) == 0)
+						forceState = JAVASCRIPT;
+					else if (strncasecmp(text+nxt, "php", 3) == 0)
+						forceState = PHP_SCRIPT;
+				}
+				else if (c == '-' && text[nxt] == '-')
+				{
+					proxy.SetColor(beg, kColHtmlComment);
+					beg = ++nxt;
+					state = COMMENT_DTD;
+				}
+				else if (c == 0 || c == '\n')
+				{
+					proxy.SetColor(beg, kColHtmlComment);
+					leave = true;
+				}
+				break;
+
+			case STYLESHEET:
+				DEB_PrintState(state, c);
+
+				if (c == '<' && text[nxt] == '/')
+				{
+					if (strncasecmp(text+nxt+1, "style", 5) == 0)
+					{
+						nxt++;
+						state = TAG_START;
+					}
+				}
+				else if (c == '/' && text[nxt] == '*')
+					state = CSS_COMMENT;
+//				else if (isalpha(c))
+//				{
+//					kws = proxy.Move(CASE_SENSITIVE_JS ? c : tolower(c), 1);
+//					state = JS_IDENTIFIER;
+//				}
+				else if (c == '{')
+					state = CSS_DEFINITION;
+				else if (c == 0 || c == '\n')
+					leave = true;
+
+				if ((leave || state != STYLESHEET) && beg < nxt)
+				{
+					proxy.SetColor(beg, kColCssText);
+					beg = nxt-1;
+				}
+				break;
+
+			case CSS_COMMENT:
+				DEB_PrintState(state, c);
+				if ((beg == 0 || nxt > beg+1) && c == '*' && text[nxt] == '/')
+				{
+					proxy.SetColor(beg, kColJsComment);
+					beg = nxt+1;
+					state = STYLESHEET;
+				}
+				else if (c == 0 || c == '\n')
+				{
+					proxy.SetColor(beg, kColJsComment);
+					leave = true;
+				}
+				break;
+
+			case CSS_DEFINITION:
+				DEB_PrintState(state, c);
+				if (c == '}')
+				{
+					state = STYLESHEET;
+				}
+				else if (c == 0 || c == '\n')
+					leave = true;
+				break;
+
+			case JAVASCRIPT:
+				DEB_PrintState(state, c);
+				script = false;
+
+				if (c == '<' && strncasecmp(text+nxt, "!--", 3) == 0)
+				{
+					proxy.SetColor(beg, kColorTag);
+					proxy.SetColor(nxt+1, kColorComment1);
+					nxt += 3;
+					beg = nxt;
+				}
+				else if (c == '<' && text[nxt] == '/')
+				{
+					if (strncasecmp(text+nxt+1, "script", 6) == 0)
+					{
+						nxt++;
+						state = TAG_START;
+					}
+				}
+				else if (c == '/' && text[nxt] == '*')
+					state = JS_COMMENT_MULTI_LINE;
+				else if (c == '/' && text[nxt] == '/')
+					state = JS_COMMENT_SINGLE_LINE;
+				else if (isalpha(c))
+				{
+					kws = proxy.Move(CASE_SENSITIVE_JS ? c : tolower(c), 1);
+					state = JS_IDENTIFIER;
+				}
+				else if (c == '\'')
+					state = JS_STRING_SINGLE_QUOTES;
+				else if (c == '"')
+					state = JS_STRING_DOUBLE_QUOTES;
+				else if (c == 0 || c == '\n')
+					leave = true;
+
+				if ((leave || state != JAVASCRIPT) && beg < nxt)
+				{
+					proxy.SetColor(beg, kColorText);
+					beg = nxt-1;
+				}
+				break;
+
+			case JS_COMMENT_MULTI_LINE:
+				DEB_PrintState(state, c);
+				if ((beg == 0 || nxt > beg+1) && c == '*' && text[nxt] == '/')
+				{
+					proxy.SetColor(beg, kColJsComment);
+					beg = nxt+1;
+					state = JAVASCRIPT;
+				}
+				else if (c == 0 || c == '\n')
+				{
+					proxy.SetColor(beg, kColJsComment);
+					leave = true;
+				}
+				break;
+
+			case JS_COMMENT_SINGLE_LINE:
+				DEB_PrintState(state, c);
+				if (c == '-' && text[nxt] == '-')
+				{
+					proxy.SetColor(beg, kColJsCommentL);
+					beg = nxt+1;
+					state = TAG;
+				}
+				else if (c == '\n' || c == 0)
+				{
+					proxy.SetColor(beg, kColJsCommentL);
+					state = JAVASCRIPT;
+					leave = true;
+				}
+				break;
+
+			case JS_IDENTIFIER:
+				DEB_PrintState(state, c);
+				if (!isalnum(c) && c != '_')
+				{
+					if (nxt > beg+1 && (kwc = proxy.IsKeyword(kws, kKwJs|kKwUsersets)) != 0)
+					{
+						switch (kwc)
+						{
+							case kKwJsLanguage:  color = kColorKeyword1;  break;
+							case kKwJsConstants: color = kColorCharConst; break;
+							case kKwUserset1:    color = kColorUserSet1;  break;
+							case kKwUserset2:    color = kColorUserSet2;  break;
+							case kKwUserset3:    color = kColorUserSet3;  break;
+							case kKwUserset4:    color = kColorUserSet4;  break;
+							default:             color = kColorText;      break;
+						}
+						proxy.SetColor(beg, color);
+						DEB_PrintSetKw(state, kwc);
+					}
+					else
+					{
+						proxy.SetColor(beg, kColorText);
+					}
+
+					beg = --nxt;
+					state = JAVASCRIPT;
+				}
+				else if (kws)
+					kws = proxy.Move(CASE_SENSITIVE_JS ? c : tolower(c), kws);
+				break;
+
+			case JS_STRING_SINGLE_QUOTES:
+			case JS_STRING_DOUBLE_QUOTES:
+				DEB_PrintState(state, c);
+				if (!esc &&
+					((state == JS_STRING_SINGLE_QUOTES && c == '\'') ||
+					(state == JS_STRING_DOUBLE_QUOTES && c == '"')))
+				{
+					proxy.SetColor(beg, (state == JS_STRING_SINGLE_QUOTES) ? kColJsStringSingleQuotes : kColJsStringDoubleQuotes);
+					beg = nxt;
+					state = JAVASCRIPT;
+				}
+				else if (c == '\n' || c == 0)
+				{
+					if (text[nxt-2] == '\\' && text[nxt-3] != '\\')
+					{
+						proxy.SetColor(beg, (state == JS_STRING_SINGLE_QUOTES) ? kColJsStringSingleQuotes : kColJsStringDoubleQuotes);
+					}
+					else
+					{
+						proxy.SetColor(beg, kColorText);
+						state = JAVASCRIPT;
+					}
+
+					beg = size;
+					leave = true;
+				}
+				else
+					esc = !esc && (c == '\\');
+				break;
+
+			case PHP_SCRIPT:
+				DEB_PrintState(state, c);
+				if (((c == '?' && !percent) || (c == '%' && percent)) && text[nxt] == '>')
+				{
+					proxy.SetColor(beg, kColorTag);
+					beg = ++nxt;
+					state = START;
+				}
+				else if (isalpha(c))
+				{
+					kws = proxy.Move(CASE_SENSITIVE_PHP ? c : tolower(c), 1);
+					state = PHP_IDENTIFIER;
+				}
+				else if (c == '"')
+					state = PHP_STRING_DOUBLE_QUOTES;
+				else if (c == '\'')
+					state = PHP_STRING_SINGLE_QUOTES;
+				else if (c == '#' || (c == '/' && text[nxt] == '/'))
+					state = PHP_COMMENT_SINGLE_LINE;
+				else if (c == '/' && text[nxt] == '*')
+					state = PHP_COMMENT_MULTI_LINE;
+				else if (c == 0 || c == '\n')
+					leave = true;
+
+				if ((leave || state != START) && beg < nxt)
+				{
+					proxy.SetColor(beg, kColorText);
+					beg = nxt-1;
+				}
+				break;
+
+			case PHP_IDENTIFIER:
+				if (!isalnum(c) && c != '_')
+				{
+					if (nxt > beg+1 && (kwc = proxy.IsKeyword(kws, kKwPhp|kKwUsersets)))
+					{
+						DEB_PrintState(state, c, "KWD");
+						switch (kwc)
+						{
+							case kKwPhpLanguage:   color = kColPhpLanguage;  break;
+							case kKwPhpFunctions:  color = kColPhpFunction;  break;
+							case kKwPhpConstants:  color = kColPhpConstants; break;
+							case kKwUserset1:      color = kColorUserSet1;   break;
+							case kKwUserset2:      color = kColorUserSet2;   break;
+							case kKwUserset3:      color = kColorUserSet3;   break;
+							case kKwUserset4:      color = kColorUserSet4;   break;
+							default:               color = kColorText;       break;
+						}
+						proxy.SetColor(beg, color);
+						DEB_PrintSetKw(state, kwc);
+					}
+					else
+					{
+						DEB_PrintState(state, c, "TXT");
+						proxy.SetColor(beg, kColorText);
+					}
+
+					beg = --nxt;
+					state = PHP_SCRIPT;
+				}
+				else if (kws)
+					DEB_PrintState(state, c, "MOV");
+					kws = proxy.Move(CASE_SENSITIVE_PHP ? c : tolower(c), kws);
+				break;
+
+			case PHP_STRING_DOUBLE_QUOTES:
+				DEB_PrintState(state, c);
+				if (!esc && c == '"')
+				{
+					proxy.SetColor(beg, kColPhpStringDoubleQuotes);
+					beg = nxt;
+					state = PHP_SCRIPT;
+				}
+				else if (c == '\n' || c == 0)
+				{
+					proxy.SetColor(beg, kColPhpStringDoubleQuotes);
+					beg = size;
+					leave = true;
+				}
+				else
+					esc = !esc && (c == '\\');
+				break;
+
+			case PHP_STRING_SINGLE_QUOTES:
+				DEB_PrintState(state, c);
+				if (!esc && c == '\'')
+				{
+					proxy.SetColor(beg, kColPhpStringSingleQuotes);
+					beg = nxt;
+					state = PHP_SCRIPT;
+				}
+				else if (c == '\n' || c == 0)
+				{
+					proxy.SetColor(beg, kColPhpStringSingleQuotes);
+					beg = size;
+					leave = true;
+				}
+				else
+					esc = !esc && (c == '\\');
+				break;
+
+			case PHP_COMMENT_MULTI_LINE:
+				DEB_PrintState(state, c);
+				if ((beg == 0 || nxt > beg+1) && c == '*' && text[nxt] == '/')
+				{
+					proxy.SetColor(beg, kColPhpComment);
+					beg = nxt+1;
+					state = PHP_SCRIPT;
+				}
+				else if (c == 0 || c == '\n')
+				{
+					proxy.SetColor(beg, kColPhpComment);
+					leave = true;
+				}
+				else if (((percent && c == '%') || (!percent && c == '?')) &&
+					text[nxt] == '>')
+				{
+					proxy.SetColor(beg, kColPhpComment);
+					beg = nxt-1;
+					proxy.SetColor(beg, kColorTag);
+					beg = ++nxt;
+					state = START;
+				}
+				break;
+
+			case PHP_COMMENT_SINGLE_LINE:
+				DEB_PrintState(state, c);
+				if (c == 0 || c == '\n')
+				{
+					proxy.SetColor(beg, kColPhpCommentL);
+					state = PHP_SCRIPT;
+					leave = true;
+				}
+				else if (((percent && c == '%') || (!percent && c == '?')) &&
+					text[nxt] == '>')
+				{
+					proxy.SetColor(beg, kColPhpCommentL);
+					beg = nxt-1;
+					proxy.SetColor(beg, kColorTag);
+					beg = ++nxt;
+					state = START;
+				}
+				break;
+
+			default:	// error condition, gracefully leave the loop
+				leave = true;
+				break;
+		}
+	}
+
+#if DEBUG_PHP
+	printf("--> (%s:%s)\n", DEB_StateName(state), script ? "IsScript" : "NoScript");
+#endif
+
+//	if (script)
+//		state |= 0x8000;
+//
+//	if (percent)
+//		state |= 0x4000;
+} /* ColorLine */
+// 
+
+#pragma mark FindNextWord
+
+
+const unsigned char kWordWrapTable[] =
+	{
+		0x84, 0x85, 0x80, 0x00, 0x83, 0x83,
+		0x00, 0x02, 0x80, 0x00, 0x00, 0x00,
+		0x00, 0x86, 0x00, 0x00, 0x83, 0x00,
+		0x00, 0x86, 0x00, 0x00, 0x00, 0x00,
+		0x84, 0x85, 0x80, 0x00, 0x83, 0x83,
+		0x84, 0x86, 0x00, 0x00, 0x83, 0x83
+	};
+
+int FindNextWord(const CLanguageProxy& proxy)
+{
+	int mark = 0, i = 0;
+	int unicode, state, len;

[... truncated: 706 lines follow ...]


